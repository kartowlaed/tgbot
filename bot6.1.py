import telebot
from telebot import types 
from types import SimpleNamespace
from datetime import datetime, timedelta
import json
import os
import re
import random
import uuid  
from telebot.apihelper import ApiTelegramException
import logging
from telebot.types import InputMediaPhoto
from collections import OrderedDict


TOKEN = "7315526767:AAGDugQsy0cb7Sj9pBBfFhE80ubgdA2ypkc"
ADMIN_ID = 827377121           # –î–ª—è –ø–æ–∫—É–ø–æ–∫, —Ä–∞–∑–±–∞–Ω–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

bot = telebot.TeleBot(TOKEN)


BASE_DIR = os.path.dirname(os.path.abspath(__file__))

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
DATA_FILE = os.path.join(BASE_DIR, "data.json")

# Global dictionary for user states
user_states = {}  # { user_id: { "state": ..., "temp_data": { ... } } }

with open(DATA_FILE, "r", encoding="utf-8") as f:
    data = json.load(f)

def get_root_path(filename):
    base_dir = os.path.dirname(os.path.abspath(__file__))  # –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –±–æ—Ç–∞
    return os.path.join(base_dir, filename)    
# Global dictionary for user states
user_states = {}  # { user_id: { "state": ..., "temp_data": { ... } } }

# –ò–∑–º–µ–Ω—ë–Ω–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ —ç–º–æ–¥–∑–∏
emoji_details = [
    {"name": "–ö–∞–º–µ–Ω–Ω—ã–µ —ç–º–æ–¥–∑–∏", "price": 30, "quantity": 14, 
     "image": "stone.png",
     "description": "–ë–∞–∑–æ–≤—ã–µ —ç–º–æ–¥–∑–∏, –ø—Ä–æ—á–Ω—ã–µ –∫–∞–∫ –∫–∞–º–µ–Ω—å ü™®. –ù–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ 14 —ç–º–æ–¥–∑–∏ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏."},
    {"name": "–ñ–µ–ª–µ–∑–Ω—ã–µ —ç–º–æ–¥–∑–∏", "price": 50, "quantity": 17, 
     "image": "iron.png",
     "description": "–ù–∞–¥–µ–∂–Ω—ã–µ —ç–º–æ–¥–∑–∏, –∫–∞–∫ –∂–µ–ª–µ–∑–Ω—ã–π –±–ª–æ–∫ ‚öôÔ∏è. –ù–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ 17 —ç–º–æ–¥–∑–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏."},
    {"name": "–ó–æ–ª–æ—Ç—ã–µ —ç–º–æ–¥–∑–∏", "price": 85, "quantity": 21, 
     "image": "gold.png",
     "description": "–°–∏—è—é—â–∏–µ —ç–º–æ–¥–∑–∏, –∫–∞–∫ –∑–æ–ª–æ—Ç–æ–π –±–ª–µ—Å–∫ ‚ú®. –ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ 21 —ç–º–æ–¥–∑–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏."},
    {"name": "–ê–ª–º–∞–∑–Ω—ã–µ —ç–º–æ–¥–∑–∏", "price": 115, "quantity": 28, 
     "image": "diamond.png",
     "description": "–†–µ–¥–∫–∏–µ –∏ —Ä–æ—Å–∫–æ—à–Ω—ã–µ —ç–º–æ–¥–∑–∏, –∫–∞–∫ –∞–ª–º–∞–∑—ã üíé. –ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ 27 —ç–º–æ–¥–∑–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏."},
    {"name": "–ù–µ–∑–µ—Ä–∏—Ç–æ–≤—ã–µ —ç–º–æ–¥–∑–∏", "price": 159, "quantity": 27, 
     "image": "nether.png",
     "description": "–≠–º–æ–¥–∑–∏ –≤—ã—Å—à–µ–≥–æ –∫–ª–∞—Å—Å–∞, —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ üî•. –ù–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ 28 —ç–º–æ–¥–∑–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏."}
]

# –ü–æ–Ω–∏–∂–µ–Ω–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ –∫–µ–π—Å—ã (—Å–∫–∏–¥–∫–∞ 15% —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º –¥–æ —á–∏—Å–ª–∞, –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–µ–≥–æ—Å—è –Ω–∞ 5, 9 –∏–ª–∏ 0)
case_details = [
    {"name": "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π —Å—É–Ω–¥—É–∫", "price": 69, "image": "wood.png", "chance": 35,
     "description": "–ü—Ä–æ—Å—Ç–æ–π –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–π —Å—É–Ω–¥—É–∫ üå≥. –ú–æ–∂–µ—Ç –¥–∞—Ç—å –∫–∞–º–µ–Ω–Ω—ã–µ –∏ –∂–µ–ª–µ–∑–Ω—ã–µ —ç–º–æ–¥–∑–∏."},
    {"name": "–®–∞–ª–∫–µ—Ä", "price": 135, "image": "shulker.png", "chance": 20,
     "description": "–ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —à–∞–ª–∫–µ—Ä üì¶. –ú–æ–∂–µ—Ç –¥–∞—Ç—å –∂–µ–ª–µ–∑–Ω—ã–µ –∏ –∑–æ–ª–æ—Ç—ã–µ —ç–º–æ–¥–∑–∏."},
    {"name": "–ö–æ–º–∞–Ω–¥–Ω—ã–π –±–ª–æ–∫", "price": 169, "image": "command.png", "chance": 10,
     "description": "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –∫–æ–º–∞–Ω–¥–Ω—ã–π –±–ª–æ–∫ üöÄ. –ú–æ–∂–µ—Ç –¥–∞—Ç—å –∞–ª–º–∞–∑–Ω—ã–µ –∏ –Ω–µ–∑–µ—Ä–∏—Ç–æ–≤—ã–µ —ç–º–æ–¥–∑–∏."}
]

# ------------------- –§—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ -------------------
def load_data():
    ordered_keys = [
        "users",
        "promo_codes",
        "tribes",
        "invalid_registrations",
        "banned_users",
        "registration_requests",
        "pending_requests"
    ]

    default_data = {
        "users": {},
        "promo_codes": {},
        "tribes": {},
        "invalid_registrations": [],
        "banned_users": {},
        "registration_requests": [],
        "pending_requests": {}
    }

    # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º —Å –Ω—É–∂–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º
    if not os.path.exists(DATA_FILE):
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(default_data, f, indent=4)
        return default_data

    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–ª—é—á–∏
        for key in default_data:
            if key not in data:
                data[key] = default_data[key]

        # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å "–∏–≥—Ä–æ–∫" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        for uid, user in data["users"].items():
            if "role" not in user:
                user["role"] = "–∏–≥—Ä–æ–∫"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        ordered_data = OrderedDict()
        for key in ordered_keys:
            if key in data:
                ordered_data[key] = data[key]

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ –≤ –∫–æ–Ω–µ—Ü
        for key in data:
            if key not in ordered_data:
                ordered_data[key] = data[key]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ, —á—Ç–æ–±—ã –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä—è–¥–æ–∫
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(ordered_data, f, indent=4)

        return ordered_data

    except json.decoder.JSONDecodeError as e:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(default_data, f, indent=4)
        try:
            bot.send_message(ADMIN_ID, f"‚ùó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ data.json: {e}. –§–∞–π–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        except Exception as send_err:
            print(f"[–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞]: {send_err}")
        return default_data


def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4)

def valid_nickname(nickname):
    return bool(re.fullmatch(r"[A-Za-z0-9 _]{3,16}", nickname))

def valid_birthdate(birthdate):
    try:
        datetime.strptime(birthdate, "%d.%m.%Y")
        return True
    except ValueError:
        return False
   


def calculate_age(birthdate):
    birth_date = datetime.strptime(birthdate, "%d.%m.%Y")
    today = datetime.today()
    return today.year - birth_date.year - ((today.month, today.day) < (birth_date.month, birth_date.day))



# ------------------- Markup definitions -------------------
def get_main_menu_markup(user_id):
    data = load_data()
    user = data["users"].get(user_id, {})
    status = user.get("status", "user")

    markup = types.InlineKeyboardMarkup()

    # üìõ –ó–∞–±–∞–Ω–µ–Ω
    if status == "banned":
        markup.add(types.InlineKeyboardButton("üîì –†–∞–∑–±–∞–Ω –∑–∞ 500‚ÇΩ", callback_data="request_unban"))
        markup.add(types.InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="menu_profile"))
        return markup

    # ‚õî –ù–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–π –±–µ–∑ –ø—Ä–æ—Ö–æ–¥–∞
    if status == "minor" and not user.get("full_access"):
        markup.add(types.InlineKeyboardButton("üß∏ –ü—Ä–æ–ø—É—Å–∫ (250‚ÇΩ)", callback_data="buy_minor_pass"))
        markup.add(types.InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="menu_profile"))
        return markup

    # ‚úÖ –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    # –†—è–¥ 1 ‚Äî –ü—Ä–æ—Ñ–∏–ª—å
    markup.row(types.InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="menu_profile"))

    # –†—è–¥ 2 ‚Äî –ú–∞—Ä–∫–µ—Ç + –¢—Ä–∞–π–±—ã
    btn_market = types.InlineKeyboardButton("üõí –ú–∞—Ä–∫–µ—Ç", callback_data="market_main")
    btn_tribes = types.InlineKeyboardButton("üÜï –¢—Ä–∞–π–±—ã", callback_data="community_tribes")  # <-- –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
    markup.row(btn_market, btn_tribes)

    # –†—è–¥ 3 ‚Äî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    btn_notify = types.InlineKeyboardButton(
        "üîä –£–≤–µ–¥" if user.get("subscribed", False) else "üîá –£–≤–µ–¥",
        callback_data="toggle_subscription"
    )
    markup.row(btn_notify)

    return markup

def minor_get_welcome_markup(user_id):
    # –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏—Ö, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∑–¥–µ—Å—å –∫–Ω–æ–ø–∫–∏;
    # –ø–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    return get_welcome_markup(user_id)

@bot.callback_query_handler(func=lambda call: call.data == "request_unban")
def handle_unban_request(call):
    user_id = str(call.from_user.id)
    data = load_data()
    user = data["users"].get(user_id)

    if user_id not in data.get("banned_users", {}):
        bot.answer_callback_query(call.id, "–í—ã –Ω–µ –∑–∞–±–∞–Ω–µ–Ω—ã.")
        return

    if user.get("balance", 0) < 500:
        bot.send_message(call.message.chat.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –†–∞–∑–±–∞–Ω —Å—Ç–æ–∏—Ç 500‚ÇΩ.")
        return

    user["balance"] -= 500
    user["status"] = "user"
    user["full_access"] = True
    user.setdefault("purchases", []).append({
        "item": "–†–∞–∑–±–∞–Ω",
        "price": 500,
        "date": datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    })

    del data["banned_users"][user_id]

    save_data(data)
    bot.send_message(call.message.chat.id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=get_main_menu_markup(user_id))


@bot.callback_query_handler(func=lambda call: call.data == "buy_minor_pass")
def handle_minor_pass_purchase(call):
    user_id = str(call.from_user.id)
    data = load_data()
    user = data["users"].get(user_id)

    if user_id not in data.get("invalid_registrations", {}):
        bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É.")
        return

    if user.get("balance", 0) < 250:
        bot.send_message(call.message.chat.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü—Ä–æ–ø—É—Å–∫ —Å—Ç–æ–∏—Ç 250‚ÇΩ.")
        return

    user["balance"] -= 250
    user["full_access"] = True
    user["status"] = "user"
    user.setdefault("purchases", []).append({
        "item": "–ü—Ä–æ–ø—É—Å–∫ –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–µ–≥–æ",
        "price": 250,
        "date": datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    })

    del data["invalid_registrations"][user_id]

    save_data(data)
    bot.send_message(call.message.chat.id, "‚úÖ –ü—Ä–æ–ø—É—Å–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å.", reply_markup=get_main_menu_markup(user_id))

@bot.callback_query_handler(func=lambda call: call.data == "toggle_subscription")
def toggle_subscription(call):
    user_id = str(call.from_user.id)
    data = load_data()
    user = data["users"].get(user_id, {})
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    current_status = user.get("subscribed", False)
    user["subscribed"] = not current_status
    save_data(data)
    status_text = "–≤–∫–ª—é—á–µ–Ω—ã" if user["subscribed"] else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
    bot.answer_callback_query(call.id, f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status_text}.")
    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –Ω–æ–≤—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=get_main_menu_markup(user_id))
def get_welcome_markup(user_id):
    # –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    return get_main_menu_markup(user_id)

def profile_menu_markup():
    markup = types.InlineKeyboardMarkup()
    btn_topup = types.InlineKeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å üí≥", callback_data="profile_topup")
    btn_history = types.InlineKeyboardButton("–ò—Å—Ç–æ—Ä–∏—è üìú", callback_data="profile_history")
    btn_promo = types.InlineKeyboardButton("–ü—Ä–æ–º–æ–∫–æ–¥ üé´", callback_data="activate_promo_welcome")
    btn_back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="get_welcome_markup")
    markup.row(btn_topup, btn_history)
    markup.row(btn_promo)
    markup.row(btn_back)
    return markup

def welcome_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    return markup

@bot.callback_query_handler(func=lambda call: call.data == "get_welcome_markup")
def return_welcome(call):
    user_id = str(call.from_user.id)
    send_main_menu(user_id, call.message.chat.id)



@bot.callback_query_handler(func=lambda call: call.data.startswith("profile_"))
def handle_profile(call):
    user_id = str(call.from_user.id)
    data = load_data()
    if user_id not in data["users"]:
        bot.answer_callback_query(call.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ø–∏—Å–∫—É —Ç—Ä–∞–π–±–æ–≤ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
    if call.data == "tribe_join_menu":
        handle_tribe_join_menu(call)
        return

    if call.data == "profile_history":
        user = data["users"][user_id]
        history_text = "–ò—Å—Ç–æ—Ä–∏—è:\n"
        for p in user.get("purchases", []):
            history_text += f"{p['date']}: {p['item']} - {p['price']}‚ÇΩ\n"
        if "referral_history" in user and user["referral_history"]:
            history_text += "\n–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è:\n"
            for r in user["referral_history"]:
                history_text += f"{r['date']}: {r['item']} - {r['amount']}‚ÇΩ\n"
        bot.send_message(call.message.chat.id, history_text, reply_markup=profile_menu_markup())

    elif call.data == "profile_topup":
        bot.send_message(
            call.message.chat.id,
            "‚è≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –¥–æ–Ω–µ–π—à–µ–Ω.\n–ü–ª–∞—Ç–µ–∂–∏ –º–æ–≥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –¥–æ 48 —á–∞—Å–æ–≤.\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–Ω–µ–π—à–µ–Ω –∏ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –Ω–∏–∫:\nhttps://www.donationalerts.com/r/bedrockvalley",
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="profile_menu")
            )
        )

    elif call.data == "activate_promo_welcome":
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:")
        bot.register_next_step_handler(msg, process_profile_promo)

    else:
        user = data["users"][user_id]
        reg_date = user.get("registration_date", "").split()[0] if user.get("registration_date") else ""
        bv_status = "–∞–∫—Ç–∏–≤–Ω–∞" if user.get("bv_plus") else "–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞"
        profile_text = (
            f"–ü—Ä–æ—Ñ–∏–ª—å:\n"
            f"–ù–∏–∫–Ω–µ–π–º: {user.get('nickname', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {reg_date}\n"
            f"–ë–∞–ª–∞–Ω—Å: {user.get('balance', 0)}‚ÇΩ\n"
            f"BV# - {bv_status}\n\n"
            f"–≠–º–æ–¥–∑–∏:\n"
        )
        emojis = user.get("emojis", {})
        if not emojis:
            profile_text += "–ü–æ–∫–∞ —Ç—É—Ç –ø—É—Å—Ç–æ"
        else:
            for cat_key, nums in emojis.items():
                cat_index = int(cat_key)
                cat_name = emoji_details[cat_index]["name"]
                nums_str = ", ".join(str(n) for n in nums)
                profile_text += f"{cat_name}: {nums_str}\n"
        bot.send_message(call.message.chat.id, profile_text, reply_markup=profile_menu_markup())


def market_main_markup():
    markup = types.InlineKeyboardMarkup()
    # –ö–Ω–æ–ø–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞, —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∏—Ö –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
    btn_bv = types.InlineKeyboardButton("BV# ‚≠ê", callback_data="subscribe_bv_plus_market")
    btn_custom = types.InlineKeyboardButton("–ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è üñåÔ∏è", callback_data="customization")
    btn_top = types.InlineKeyboardButton("–î–æ–ø —É—Å–ª—É–≥–∏ ‚≠ê", callback_data="top_services")
    markup.row(btn_bv, btn_custom, btn_top)
    
    # –û—Ç–¥–µ–ª—å–Ω—ã–π —Ä—è–¥ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–∞—Ä–æ–∫" ‚Äî –æ–Ω–∞ –±—É–¥–µ—Ç –±–æ–ª—å—à–æ–π (—Ä–∞—Å—Ç—è–Ω–µ—Ç—Å—è –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É)
    btn_gift = types.InlineKeyboardButton("–ü–æ–¥–∞—Ä–æ–∫ üéÅ", callback_data="daily_gift")
    markup.row(btn_gift)
    
    # –û—Ç–¥–µ–ª—å–Ω—ã–π —Ä—è–¥ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    btn_back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="get_welcome_markup")
    markup.row(btn_back)
    
    return markup


def customization_markup():
    markup = types.InlineKeyboardMarkup()
    btn_emoji = types.InlineKeyboardButton("–≠–º–æ–¥–∑–∏ üòä", callback_data="custom_emoji")
    btn_case = types.InlineKeyboardButton("–ö–µ–π—Å—ã üì¶", callback_data="custom_case")
    btn_back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="market_main")
    markup.add(btn_emoji, btn_case)
    markup.add(btn_back)
    return markup

def top_services_markup():
    markup = types.InlineKeyboardMarkup()
    btn_unban = types.InlineKeyboardButton("–†–∞–∑–±–∞–Ω - 500‚ÇΩ üîì", callback_data="service_unban")
    btn_back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="market_main")
    markup.add(btn_unban)
    markup.add(btn_back)
    return markup

def emoji_info_markup(index):
    markup = types.InlineKeyboardMarkup()
    btn_buy = types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å üí∞", callback_data=f"buy_emoji_{index}")
    nav_buttons = []
    if index > 0:
        nav_buttons.append(types.InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"emoji_prev_{index}"))
    nav_buttons.append(types.InlineKeyboardButton(f"{index+1}/{len(emoji_details)}", callback_data="noop"))
    if index < len(emoji_details) - 1:
        nav_buttons.append(types.InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"emoji_next_{index}"))
    btn_back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="customization_back")
    markup.add(*nav_buttons)
    markup.add(btn_buy, btn_back)
    return markup

def case_info_markup(index):
    markup = types.InlineKeyboardMarkup()
    btn_buy = types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å üí∞", callback_data=f"buy_case_{index}")
    nav_buttons = []
    if index > 0:
        nav_buttons.append(types.InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"case_prev_{index}"))
    nav_buttons.append(types.InlineKeyboardButton(f"{index+1}/{len(case_details)}", callback_data="noop"))
    if index < len(case_details) - 1:
        nav_buttons.append(types.InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"case_next_{index}"))
    btn_back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="customization_back")
    markup.add(*nav_buttons)
    markup.add(btn_buy, btn_back)
    return markup

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ –≤–≤–æ–¥–∞
def cancel_pending_action(user_id):
    if user_id in user_states:
        user_states.pop(user_id, None)

@bot.callback_query_handler(func=lambda call: call.data == "cancel_input")
def cancel_input_handler(call):
    user_id = str(call.from_user.id)
    cancel_pending_action(user_id)
    bot.edit_message_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=get_welcome_markup(user_id)
    )

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å —Å–ª—É—á–∞–π–Ω—ã–º —Å–æ–≤–µ—Ç–æ–º
def send_main_menu(user_id, chat_id):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç—Ä–∏–∫ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —Å–ª—É—á–∞–π–Ω—ã–º —Å–æ–≤–µ—Ç–æ–º.
    """
    update_streak(user_id)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∏–∫ (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å)
    
    tips = [
    "üßø –û–∫–æ –≠–Ω–¥–µ—Ä–∞ ‚Äî —Ç–≤–æ—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. –ß–µ–º –∞–∫—Ç–∏–≤–Ω–µ–µ, —Ç–µ–º –±–æ–ª—å—à–µ –Ω–∞–≥—Ä–∞–¥!",
    "üéÅ –ó–∞—Ö–æ–¥–∏ –≤ –ú–∞—Ä–∫–µ—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî —Ç–∞–º –º–æ–≥—É—Ç –ø–æ—è–≤–∏—Ç—å—Å—è –ø–æ–¥–∞—Ä–∫–∏!",
    "üî• –°–æ—Ö—Ä–∞–Ω—è–π —Å—Ç—Ä–∏–∫, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –±–æ–ª—å—à–µ –û–∫–æ–≤ –≠–Ω–¥–µ—Ä–∞ –∏ –±–æ–Ω—É—Å–æ–≤!",
    "üéØ –í—ã–ø–æ–ª–Ω—è–π –ª—é–±—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –±–æ—Ç–µ ‚Äî –∑–∞ –Ω–∏—Ö —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å üßø –û–∫–æ –≠–Ω–¥–µ—Ä–∞!",
    "üõí –ü—Ä–æ–≤–µ—Ä—å –º–∞–≥–∞–∑–∏–Ω —ç–º–æ–¥–∑–∏ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—ã–µ!",
    "üé® –ó–∞–≥–ª—è–Ω–∏ –≤ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—é ‚Äî –ø–æ—Ä–∞ –æ—Å–≤–µ–∂–∏—Ç—å —Å—Ç–∏–ª—å?",
    "üè∞ –í—Å—Ç—É–ø–∏ –≤ —Ç—Ä–∞–π–± –∏–ª–∏ —Å–æ–∑–¥–∞–π —Å–≤–æ–π ‚Äî —Ç—ã –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º!",
    "üì¢ –í–∫–ª—é—á–∏ –ù–æ–≤–æ—Å—Ç–∏ üîä –æ—Ç –±–æ—Ç–∞, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!",
    "‚≠ê BV# –¥–∞—ë—Ç –±–æ–Ω—É—Å—ã, –∫–µ–π—Å—ã –∏ –∫–∞—Å—Ç–æ–º–Ω—ã–µ —ç–º–æ–¥–∑–∏ ‚Äî –Ω–µ —É–ø—É—Å—Ç–∏ —à–∞–Ω—Å!",
    "üë• –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π –±–æ–Ω—É—Å—ã –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ!",
    "üìÖ –°—Ç—Ä–∏–∫ ‚Äî —ç—Ç–æ üî• –∏ üßø. –ù–µ —Ç–µ—Ä—è–π –ø—Ä–æ–≥—Ä–µ—Å—Å!",
    "üéâ –û–∫–æ –≠–Ω–¥–µ—Ä–∞ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–∂–µ —Å–ª—É—á–∞–π–Ω–æ. –ë—É–¥—å –∞–∫—Ç–∏–≤–µ–Ω!",
    "üîì –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∏—á–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∑–∞ üßø –û–∫–æ –≠–Ω–¥–µ—Ä–∞ ‚Äî –∫–æ–ø–∏ —Å —É–º–æ–º!",
    "üïπ –£—á–∞—Å—Ç–≤—É–π –≤ –∏–≤–µ–Ω—Ç–∞—Ö, —á—Ç–æ–±—ã –≤—ã–±–∏—Ç—å —Ä–µ–¥–∫–∏–µ —ç–º–æ–¥–∑–∏ –∏ –∫–µ–π—Å—ã!",
    "üèÜ –¢–≤–æ–π –Ω–∏–∫ –º–æ–∂–µ—Ç –ø–æ–ø–∞—Å—Ç—å –≤ —Ç–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö ‚Äî –Ω–µ —É–ø—É—Å—Ç–∏ —à–∞–Ω—Å!",
    "üåÄ –¢—ã ‚Äî —á–∞—Å—Ç—å Bedrock Valley. –°–¥–µ–ª–∞–π —Å–≤–æ—ë –∏–º—è –≥—Ä–æ–º–∫–∏–º!"
]


    chosen_tip = random.choice(tips)
    
    main_text = (
        "üéâ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üéâ\n\n"
        f"{chosen_tip}\n\n"
        "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å: @bedrockvalley"
    )
    bot.send_message(chat_id, main_text, reply_markup=get_welcome_markup(user_id))


@bot.message_handler(commands=['tribe'])
def cmd_tribe(message):
    call = SimpleNamespace(
        message=message,
        from_user=message.from_user,
        data="community_tribes"
    )
    try:
        tribe_main_menu(call)
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é —Ç—Ä–∞–π–±–æ–≤: {e}")
        try:
            bot.send_message(message.chat.id, "üèò –ú–µ–Ω—é —Ç—Ä–∞–π–±–æ–≤")
        except Exception as err:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å fallback —Å–æ–æ–±—â–µ–Ω–∏–µ: {err}")


@bot.message_handler(commands=['streak'])
def cmd_streak(message):
    user_id = str(message.from_user.id)
    data = load_data()
    user = data["users"].get(user_id)
    if user:
        streak = user.get("login_streak", 0)
        bot.send_message(message.chat.id, f"üî• –í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: <b>{streak}</b> –¥–Ω–µ–π.", parse_mode="HTML")
    else:
        bot.send_message(message.chat.id, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
# ------------------- –ù–æ–≤—ã–π –±–ª–æ–∫ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –º–µ–Ω—é -------------------
def get_admin_markup_new():
    markup = types.InlineKeyboardMarkup(row_width=1)
    btn_promos = types.InlineKeyboardButton("–ü—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="admin_promos")
    btn_notifications = types.InlineKeyboardButton("–û–ø–æ–≤–µ—â–µ–Ω–∏—è", callback_data="admin_notifications")
    btn_roles = types.InlineKeyboardButton("–†–æ–ª—å", callback_data="admin_roles")
    btn_bans = types.InlineKeyboardButton("–ë–∞–Ω—ã", callback_data="admin_bans")
    markup.add(btn_promos, btn_notifications, btn_roles, btn_bans)

    return markup

@bot.message_handler(commands=["admin"])
def admin_menu(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    bot.send_message(message.chat.id, "–ê–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é:", reply_markup=get_admin_markup_new())

# –ü–æ–¥–º–µ–Ω—é –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
@bot.callback_query_handler(func=lambda call: call.data == "admin_promos")
def admin_promos_menu(call):
    print("admin_promos –≤—ã–∑–≤–∞–Ω")
    markup = types.InlineKeyboardMarkup(row_width=2)
    btn_addpromo = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="admin_add_promo")
    btn_viewpromos = types.InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="admin_view_promos")
    btn_delpromo = types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="admin_del_promo")
    btn_credit = types.InlineKeyboardButton("–ù–∞—á–∏—Å–ª–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞", callback_data="admin_credit_funds")
    markup.add(btn_addpromo, btn_viewpromos, btn_delpromo, btn_credit)
    try:
        bot.edit_message_text("–ú–µ–Ω—é –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:", call.message.chat.id, call.message.message_id, reply_markup=markup)
    except Exception as e:
        print(f'[ERROR] –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')

# –ü–æ–¥–º–µ–Ω—é –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
@bot.callback_query_handler(func=lambda call: call.data == "admin_notifications")
def admin_notifications_menu(call):
    markup = types.InlineKeyboardMarkup(row_width=2)
    btn_announcement = types.InlineKeyboardButton("–°–¥–µ–ª–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å", callback_data="admin_announcement")
    btn_update = types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", callback_data="admin_update")
    markup.add(btn_announcement, btn_update)
    try:
        bot.edit_message_text(
            "–ú–µ–Ω—é –æ–ø–æ–≤–µ—â–µ–Ω–∏–π:",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=markup
        )
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ admin_notifications: {e}")
        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.send_message(call.message.chat.id, "–ú–µ–Ω—é –æ–ø–æ–≤–µ—â–µ–Ω–∏–π:", reply_markup=markup)


# –ü–æ–¥–º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏
@bot.callback_query_handler(func=lambda call: call.data == "admin_roles")
def admin_roles_menu(call):
    if call.from_user.id != ADMIN_ID:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    markup = types.InlineKeyboardMarkup(row_width=3)
    btn_add = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å", callback_data="admin_add_role")
    btn_modify = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å", callback_data="admin_modify_role")
    btn_del = types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å", callback_data="admin_del_role")
    markup.add(btn_add, btn_modify, btn_del)
    try:
        bot.edit_message_text(
            "–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏:",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=markup
        )
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ admin_roles: {e}")
        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.send_message(call.message.chat.id, "–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏:", reply_markup=markup)


# –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ —á–µ—Ä–µ–∑ username
@bot.callback_query_handler(func=lambda call: call.data == "admin_credit_funds")
def admin_credit_funds(call):
    if call.from_user.id != ADMIN_ID:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    msg = bot.send_message(call.message.chat.id,
                           "–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞ —á—Ç–æ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –º–æ–Ω–µ—Ç—ã —á–µ—Ä–µ–∑ —Å–∏–º–≤–æ–ª |.\n"
                           "–ù–∞–ø—Ä–∏–º–µ—Ä: @user123|500|–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏")
    bot.register_next_step_handler(msg, process_credit_funds)

def process_credit_funds(message):
    try:
        parts = message.text.split("|")
        if len(parts) != 3:
            raise ValueError
        target_username = parts[0].strip()
        if target_username.startswith("@"):
            target_username = target_username[1:]
        amount = int(parts[1].strip())
        reason = parts[2].strip()
    except Exception:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    data = load_data()
    target_user_id = None
    for uid, user in data["users"].items():
        if user.get("telegram_username", "").lower() == target_username.lower():
            target_user_id = uid
            break
    if not target_user_id:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    data["users"][target_user_id]["balance"] = data["users"][target_user_id].get("balance", 0) + amount
    if "purchases" not in data["users"][target_user_id]:
        data["users"][target_user_id]["purchases"] = []
    data["users"][target_user_id]["purchases"].append({
        "item": f"–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤: {reason}",
        "price": amount,
        "date": datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    })
    save_data(data)
    try:
        bot.send_message(target_user_id, f"–ù–∞ –≤–∞—à —Å—á–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount}‚ÇΩ.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}\n(@{target_username})")
    except Exception:
        pass
    bot.send_message(message.chat.id, f"–ù–∞ —Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{target_username} –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount}‚ÇΩ.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
@bot.callback_query_handler(func=lambda call: call.data == "admin_add_promo")
def admin_add_promo_handler(call):
    if call.from_user.id != ADMIN_ID:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    msg = bot.send_message(call.message.chat.id,
                           "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥, –±–æ–Ω—É—Å –∏ —á–∏—Å–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, PROMO 100 10):")
    bot.register_next_step_handler(msg, process_addpromo)

def process_addpromo(message):
    try:
        parts = message.text.split()
        if len(parts) != 3:
            raise ValueError
        code, bonus, max_uses = parts[0], int(parts[1]), int(parts[2])
    except Exception:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    data = load_data()
    data["promo_codes"][code] = {"bonus": bonus, "max_uses": max_uses, "uses": 0}
    save_data(data)
    bot.send_message(message.chat.id, f"–ü—Ä–æ–º–æ–∫–æ–¥ {code} –¥–æ–±–∞–≤–ª–µ–Ω: –±–æ–Ω—É—Å {bonus}‚ÇΩ, {max_uses} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
@bot.callback_query_handler(func=lambda call: call.data == "admin_view_promos")
def admin_view_promos_handler(call):
    if call.from_user.id != ADMIN_ID:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    data = load_data()
    promo_list = "–ü—Ä–æ–º–æ–∫–æ–¥—ã:\n"
    for code, promo in data["promo_codes"].items():
        promo_list += f"{code}: {promo['bonus']}‚ÇΩ, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {promo['uses']}/{promo['max_uses']}\n"
    bot.send_message(call.message.chat.id, promo_list)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
@bot.callback_query_handler(func=lambda call: call.data == "admin_del_promo")
def admin_del_promo_handler(call):
    if call.from_user.id != ADMIN_ID:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    bot.register_next_step_handler(msg, process_delpromo)

def process_delpromo(message):
    code = message.text.strip()
    data = load_data()
    if code in data["promo_codes"]:
        data["promo_codes"].pop(code)
        save_data(data)
        bot.send_message(message.chat.id, f"–ü—Ä–æ–º–æ–∫–æ–¥ {code} —É–¥–∞–ª—ë–Ω.")
    else:
        bot.send_message(message.chat.id, "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏
@bot.callback_query_handler(func=lambda call: call.data == "admin_add_role")
def admin_add_role_prompt(call):
    if call.from_user.id != ADMIN_ID:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: @username|–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏")
    bot.register_next_step_handler(msg, process_add_role)

def process_add_role(message):
    try:
        username, role = message.text.split("|", 1)
        username = username.strip()
        role = role.strip()
    except Exception:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    data = load_data()
    target_user_id = None
    for uid, user in data["users"].items():
        if user.get("telegram_username", "").lower() == username.replace("@", "").lower():
            target_user_id = uid
            break
    if not target_user_id:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    data["users"][target_user_id]["role"] = role
    save_data(data)
    bot.send_message(message.chat.id, f"–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∫–∞–∫ '{role}'.")

@bot.callback_query_handler(func=lambda call: call.data == "admin_modify_role")
def admin_modify_role_prompt(call):
    if call.from_user.id != ADMIN_ID:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: @username|–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏")
    bot.register_next_step_handler(msg, process_modify_role)

def process_modify_role(message):
    try:
        username, role = message.text.split("|", 1)
        username = username.strip()
        role = role.strip()
    except Exception:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    data = load_data()
    target_user_id = None
    for uid, user in data["users"].items():
        if user.get("telegram_username", "").lower() == username.replace("@", "").lower():
            target_user_id = uid
            break
    if not target_user_id:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    data["users"][target_user_id]["role"] = role
    save_data(data)
    bot.send_message(message.chat.id, f"–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ '{role}'.")

@bot.callback_query_handler(func=lambda call: call.data == "admin_del_role")
def admin_del_role_prompt(call):
    if call.from_user.id != ADMIN_ID:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å (—Å–±—Ä–æ—Å –¥–æ '–∏–≥—Ä–æ–∫'):")
    bot.register_next_step_handler(msg, process_del_role)

def process_del_role(message):
    try:
        username = message.text.strip()
    except Exception:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    data = load_data()
    target_user_id = None
    for uid, user in data["users"].items():
        if user.get("telegram_username", "").lower() == username.replace("@", "").lower():
            target_user_id = uid
            break
    if not target_user_id:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    data["users"][target_user_id]["role"] = "–∏–≥—Ä–æ–∫"
    save_data(data)
    bot.send_message(message.chat.id, f"–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} —Å–±—Ä–æ—à–µ–Ω–∞ –¥–æ '–∏–≥—Ä–æ–∫'.")




# ------------------- –§—É–Ω–∫—Ü–∏—è "–°–¥–µ–ª–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å" -------------------
@bot.callback_query_handler(func=lambda call: call.data == "admin_announcement")
def admin_announcement(call):
    if call.from_user.id != ADMIN_ID:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    msg = bot.send_message(call.message.chat.id, 
                           "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏.\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é (—Ç–µ–∫—Å—Ç –ø–æ–¥–ø–∏—Å–∏ –±—É–¥–µ—Ç –Ω–æ–≤–æ—Å—Ç—å—é).")
    bot.register_next_step_handler(msg, process_announcement)

def process_announcement(message):
    announcement_text = ""
    photo = None
    if message.content_type == "photo":
        photo = message.photo[-1].file_id  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
        announcement_text = message.caption if message.caption else ""
    else:
        announcement_text = message.text
    data = load_data()
    # –†–∞—Å—Å—ã–ª–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å –≤—Å–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏–≥—Ä–æ–∫–∞–º
    for uid in data["users"]:
        try:
            if photo:
                bot.send_photo(uid, photo, caption=announcement_text)
            else:
                bot.send_message(uid, announcement_text)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")
    bot.send_message(message.chat.id, "–ù–æ–≤–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤—Å–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏–≥—Ä–æ–∫–∞–º.")

def process_update(message):
    update_text = ""
    photo = None
    if message.content_type == "photo":
        photo = message.photo[-1].file_id
        update_text = message.caption if message.caption else ""
    else:
        update_text = message.text

    data = load_data()
    delivered = 0

    for uid, user in data["users"].items():
        if user.get("subscribed", False):
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                if photo:
                    bot.send_photo(uid, photo, caption=update_text)
                else:
                    bot.send_message(uid, update_text)

                # –ù–∞—á–∏—Å–ª—è–µ–º 1‚ÇΩ
                user["balance"] = user.get("balance", 0) + 1
                delivered += 1

            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")

    save_data(data)

    bot.send_message(
        message.chat.id,
        f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ <b>{delivered}</b> –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n"
        f"üí∏ –í—Å–µ–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ –ø–æ <b>+1‚ÇΩ</b>.",
        parse_mode="HTML"
    )

    # üîΩ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–µ–º—É Telegram-–≥—Ä—É–ø–ø—ã
    send_to_topic(
        chat_id=-1002353421985,
        thread_id=3,
        text=f"üì¢ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</b>\n{update_text}",
        parse_mode="HTML"
    )


@bot.message_handler(commands=["ban"])
def handle_ban(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    try:
        _, identifier, reason = message.text.split(maxsplit=2)
    except ValueError:
        bot.send_message(message.chat.id, "–§–æ—Ä–º–∞—Ç: /ban <–Ω–∏–∫ –∏–ª–∏ @username> <–ø—Ä–∏—á–∏–Ω–∞>")
        return

    data = load_data()
    identifier = identifier.strip().lower().lstrip("@")
    target_id = None

    for uid, user in data["users"].items():
        if identifier == user.get("nickname", "").lower() or identifier == user.get("telegram_username", "").lower():
            target_id = uid
            break

    if not target_id:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    user_data = data["users"].pop(target_id)
    data["banned_users"][target_id] = {
        "nickname": user_data.get("nickname", ""),
        "telegram_username": user_data.get("telegram_username", ""),
        "reason": reason,
        "ban_date": datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    }

    save_data(data)
    try:
        bot.send_message(int(target_id), f"‚õî –í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
    except:
        pass
    bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –∑–∞–±–∞–Ω–µ–Ω.")

@bot.message_handler(commands=["unban"])
def handle_unban(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    try:
        # –û–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –∫–∞–∫: /unban <–Ω–∏–∫ –∏–ª–∏ @username>
        _, identifier = message.text.split(maxsplit=1)
    except ValueError:
        bot.send_message(message.chat.id, "–§–æ—Ä–º–∞—Ç: /unban <–Ω–∏–∫ –∏–ª–∏ @username>")
        return

    data = load_data()
    identifier = identifier.strip().lower().lstrip("@")
    target_id = None

    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–Ω-–ª–∏—Å—Ç–µ –ø–æ –Ω–∏–∫–Ω–µ–π–º—É –∏–ª–∏ telegram_username (–ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É)
    for uid, user in data["banned_users"].items():
        if (identifier == user.get("nickname", "").lower() or 
            identifier == user.get("telegram_username", "").lower()):
            target_id = uid
            break

    if not target_id:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–Ω-–ª–∏—Å—Ç–µ.")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–∑–±–∞–Ω–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—Ä–∞—Ç–Ω–æ –≤ "users"
    unbanned = data["banned_users"].pop(target_id)
    data["users"][target_id] = {
        "nickname": unbanned.get("nickname", ""),
        "telegram_username": unbanned.get("telegram_username", ""),
        "role": "–∏–≥—Ä–æ–∫",
        "balance": 0,
        "purchases": [],
        "emojis": {},
        "approved": True,
        "registration_date": datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    }

    save_data(data)
    try:
        # –ï—Å–ª–∏ target_id –º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ int (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è), –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å target_id –Ω–∞–ø—Ä—è–º—É—é
        bot.send_message(target_id, "‚úÖ –í—ã –±—ã–ª–∏ —Ä–∞–∑–±–∞–Ω–µ–Ω—ã.")
    except Exception as e:
        print(f"[ERROR] –ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞–∑–±–∞–Ω–µ–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
    bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —Ä–∞–∑–±–∞–Ω–µ–Ω.")


@bot.callback_query_handler(func=lambda call: call.data == "admin_bans")
def admin_bans_menu(call):
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("üîí –ó–∞–±–∞–Ω–∏—Ç—å", callback_data="admin_ban_user"),
        types.InlineKeyboardButton("üîì –†–∞–∑–±–∞–Ω–∏—Ç—å", callback_data="admin_unban_user")
    )
    try:
        bot.edit_message_text("–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–Ω–∞–º–∏:", call.message.chat.id,
                              call.message.message_id, reply_markup=markup)
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è (admin_bans_menu): {e}")

@bot.callback_query_handler(func=lambda call: call.data == "admin_ban_user")
def admin_ban_prompt(call):
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ <b>@username|–ø—Ä–∏—á–∏–Ω–∞</b> –¥–ª—è –±–∞–Ω–∞:", parse_mode="HTML")
    bot.register_next_step_handler(msg, process_admin_ban)

def process_admin_ban(message):
    try:
        identifier, reason = message.text.split("|", 1)
        identifier = identifier.strip().lower().lstrip("@")
        reason = reason.strip()
    except:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: @user123|—Å–ø–∞–º –≤ —á–∞—Ç–µ")
        return

    data = load_data()
    target_id = None

    for uid, user in data["users"].items():
        if identifier == user.get("nickname", "").lower() or identifier == user.get("telegram_username", "").lower():
            target_id = uid
            break

    if not target_id:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    user_data = data["users"].pop(target_id)
    data["banned_users"][target_id] = {
        "nickname": user_data.get("nickname", ""),
        "telegram_username": user_data.get("telegram_username", ""),
        "reason": reason,
        "ban_date": datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    }

    save_data(data)
    bot.send_message(message.chat.id, f"‚úÖ –ó–∞–±–∞–Ω–µ–Ω @{identifier} –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {reason}")
    try:
        bot.send_message(int(target_id), f"‚õî –í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
    except:
        pass

@bot.callback_query_handler(func=lambda call: call.data == "admin_unban_user")
def admin_unban_prompt(call):
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ <b>@username</b> –∏–ª–∏ –Ω–∏–∫ –¥–ª—è —Ä–∞–∑–±–∞–Ω–∏–≤–∞–Ω–∏—è:", parse_mode="HTML")
    bot.register_next_step_handler(msg, process_admin_unban)

def process_admin_unban(message):
    identifier = message.text.strip().lower().lstrip("@")
    data = load_data()
    target_id = None

    for uid, user in data["banned_users"].items():
        if identifier == user.get("nickname", "").lower() or identifier == user.get("telegram_username", "").lower():
            target_id = uid
            break

    if not target_id:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–Ω-–ª–∏—Å—Ç–µ.")
        return

    unbanned = data["banned_users"].pop(target_id)
    data["users"][target_id] = {
        "nickname": unbanned.get("nickname", ""),
        "telegram_username": unbanned.get("telegram_username", ""),
        "role": "–∏–≥—Ä–æ–∫",
        "balance": 0,
        "purchases": [],
        "emojis": {},
        "approved": True,
        "registration_date": datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    }

    save_data(data)
    bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{identifier} —Ä–∞–∑–±–∞–Ω–µ–Ω.")
    try:
        bot.send_message(int(target_id), "‚úÖ –í—ã –±—ã–ª–∏ —Ä–∞–∑–±–∞–Ω–µ–Ω—ã.")
    except:
        pass

# ------------------- –û–∫–Ω–æ BV# -------------------
@bot.callback_query_handler(func=lambda call: call.data in ["subscribe_bv_plus", "subscribe_bv_plus_market"])
def show_bv_plus_window(call):
    bv_description = (
        "‚ú® <b>–ü–æ–¥–ø–∏—Å–∫–∞ BV#</b> ‚Äî –≤—ã–¥–µ–ª—è–π—Å—è —Å—Ä–µ–¥–∏ –∏–≥—Ä–æ–∫–æ–≤ –∏ –ø–æ–ª—É—á–∞–π –±–æ–Ω—É—Å—ã!\n\n"
        "üí∞ <b>–¢–æ–ª—å–∫–æ —Å–µ–π—á–∞—Å:</b> –ø–µ—Ä–≤—ã–π –º–µ—Å—è—Ü ‚Äî <u>—Å–æ —Å–∫–∏–¥–∫–æ–π</u> <b>169‚ÇΩ</b>, –∑–∞—Ç–µ–º <b>199‚ÇΩ/–º–µ—Å</b>\n"
        "üéÅ <b>–ü–æ–¥–∞—Ä–æ–∫:</b> –∫–µ–π—Å <i>¬´–ö–æ–º–∞–Ω–¥–Ω—ã–π –±–ª–æ–∫¬ª</i> –∑–∞ –∫–∞–∂–¥—É—é –ø–æ–∫—É–ø–∫—É –∏–ª–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ\n"
        "üé® <b>–¶–≤–µ—Ç –Ω–∏–∫–∞:</b> –≤—ã–±–µ—Ä–∏ <u>–ª—é–±–æ–π</u> —Ü–≤–µ—Ç –Ω–∏–∫–∞ –≤ Minecraft\n"
        "üòé <b>–≠–º–æ–¥–∑–∏:</b> –¥–æ—Å—Ç—É–ø –∫–æ <u>–≤—Å–µ–º –ø–ª–∞—Ç–Ω—ã–º</u> —ç–º–æ–¥–∑–∏ (–∫—Ä–æ–º–µ –ù–µ–∑–µ—Ä–∏—Ç–æ–≤—ã—Ö) <i>–Ω–∞ –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏</i>\n"
        "üåü <b>–ü–ª—é—Å:</b> –Ω–∞–≤—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ—à—å <u>—É–Ω–∏–∫–∞–ª—å–Ω—ã–π —ç–º–æ–¥–∑–∏</u>\n\n"
        "üëá –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>¬´–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É ‚≠ê¬ª</b>, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å BV# –∏ –Ω–∞—á–∞—Ç—å –≤—ã–¥–µ–ª—è—Ç—å—Å—è!"
    )

    markup = types.InlineKeyboardMarkup()
    btn_subscribe = types.InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É ‚≠ê", callback_data="activate_bv_plus")
    btn_back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="market_main")
    markup.add(btn_subscribe, btn_back)

    image_path = get_path("subscription.png")

    try:
        with open(image_path, "rb") as photo:
            media = types.InputMediaPhoto(media=photo, caption=bv_description, parse_mode="HTML")
            bot.edit_message_media(
                media=media,
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=markup
            )
    except FileNotFoundError:
        bot.send_message(
            call.message.chat.id,
            bv_description + "\n\n‚ö†Ô∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            reply_markup=markup,
            parse_mode="HTML"
        )
    except Exception as e:
        print(f"[ERROR] show_bv_plus_window: {e}")
        bot.send_message(
            call.message.chat.id,
            bv_description + "\n\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–¥–ø–∏—Å–∫–∏.",
            reply_markup=markup,
            parse_mode="HTML"
        )


@bot.callback_query_handler(func=lambda call: call.data == "activate_bv_plus")
def activate_bv_plus(call):
    user_id = str(call.from_user.id)
    data = load_data()
    if user_id not in data["users"]:
        bot.answer_callback_query(call.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    user = data["users"][user_id]
    if user.get("bv_plus"):
        bot.send_message(call.message.chat.id, "BV# —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞!", reply_markup=get_welcome_markup(str(call.from_user.id)))
        return
    price = 169
    if user.get("balance", 0) < price:
        bot.send_message(call.message.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ BV#.", reply_markup=get_welcome_markup(str(call.from_user.id)))
        return
    user["balance"] -= price
    user["bv_plus"] = True
    user["bv_plus_expiry"] = (datetime.now() + timedelta(days=30)).strftime("%d.%m.%Y %H:%M:%S")
    if "purchases" not in user:
        user["purchases"] = []
    user["purchases"].append({
        "item": "BV# –ø–æ–¥–ø–∏—Å–∫–∞ (–ø–µ—Ä–≤—ã–π –º–µ—Å—è—Ü —Å–æ —Å–∫–∏–¥–∫–æ–π)",
        "price": price,
        "date": datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    })
    save_data(data)
    bot.send_message(
        call.message.chat.id,
        f"BV# —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {user['bv_plus_expiry']}.",
        reply_markup=get_welcome_markup(str(call.from_user.id))
    )


# ------------------- –õ–æ–≥–∏–∫–∞ –≤—ã–¥–∞—á–∏ —ç–º–æ–¥–∑–∏ –∏ –∫–µ–π—Å–æ–≤ -------------------
def award_emoji(user_id, category_index):
    data = load_data()
    user = data["users"].get(user_id)

    if not user:
        return None, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
    if "emojis" not in user:
        user["emojis"] = {}
    cat_key = str(category_index)
    if cat_key not in user["emojis"]:
        user["emojis"][cat_key] = []
    owned = user["emojis"][cat_key]
    total = emoji_details[category_index]["quantity"]
    if len(owned) >= total:
        return None, f"–í—ã —É–∂–µ —Å–æ–±—Ä–∞–ª–∏ –≤—Å–µ —ç–º–æ–¥–∑–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {emoji_details[category_index]['name']}."
    available = [num for num in range(1, total + 1) if num not in owned]
    awarded = random.choice(available)
    user["emojis"][cat_key].append(awarded)
    if "purchases" not in user:
        user["purchases"] = []
    user["purchases"].append({
        "item": f"–ü–æ–ª—É—á–µ–Ω–æ –∏–∑ –∫–µ–π—Å–∞: {emoji_details[category_index]['name']} ‚Ññ{awarded}",
        "price": 0,
        "date": datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    })
    save_data(data)
    return awarded, None

# ------------------- –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç–º–æ–¥–∑–∏ -------------------
def get_path(filename):
    return os.path.join(os.path.dirname(__file__), filename)

def show_emoji_info(chat_id, message_id, index):
    emoji_item = emoji_details[index]

    text = (
        f"üåü <b>{emoji_item['name']}</b>\n"
        f"üí∞ –¶–µ–Ω–∞: <b>{emoji_item['price']}</b> –º–æ–Ω–µ—Ç\n"
        f"üì¶ –ö–æ–ª-–≤–æ —ç–º–æ–¥–∑–∏: <b>{emoji_item['quantity']}</b>\n"
        f"‚ÑπÔ∏è {emoji_item['description']}"
    )

    image_path = get_path(emoji_item["image"])

    try:
        with open(image_path, "rb") as photo:
            bot.send_photo(chat_id, photo, caption=text, parse_mode="HTML", reply_markup=emoji_info_markup(index))
    except FileNotFoundError:
        bot.send_message(chat_id, text + "\n\n‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", parse_mode="HTML", reply_markup=emoji_info_markup(index))


# ------------------- –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–µ–π—Å–µ -------------------


def get_path(filename):
    return os.path.join(os.path.dirname(__file__), filename)

def show_case_info(chat_id, message_id, index):
    case_item = case_details[index]

    text = (
        f"üì¶ <b>{case_item['name']}</b>\n"
        f"üí∞ –¶–µ–Ω–∞: <b>{case_item['price']}‚ÇΩ</b>\n"
        f"üéÅ –®–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å 2 —ç–º–æ–¥–∑–∏: <b>{case_item['chance']}%</b>\n"
        f"‚ÑπÔ∏è {case_item['description']}\n\n"
        "–ù–∞–∂–º–∏—Ç–µ <b>–ö—É–ø–∏—Ç—å</b>, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å."
    )

    image_path = get_path(case_item["image"])

    try:
        with open(image_path, 'rb') as photo:
            media = types.InputMediaPhoto(photo, caption=text, parse_mode="HTML")
            bot.edit_message_media(
                chat_id=chat_id,
                message_id=message_id,
                media=media,
                reply_markup=case_info_markup(index)
            )
    except FileNotFoundError:
        safe_edit_message_text(text + "\n\n‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", chat_id, message_id, reply_markup=case_info_markup(index))

# ------------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ -------------------
@bot.message_handler(commands=["start"])
def handle_start(message):
    user_id = str(message.from_user.id)
    data = load_data()
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:
    if user_id in data["users"]:
        user = data["users"][user_id]
        if user.get("approved", False):
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç—Ä–∏–∫–∞ –∏ —Å–ª—É—á–∞–π–Ω—ã–º —Å–æ–≤–µ—Ç–æ–º)
            send_main_menu(user_id, message.chat.id)
            return
        else:
            bot.send_message(
                message.chat.id,
                "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            )
            return
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ‚Äì —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:
    if message.from_user.username:
        for rec in data["invalid_registrations"]:
            if rec.get("telegram_username", "").lower() == message.from_user.username.lower():
                bot.send_message(
                    message.chat.id,
                    "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–π –∏ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞."
                )
                return
    bot.send_message(
        message.chat.id,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
    )
    user_states[user_id] = {"state": "awaiting_nickname", "temp_data": {}}



@bot.message_handler(func=lambda message: str(message.from_user.id) in user_states and user_states[str(message.from_user.id)].get("state") == "awaiting_nickname")
def handle_nickname(message):
    user_id = str(message.from_user.id)
    nickname = message.text.strip()
    if not valid_nickname(nickname):
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    user_states[user_id]["temp_data"]["nickname"] = nickname
    user_states[user_id]["state"] = "awaiting_age"
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ–º):")

@bot.message_handler(func=lambda message: str(message.from_user.id) in user_states and 
                     user_states[str(message.from_user.id)].get("state") == "awaiting_age")
def handle_age(message):
    user_id = str(message.from_user.id)
    try:
        age = int(message.text.strip())
        if age > 99:
            bot.send_message(message.chat.id, "–í–æ–∑—Ä–∞—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 99. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç:")
            return
        if age < 14:
            # –î–ª—è –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏—Ö: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –∏ —Ñ–ª–∞–≥, –∑–∞—Ç–µ–º –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä:
            user_states[user_id]["temp_data"]["age"] = age
            user_states[user_id]["temp_data"]["is_minor"] = True
            user_states[user_id]["state"] = "awaiting_minor_choice"
            markup = types.InlineKeyboardMarkup()
            btn_purchase = types.InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–æ—Ö–æ–¥ –∑–∞ 250‚ÇΩ", callback_data="activate_minor_access")
            btn_skip = types.InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_minor")
            markup.add(btn_purchase, btn_skip)
            bot.send_message(
                message.chat.id,
                ("–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–π.\n"
                 "–í —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Ç–∞–∫–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.\n\n"
                 "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø (–∏–≥—Ä–∞, –º–∞—Ä–∫–µ—Ç, –ø–æ–∫—É–ø–∫–∏ –∏ —Ç.–¥.), –æ—Ñ–æ—Ä–º–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ö–æ–¥ –∑–∞ 250‚ÇΩ.\n\n"
                 "–ù–∞–∂–º–∏—Ç–µ ¬´–û—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–æ—Ö–æ–¥ –∑–∞ 250‚ÇΩ¬ª –¥–ª—è –æ–ø–ª–∞—Ç—ã –∏–ª–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º."),
                reply_markup=markup
            )
            return
    except ValueError:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞.")
        return
    # –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç 14 –ª–µ—Ç:
    user_states[user_id]["temp_data"]["age"] = age
    user_states[user_id]["state"] = "awaiting_referral"
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    btn_skip = types.KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
    markup.add(btn_skip)
    bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ù–∏–∫ Minecraft –∏–ª–∏ @–Æ–∑–µ—Ä–Ω–µ–π–º) —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å  –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "activate_minor_access")
def activate_minor_access(call):
    user_id = str(call.from_user.id)
    data = load_data()
    if user_id not in data["users"]:
        data["users"][user_id] = user_states[user_id]["temp_data"]
        data["users"][user_id].setdefault("balance", 0)
        data["users"][user_id].setdefault("purchases", [])
    user = data["users"][user_id]
    price = 250
    if user.get("balance", 0) < price:
        bot.answer_callback_query(call.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø—Ä–æ—Ö–æ–¥–∞.")
        return
    user["balance"] -= price
    user["full_access"] = True  # –¢–µ–ø–µ—Ä—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø
    user.setdefault("purchases", []).append({
         "item": "–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø—Ä–æ—Ö–æ–¥–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ (–Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–π)",
         "price": price,
         "date": datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    })
    save_data(data)
    bot.answer_callback_query(call.id, "–ü—Ä–æ—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø.")
    # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ‚Äì –∑–∞–ø—Ä–æ—Å—É —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    user_states[user_id]["temp_data"]["full_access"] = True
    user_states[user_id]["state"] = "awaiting_referral"
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    btn_skip = types.KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
    markup.add(btn_skip)
    bot.send_message(
        call.message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ù–∏–∫, @–Æ–∑–µ—Ä–Ω–µ–π–º) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "skip_minor")
def skip_minor(call):
    user_id = str(call.from_user.id)
    bot.answer_callback_query(call.id, "–í—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º.")
    user_states[user_id]["state"] = "awaiting_referral"
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    btn_skip = types.KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
    markup.add(btn_skip)
    bot.send_message(
        call.message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ù–∏–∫, @–Æ–∑–µ—Ä–Ω–µ–π–º) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
        reply_markup=markup
    )

@bot.message_handler(func=lambda message: str(message.from_user.id) in user_states 
                    and user_states[str(message.from_user.id)].get("state") == "awaiting_referral")
def handle_referral(message):
    user_id = str(message.from_user.id)
    text = message.text.strip()
    temp_data = user_states[user_id]["temp_data"]

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É–∂–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —à–∞–≥–æ–≤)
    user_nickname = temp_data.get("nickname", "").lower()  # –≤–≤–µ–¥—ë–Ω–Ω—ã–π –Ω–∏–∫
    user_username = message.from_user.username.lower() if message.from_user.username else ""

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    if text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        temp_data["referral"] = None
    else:
        # –ï—Å–ª–∏ –≤ —Ä–µ—Ñ–µ—Ä–∞–ª–µ –≤–≤–µ–¥–µ–Ω–æ –¥–≤–∞ –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
        if "," in text:
            parts = text.split(",", 1)
            ref_nick = parts[0].strip()
            ref_username = parts[1].strip()
            if ref_username.startswith("@"):
                ref_username = ref_username[1:]
            ref_nick_lower = ref_nick.lower()
            ref_username_lower = ref_username.lower()
            # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ —É–∫–∞–∑—ã–≤–∞–µ—Ç —Å–µ–±—è (–ø–æ –Ω–∏–∫—É –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º—É)
            if (user_nickname and ref_nick_lower == user_nickname) or (user_username and ref_username_lower == user_username):
                bot.send_message(message.chat.id, 
                                 "–ù–µ–ª—å–∑—è —É–∫–∞–∑—ã–≤–∞—Ç—å —Å–µ–±—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
                return
            temp_data["referral"] = {"nickname": ref_nick, "telegram_username": ref_username}
        else:
            ref_input = text.lower()
            # –ï—Å–ª–∏ –≤–≤–µ–¥—ë–Ω –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å—Ä–∞–∑—É —Å –Ω–∏–∫–æ–º –∏ —é–∑–µ—Ä–Ω–µ–π–º–æ–º
            if (user_nickname and ref_input == user_nickname) or (user_username and ref_input == user_username):
                bot.send_message(message.chat.id, 
                                 "–ù–µ–ª—å–∑—è —É–∫–∞–∑—ã–≤–∞—Ç—å —Å–µ–±—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
                return
            temp_data["referral"] = text

    bot.send_message(message.chat.id, "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞.", reply_markup=types.ReplyKeyboardRemove())
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    temp_data["telegram_username"] = message.from_user.username if message.from_user.username else ""
    temp_data["registration_date"] = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    
    data = load_data()
    temp_data.setdefault("balance", 0)
    temp_data.setdefault("purchases", [])
    temp_data.setdefault("promo_codes_used", [])
    temp_data.setdefault("emojis", {})
    data["users"][user_id] = temp_data

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (referral_text)
    referral_info = temp_data.get("referral", "–ù–µ—Ç")
    if isinstance(referral_info, dict):
        referral_text = f"{referral_info['nickname']} (@{referral_info['telegram_username']})"
    else:
        referral_text = referral_info

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–π –∏ –Ω–µ –æ—Ñ–æ—Ä–º–∏–ª –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø ‚Äì —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
    if temp_data.get("is_minor") and not temp_data.get("full_access"):
        save_data(data)
        bot.send_message(
            message.chat.id,
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é –∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø—Ä–æ—Ö–æ–¥ –∑–∞ 250‚ÇΩ.",
            reply_markup=minor_get_welcome_markup(user_id)
        )
    else:
        # –î–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö –∏–ª–∏ –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏—Ö —Å –ø–æ–ª–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω—É
        data["registration_requests"].append({
            "user_id": user_id,
            "nickname": temp_data["nickname"],
            "age": temp_data["age"],
            "registration_date": temp_data["registration_date"],
            "referral": referral_text
        })
        save_data(data)
        bot.send_message(
            message.chat.id,
            "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            reply_markup=get_welcome_markup(user_id)
        )
        admin_markup = types.InlineKeyboardMarkup()
        btn_approve = types.InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å ‚úÖ", callback_data=f"approve_{user_id}")
        btn_reject = types.InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å ‚ùå", callback_data=f"reject_{user_id}")
        admin_markup.add(btn_approve, btn_reject)
        bot.send_message(
            ADMIN_ID,
            f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é üòÉ:\n–ù–∏–∫–Ω–µ–π–º: {temp_data['nickname']}\n–í–æ–∑—Ä–∞—Å—Ç: {temp_data['age']}\n–Æ–∑–µ—Ä–Ω–µ–π–º: {temp_data['telegram_username']}\n–†–µ—Ñ–µ—Ä–∞–ª: {referral_text}",
            reply_markup=admin_markup
        )
    user_states.pop(user_id, None)


@bot.callback_query_handler(func=lambda call: call.data.startswith("approve_") or call.data.startswith("reject_"))
def handle_admin_approval(call):
    admin_id = str(call.from_user.id)
    if int(admin_id) != ADMIN_ID:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –ø—Ä–∞–≤.")
        return
    action, user_id = call.data.split("_", 1)
    data = load_data()
    if user_id not in data["users"]:
        bot.answer_callback_query(call.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    if action == "approve":
        user_data = data["users"][user_id]
        user_data["balance"] = user_data.get("balance", 0)
        user_data["purchases"] = user_data.get("purchases", [])
        ref_nick = user_data.get("referral")
        if isinstance(ref_nick, dict):
            ref_nick_str = ref_nick.get("nickname", "")
        else:
            ref_nick_str = ref_nick
        if ref_nick_str:
            for uid, u in data["users"].items():
                if u.get("nickname", "").lower() == ref_nick_str.lower() and u.get("approved", False):
                    # –ù–æ–≤—ã–π –∏–≥—Ä–æ–∫ –ø–æ–ª—É—á–∞–µ—Ç 10‚ÇΩ
                    user_data["balance"] += 10
                    # –†–µ—Ñ–µ—Ä–∞–ª –ø–æ–ª—É—á–∞–µ—Ç 15‚ÇΩ
                    u["balance"] = u.get("balance", 0) + 15
                    user_data["purchases"].append({
                        "item": "–ë–æ–Ω—É—Å –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é (–Ω–æ–≤—ã–π –∏–≥—Ä–æ–∫)",
                        "price": 10,
                        "date": datetime.now().strftime("%d.%m.%Y %H:%M:%S")
                    })
                    u.setdefault("purchases", []).append({
                        "item": f"–ë–æ–Ω—É—Å –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: {user_data['nickname']}",
                        "price": 15,
                        "date": datetime.now().strftime("%d.%m.%Y %H:%M:%S")
                    })
                    bot.send_message(uid, f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø—Ä–∏–≤–µ–ª–∏ –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ {user_data['nickname']}! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 15‚ÇΩ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞.")
                    break
        user_data["approved"] = True
        data["registration_requests"] = [req for req in data["registration_requests"] if req["user_id"] != user_id]
        save_data(data)
        welcome_text = (
            "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Bedrock Valley! üòä\n\n"
            "üìñ –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É Bedrock Valley\n\n"
            "üîπ –ö–∞–∫ –∑–∞–π—Ç–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:\n1Ô∏è‚É£ –ü–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –≤ –Ω–∞—à—É –±–µ—Å–µ–¥—É: https://t.me/+5eOzp1m8MbE5MWEy\n"
            "2Ô∏è‚É£ –ü–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–∏–∫ –≤ –ø–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª #–ù–∞—á–∞–ª–æ\n"
            "3Ô∏è‚É£ –ß–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –≤–∞—Å –¥–æ–±–∞–≤—è—Ç –≤ –≤–∞–π—Ç–ª–∏—Å—Ç, –∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø–æ IP –∏ –ø–æ—Ä—Ç—É –∏–∑ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n"
            "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\nüîó –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å: @bedrockvalley"
        )
        bot.send_message(int(user_id), welcome_text, reply_markup=get_welcome_markup(str(call.from_user.id)))
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
        bot.answer_callback_query(call.id, "–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞.")
    elif action == "reject":
        data["users"].pop(user_id, None)
        data["registration_requests"] = [req for req in data["registration_requests"] if req["user_id"] != user_id]
        save_data(data)
        bot.send_message(int(user_id), "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
        bot.answer_callback_query(call.id, "–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")

@bot.message_handler(commands=["help"])
def handle_help(message):
    user_id = str(message.from_user.id)
    data = load_data()
    if user_id in data["users"] and data["users"][user_id].get("approved", False):
        help_text = (
            "üìñ –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É Bedrock Valley\n\n"
            "üîπ –ö–∞–∫ –∑–∞–π—Ç–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:\n1Ô∏è‚É£ –ü–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –≤ –Ω–∞—à—É –±–µ—Å–µ–¥—É: https://t.me/+5eOzp1m8MbE5MWEy\n"
            "2Ô∏è‚É£ –ü–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–∏–∫ –≤ –ø–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª #–ù–∞—á–∞–ª–æ\n"
            "3Ô∏è‚É£ –ß–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –≤–∞—Å –¥–æ–±–∞–≤—è—Ç –≤ –≤–∞–π—Ç–ª–∏—Å—Ç, –∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø–æ IP –∏ –ø–æ—Ä—Ç—É –∏–∑ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n"
            "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        bot.send_message(message.chat.id, help_text)
    else:
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start.")

# üì¶ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
def send_or_edit_message(bot, call, text, markup):
    try:
        if call.message.photo:
            bot.edit_message_caption(call.message.chat.id, call.message.message_id,
                                     caption=text, reply_markup=markup)
        else:
            bot.edit_message_text(text, call.message.chat.id, call.message.message_id,
                                  reply_markup=markup)
    except Exception:
        bot.send_message(call.message.chat.id, text, reply_markup=markup)

# üìÇ –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
MARKET_WELCOME_TEXT = (
    "üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–∞—Ä–∫–µ—Ç BedrockValley! üéÆ\n"
    "–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥—ë—à—å –≤—Å—ë –¥–ª—è –≤—ã–∂–∏–≤–∞–Ω–∏—è, —Å—Ç–∏–ª—è –∏ –∫—Ä—É—Ç—ã—Ö —Ñ–∏—à–µ–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!"
)

CUSTOMIZATION_TEXT = "–ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è (–≠–º–æ–¥–∑–∏ –∏ –ö–µ–π—Å—ã):"
MARKET_SERVICES_TEXT = "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏:"

# üß≠ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@bot.callback_query_handler(func=lambda call: call.data.startswith("menu_"))
def handle_main_menu(call):
    user_id = str(call.from_user.id)
    data = load_data()

    if user_id not in data["users"] or (not data["users"][user_id].get("approved", False) and not data["users"][user_id].get("is_minor", False)):
        bot.answer_callback_query(call.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    if call.data == "menu_profile":
        user = data["users"][user_id]
        reg_date = user.get("registration_date", "").split()[0] if user.get("registration_date") else ""
        bv_status = "–∞–∫—Ç–∏–≤–Ω–∞" if user.get("bv_plus") else "–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞"
        role = user.get("role", "–∏–≥—Ä–æ–∫")
        max_streak = user.get("max_login_streak", user.get("login_streak", 0))
        ender_eyes = user.get("ender_eyes", 0)

        profile_text = (
    f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n"
    f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    f"‚≠ê <b>BV#</b>: {bv_status}\n"
    f"üè∑Ô∏è <b>–ù–∏–∫</b>: {user.get('nickname', '')}\n"
    f"üôç <b>–†–æ–ª—å</b>: {role}\n"
    f"üè∞ <b>–¢—Ä–∞–π–±</b>: {'–ù–µ —Å–æ—Å—Ç–æ–∏—Ç' if 'tribe' not in user else user['tribe']}\n"
    f"üî• <b>–ú–∞–∫—Å. —Å—Ç—Ä–∏–∫</b>: {max_streak} –¥–Ω–µ–π\n"
    f"üßø –û–∫–æ —ç–Ω–¥–µ—Ä–∞: {ender_eyes}\n"
    f"üìÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b>: {reg_date}\n\n"
    f"üí∞ <b>–ë–∞–ª–∞–Ω—Å</b>: {user.get('balance', 0)}‚ÇΩ\n"
    f"üòä <b>–≠–º–æ–¥–∑–∏</b>:\n"
     )


        emojis = user.get("emojis", {})
        if not emojis:
            profile_text += "–ü–æ–∫–∞ —Ç—É—Ç –ø—É—Å—Ç–æ"
        else:
            for cat_key, nums in emojis.items():
                cat_index = int(cat_key)
                cat_name = emoji_details[cat_index]["name"]
                nums_str = ", ".join(str(n) for n in nums)
                profile_text += f"{cat_name}: {nums_str}\n"

        bot.send_message(call.message.chat.id, profile_text, parse_mode="HTML", reply_markup=profile_menu_markup())

@bot.callback_query_handler(func=lambda call: call.data == "back_main")
def handle_back(call):
    user_id = str(call.from_user.id)
    send_main_menu(user_id, call.message.chat.id)

# üõçÔ∏è –ú–∞—Ä–∫–µ—Ç –∏ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è
@bot.callback_query_handler(func=lambda call: call.data in [
    "market_main", "customization", "customization_back", "custom_emoji", "custom_case", "market_services"
])
def handle_market_navigation(call):
    if call.data == "market_main":
        send_or_edit_message(bot, call, MARKET_WELCOME_TEXT, market_main_markup())

    elif call.data in ["customization", "customization_back"]:
        send_or_edit_message(bot, call, CUSTOMIZATION_TEXT, customization_markup())

    elif call.data == "custom_emoji":
        show_emoji_info(call.message.chat.id, call.message.message_id, 0)

    elif call.data == "custom_case":
        show_case_info(call.message.chat.id, call.message.message_id, 0)

    elif call.data == "market_services":
        send_or_edit_message(bot, call, MARKET_SERVICES_TEXT, top_services_markup())


@bot.callback_query_handler(func=lambda call: call.data == "top_services")
def handle_top_services(call):
    try:
        if call.message.photo:
            bot.edit_message_caption(call.message.chat.id, call.message.message_id,
                                     caption="–î–æ–ø —É—Å–ª—É–≥–∏:", reply_markup=top_services_markup())
        else:
            bot.edit_message_text("–î–æ–ø —É—Å–ª—É–≥–∏:", call.message.chat.id, call.message.message_id,
                                  reply_markup=top_services_markup())
    except Exception:
        bot.send_message(call.message.chat.id, "–î–æ–ø —É—Å–ª—É–≥–∏:", reply_markup=top_services_markup())

@bot.callback_query_handler(func=lambda call: call.data.startswith("emoji_prev_") or call.data.startswith("emoji_next_"))
def handle_emoji_navigation(call):
    parts = call.data.split("_")
    direction = parts[1]
    current_index = int(parts[2])
    if direction == "prev" and current_index > 0:
        new_index = current_index - 1
    elif direction == "next" and current_index < len(emoji_details) - 1:
        new_index = current_index + 1
    else:
        new_index = current_index
    show_emoji_info(call.message.chat.id, call.message.message_id, new_index)

@bot.callback_query_handler(func=lambda call: call.data.startswith("case_prev_") or call.data.startswith("case_next_"))
def handle_case_navigation(call):
    parts = call.data.split("_")
    direction = parts[1]
    current_index = int(parts[2])
    if direction == "prev" and current_index > 0:
        new_index = current_index - 1
    elif direction == "next" and current_index < len(case_details) - 1:
        new_index = current_index + 1
    else:
        new_index = current_index
    show_case_info(call.message.chat.id, call.message.message_id, new_index)

@bot.callback_query_handler(func=lambda call: call.data.startswith("buy_emoji_"))
def handle_buy_emoji(call):
    user_id = str(call.from_user.id)
    index = int(call.data.split("_")[-1])
    user_states[user_id] = user_states.get(user_id, {})
    user_states[user_id]["buy_emoji_category"] = index
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —ç–º–æ–¥–∑–∏, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏:")

@bot.message_handler(func=lambda message: "buy_emoji_category" in user_states.get(str(message.from_user.id), {}))
def process_emoji_choice(message):
    user_id = str(message.from_user.id)
    try:
        choice = int(message.text.strip())
    except ValueError:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä (—á–∏—Å–ª–æ).")
        return
    category_index = user_states[user_id].pop("buy_emoji_category")
    total = emoji_details[category_index]["quantity"]
    if not (1 <= choice <= total):
        bot.send_message(message.chat.id, f"–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ {total}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        user_states[user_id]["buy_emoji_category"] = category_index
        return
    data = load_data()
    user = data["users"].get(user_id)
    if not user:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    if "emojis" not in user:
        user["emojis"] = {}
    cat_key = str(category_index)
    if cat_key not in user["emojis"]:
        user["emojis"][cat_key] = []
    if choice in user["emojis"][cat_key]:
        bot.send_message(message.chat.id, f"–≠–º–æ–¥–∑–∏ ‚Ññ{choice} —É–∂–µ –ø—Ä–∏–æ–±—Ä–µ—Ç—ë–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {emoji_details[category_index]['name']}.")
        return
    cost = emoji_details[category_index]["price"]
    subscription_active = True if user.get("bv_plus") else False
    if subscription_active and category_index != 4:
        cost = 0
    if user.get("balance", 0) < cost:
        bot.send_message(message.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
        return
    user["balance"] -= cost
    user["emojis"][cat_key].append(choice)
    if "purchases" not in user:
        user["purchases"] = []
    user["purchases"].append({
        "item": f"–ö—É–ø–ª–µ–Ω–æ {emoji_details[category_index]['name']} ‚Ññ{choice}",
        "price": cost,
        "date": datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    })
    save_data(data)
    bot.send_message(message.chat.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ {emoji_details[category_index]['name']} ‚Ññ{choice} –∑–∞ {cost}‚ÇΩ.")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    nickname = user.get("nickname", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
    admin_msg = f"–ü–æ–∫—É–ø–∫–∞ —ç–º–æ–¥–∑–∏: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {nickname} –ø—Ä–∏–æ–±—Ä–µ–ª {emoji_details[category_index]['name']} ‚Ññ{choice} –∑–∞ {cost}‚ÇΩ."
    bot.send_message(ADMIN_ID, admin_msg)
    
@bot.callback_query_handler(func=lambda call: call.data.startswith("buy_case_"))
def handle_buy_case(call):
    user_id = str(call.from_user.id)
    data = load_data()
    if user_id not in data["users"]:
        bot.answer_callback_query(call.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return
    index = int(call.data.split("_")[-1])
    case_item = case_details[index]
    if data["users"][user_id].get("balance", 0) < case_item["price"]:
        bot.answer_callback_query(call.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
        return
    data["users"][user_id]["balance"] -= case_item["price"]
    if "purchases" not in data["users"][user_id]:
        data["users"][user_id]["purchases"] = []
    data["users"][user_id]["purchases"].append({
        "item": f"–ö—É–ø–ª–µ–Ω {case_item['name']}",
        "price": case_item["price"],
        "date": datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    })
    save_data(data)
    bot.answer_callback_query(call.id, "–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞.")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–µ–π—Å–∞
    if index == 0:
        possible = [0, 1]
        bonus_chance = case_item["chance"]
    elif index == 1:
        possible = [1, 2]
        bonus_chance = case_item["chance"]
    elif index == 2:
        possible = [3, 4]
        bonus_chance = case_item["chance"]
    else:
        possible = []
        bonus_chance = 0
    cat_guaranteed = random.choice(possible)
    awarded1, err1 = award_emoji(user_id, cat_guaranteed)
    if err1:
        result_guaranteed = f"–û—à–∏–±–∫–∞: {err1}"
    else:
        result_guaranteed = f"{emoji_details[cat_guaranteed]['name']} ‚Ññ{awarded1}"
    message_text = f"–ö–µ–π—Å –∫—É–ø–ª–µ–Ω. –ü–æ–ª—É—á–µ–Ω–æ: {result_guaranteed}."
    if random.randint(1, 100) <= bonus_chance:
        if random.choice([True, False]):
            cat_bonus = random.choice(possible)
            awarded_bonus, err_bonus = award_emoji(user_id, cat_bonus)
            if awarded_bonus:
                message_text += f" –ë–æ–Ω—É—Å: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ 2 —ç–º–æ–¥–∑–∏ –∏–∑ {emoji_details[cat_bonus]['name']}: ‚Ññ{awarded_bonus}."
        else:
            bonus_msgs = []
            for cat in possible:
                awarded_bonus, err_bonus = award_emoji(user_id, cat)
                if awarded_bonus:
                    bonus_msgs.append(f"{emoji_details[cat]['name']} ‚Ññ{awarded_bonus}")
            if bonus_msgs:
                message_text += " –ë–æ–Ω—É—Å: –ø–æ–ª—É—á–µ–Ω—ã —ç–º–æ–¥–∑–∏: " + ", ".join(bonus_msgs) + "."
    bot.send_message(call.message.chat.id, message_text)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    user = data["users"][user_id]
    nickname = user.get("nickname", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
    admin_msg = (f"–ü–æ–∫—É–ø–∫–∞ –∫–µ–π—Å–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {nickname} –∫—É–ø–∏–ª {case_item['name']} –∑–∞ {case_item['price']}‚ÇΩ. "
                 f"–í—ã–ø–∞–ª–æ: {result_guaranteed}.")
    bot.send_message(ADMIN_ID, admin_msg)



# ------------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ (—É—Å–ª—É–≥–∏) -------------------
@bot.callback_query_handler(func=lambda call: call.data.startswith("service_"))
def handle_services(call):
    user_id = str(call.from_user.id)
    data = load_data()

    if call.data == "service_unban":
        success, msg = process_purchase(user_id, 500, "–†–∞–∑–±–∞–Ω")
        bot.answer_callback_query(call.id, msg)
        if success:
            bot.send_message(call.message.chat.id, "–í—ã –ø–æ–ª—É—á–∏–ª–∏ —É—Å–ª—É–≥—É —Ä–∞–∑–±–∞–Ω–∞.")
            user = data["users"].get(user_id, {})
            nickname = user.get("nickname", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
            bot.send_message(ADMIN_ID, f"‚úÖ –ò–≥—Ä–æ–∫ {nickname} –∫—É–ø–∏–ª —Ä–∞–∑–±–∞–Ω.")

    elif call.data == "service_bv":
        bot.answer_callback_query(call.id, "–ü–µ—Ä–µ—Ö–æ–¥ –∫ BV# –ø–æ–¥–ø–∏—Å–∫–µ.")
        try:
            bot.edit_message_text(
                "–ü–µ—Ä–µ—Ö–æ–¥ –∫ BV# –ø–æ–¥–ø–∏—Å–∫–µ:",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=get_welcome_markup(str(call.from_user.id))
            )
        except Exception as e:
            print(f'[ERROR] –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
#-------------–û–±—â–µ–Ω–∏–µ---------------

def process_player_search(message):
    query = message.text.strip().lower()
    data = load_data()
    found = False

    # –ó–¥–µ—Å—å "users" –∏ "banned_users" ‚Äì —Å–ª–æ–≤–∞—Ä–∏, –∞ "invalid_registrations" ‚Äì —Å–ø–∏—Å–æ–∫.
    all_categories = {
        "users": data.get("users", {}),
        "banned_users": data.get("banned_users", {}),
        "invalid_registrations": data.get("invalid_registrations", [])
    }

    for category, group in all_categories.items():
        # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ ‚Äì —Å–ª–æ–≤–∞—Ä—å, –∏—Ç–µ—Ä–∏—Ä—É–µ–º –ø–æ –µ—ë —ç–ª–µ–º–µ–Ω—Ç–∞–º
        if isinstance(group, dict):
            iterator = group.items()
        # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ ‚Äì —Å–ø–∏—Å–æ–∫, –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –µ—ë –≤ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (uid –±—É–¥–µ—Ç None)
        elif isinstance(group, list):
            iterator = [(None, user) for user in group]
        else:
            continue

        for uid, user in iterator:
            nickname = user.get("nickname", "").lower()
            username = user.get("telegram_username", "").lower()
            bvtag = str(user.get("bvtag", "")).lower()

            if (query in nickname or query in username or query in bvtag or (uid is not None and query == str(uid))):
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                if category == "users":
                    user["status"] = "user"
                elif category == "banned_users":
                    user["status"] = "banned"
                else:
                    user["status"] = "minor"
                # –ï—Å–ª–∏ uid –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º placeholder
                user["user_id"] = uid if uid is not None else "N/A"
                text = render_search_profile(user)
                bot.send_message(message.chat.id, text, parse_mode="HTML")
                found = True
                break
        if found:
            break

    if not found:
        bot.send_message(message.chat.id, "‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")


def render_search_profile(user):
    status = user.get("status", "user")
    role = user.get("role", "‚Äî")
    nickname = user.get("nickname", "‚Äî")
    bvtag = user.get("bvtag", "‚Äî")
    reg_date = user.get("registration_date", "‚Äî")
    max_streak = user.get("max_login_streak", 0)
    user_id = user.get("user_id", "‚Äî")
    tribe = user.get("tribe", "‚Äî")

    if status == "user":
        return (
            f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å: {nickname}</b>\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"‚≠ê <b>BV#:</b> {bvtag}\n"
            f"üè∑Ô∏è <b>–ù–∏–∫:</b> {nickname}\n"
            f"üé≠ <b>–†–æ–ª—å:</b> {role}\n"
            f"üè∞ <b>–¢—Ä–∞–π–±:</b> {tribe}\n"
            f"üî• <b>–ú–∞–∫—Å. —Å—Ç—Ä–∏–∫:</b> {max_streak} –¥–Ω–µ–π\n"
            f"üìÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> {reg_date}"
        )
    elif status == "minor":
        return (
            f"üßí <b>–ù–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–π:</b> {nickname}\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"‚≠ê <b>BV#:</b> {bvtag}\n"
            f"üìõ <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</b> –¥–æ 14 –ª–µ—Ç\n"
            f"üìÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> {reg_date}"
        )
    elif status == "banned":
        reason = user.get("ban_reason", "–Ω–µ —É–∫–∞–∑–∞–Ω–∞")
        return (
            f"üö´ <b>–ó–∞–±–∞–Ω–µ–Ω:</b> {nickname}\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"‚≠ê <b>BV#:</b> {bvtag}\n"
            f"üìõ <b>–ü—Ä–∏—á–∏–Ω–∞ –±–∞–Ω–∞:</b> {reason}\n"
            f"üìÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> {reg_date}"
        )
    else:
        return f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∏–≥—Ä–æ–∫–∞ <code>{user_id}</code>"


@bot.callback_query_handler(func=lambda call: call.data == "search_players")
def search_players_prompt_new(call):
    msg = bot.send_message(call.message.chat.id, "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫, —é–∑–µ—Ä–Ω–µ–π–º –∏–ª–∏ ID:")
    bot.register_next_step_handler(msg, process_player_search)
## ---------------- Tribe System (Final Version) ----------------

def get_user_tribe(user_id, data):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (leader_id, tribe) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
    –µ—Å–ª–∏ –æ–Ω —Å–æ—Å—Ç–æ–∏—Ç –≤ —Ç—Ä–∞–π–±–µ, –∏–Ω–∞—á–µ (None, None).
    """
    user = data["users"].get(user_id)
    if not user or not user.get("tribe"):
        return None, None
    tribe_name = user["tribe"]
    for leader_id, tribe in data.get("tribes", {}).items():
        if tribe["name"] == tribe_name:
            return leader_id, tribe
    return None, None

def handle_tribe_join_menu(call):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–µ–Ω—é –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —Ç—Ä–∞–π–±.
    –í –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ –º—ã –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ join_tribe_menu.
    """
    join_tribe_menu(call)  # –≤—ã–∑–æ–≤–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —Ç—Ä–∞–π–±

def tribe_menu_markup(user):
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Ç—Ä–∞–π–±–æ–≤.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ —Ç—Ä–∞–π–±–µ, –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –¥–≤–µ –∫–Ω–æ–ø–∫–∏:
    ¬´–í—Å—Ç—É–ø–∏—Ç—å –≤ —Ç—Ä–∞–π–± üìù¬ª –∏ ¬´–°–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–π–± üè∞¬ª.
    –ï—Å–ª–∏ —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç ‚Äì ‚Äì ¬´–ú–æ–π —Ç—Ä–∞–π–± üè∞¬ª –∏ ¬´–°–ø–∏—Å–æ–∫ —Ç—Ä–∞–π–±–æ–≤ üèØ¬ª.
    """
    markup = types.InlineKeyboardMarkup()
    if not user.get("tribe"):
        btn_join = types.InlineKeyboardButton("–í—Å—Ç—É–ø–∏—Ç—å –≤ —Ç—Ä–∞–π–± üìù", callback_data="tribe_join_menu")
        btn_create = types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–π–± üè∞", callback_data="create_tribe")
        markup.row(btn_join, btn_create)
    else:
        btn_view = types.InlineKeyboardButton("–ú–æ–π —Ç—Ä–∞–π–± üè∞", callback_data="view_tribe")
        btn_list = types.InlineKeyboardButton("–°–ø–∏—Å–æ–∫ —Ç—Ä–∞–π–±–æ–≤ üèØ", callback_data="list_tribes")
        markup.row(btn_view, btn_list)
    btn_back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="get_welcome_markup")
    markup.row(btn_back)
    return markup

@bot.message_handler(commands=["tribe"])
def handle_tribe_command(message):
    user_id = str(message.from_user.id)
    update_streak(user_id)
    data = load_data()
    user = data["users"].get(user_id, {})
    kb = tribe_menu_markup(user)
    bot.send_message(message.chat.id, "üèò –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb, parse_mode="HTML")

# -------------------- –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω —Ç—Ä–∞–π–±–æ–≤ --------------------
@bot.callback_query_handler(func=lambda call: call.data == "tribe_menu")
def tribe_main_menu(call):
    user_id = str(call.from_user.id)
    data = load_data()
    user = data["users"].get(user_id, {})
    
    if user.get("tribe"):
        tribe_btn = types.InlineKeyboardButton("üõ° –ú–æ–π —Ç—Ä–∞–π–±", callback_data="view_tribe")
    else:
        tribe_btn = types.InlineKeyboardButton("üõ° –í—Å—Ç—É–ø–∏—Ç—å –≤ —Ç—Ä–∞–π–±", callback_data="tribe_join_menu")
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row(tribe_btn)
    keyboard.row(
        types.InlineKeyboardButton("üìú –í—Å–µ —Ç—Ä–∞–π–±—ã", callback_data="list_tribes"),
        types.InlineKeyboardButton("üßë‚Äçü§ù‚Äçüßë –ò–≥—Ä–æ–∫–∏", callback_data="search_players")
    )
    keyboard.row(
        types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="get_welcome_markup")
    )
    text = "üèò <b>–ú–µ–Ω—é —Ç—Ä–∞–π–±–æ–≤</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    try:
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode="HTML")
    except Exception as e:
        print(f"[ERROR] Editing tribe menu: {e}")
        bot.send_message(call.message.chat.id, text, reply_markup=keyboard, parse_mode="HTML")


# -------------------- –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —Ç—Ä–∞–π–± --------------------
@bot.callback_query_handler(func=lambda call: call.data == "tribe_join_menu")
def join_tribe_menu(call):
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üì© –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ", callback_data="submit_tribe_request"))
    kb.add(types.InlineKeyboardButton("üè∞ –°–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–π–±", callback_data="create_tribe"))
    kb.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="tribe_menu"))
    bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", call.message.chat.id, call.message.message_id, reply_markup=kb, parse_mode="HTML")

@bot.callback_query_handler(func=lambda call: call.data == "submit_tribe_request")
def tribe_join_request(call):
    msg = bot.send_message(call.message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ <b>[ID]</b> —Ç—Ä–∞–π–±–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –≤—Å—Ç—É–ø–∏—Ç—å (—É–∫–∞–∑–∞–Ω —Ä—è–¥–æ–º —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º):",
        parse_mode="HTML")
    bot.register_next_step_handler(msg, process_join_request)

def process_join_request(message):
    user_id = str(message.from_user.id)
    req_id = message.text.strip().upper()
    data = load_data()
    target_tribe = None
    target_leader = None
    for leader_id, tribe in data.get("tribes", {}).items():
        if tribe["id"] == req_id:
            target_tribe = tribe
            target_leader = leader_id
            break
    if not target_tribe:
        bot.send_message(message.chat.id, "‚ùå –¢—Ä–∞–π–± —Å —Ç–∞–∫–∏–º [ID] –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    if data["users"].get(user_id, {}).get("tribe"):
        bot.send_message(message.chat.id, "‚ùå –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Ç—Ä–∞–π–±–µ.")
        return
    for tribe in data.get("tribes", {}).values():
        for req in tribe.get("join_requests", []):
            if req["user_id"] == user_id:
                bot.send_message(message.chat.id, "‚ùó –í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É.")
                return
    if len(target_tribe.get("members", [])) >= target_tribe.get("max_members", 10):
        bot.send_message(message.chat.id, "‚ùå –í —ç—Ç–æ–º —Ç—Ä–∞–π–±–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        return
    user_record = data["users"].get(user_id, {})
    join_req = {
        "user_id": user_id,
        "nickname": user_record.get("nickname", ""),
        "telegram_username": user_record.get("telegram_username", ""),
        "registration_date": user_record.get("registration_date", "")
    }
    target_tribe.setdefault("join_requests", []).append(join_req)
    save_data(data)
    req_text = (
        f"<b>üì© –ó–∞—è–≤–∫–∞ –≤ —Ç—Ä–∞–π–±</b>\n"
        f"üë§ –ù–∏–∫: {join_req['nickname']}\n"
        f"üîó Telegram: @{join_req['telegram_username']}\n"
        f"üìÖ –î–∞—Ç–∞: {join_req['registration_date']}"
    )
    kb = types.InlineKeyboardMarkup()
    kb.row(
        types.InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"join_accept_{user_id}_{target_leader}"),
        types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"join_reject_{user_id}_{target_leader}")
    )
    bot.send_message(target_leader, req_text, reply_markup=kb, parse_mode="HTML")
    bot.send_message(message.chat.id, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ì–ª–∞–≤–µ —Ç—Ä–∞–π–±–∞.")

# -------------------- –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–π–±–∞ --------------------
@bot.callback_query_handler(func=lambda call: call.data == "create_tribe")
def create_tribe_start(call):
    user_id = str(call.from_user.id)
    data = load_data()
    if data["users"].get(user_id, {}).get("tribe"):
        bot.answer_callback_query(call.id, "–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Ç—Ä–∞–π–±–µ.")
        return
    user_states[user_id] = {"state": "awaiting_tribe_name", "temp_data": {}}
    bot.send_message(call.message.chat.id, "üõ† <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–π–±–∞</b>\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–∞–π–±–∞ (–¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤):", parse_mode="HTML")

@bot.message_handler(func=lambda m: str(m.from_user.id) in user_states and user_states[str(m.from_user.id)].get("state") == "awaiting_tribe_name")
def tribe_name_handler(m):
    user_id = str(m.from_user.id)
    tribe_name = m.text.strip()
    if len(tribe_name) > 20:
        bot.send_message(m.chat.id, "‚ùó –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –í–≤–µ–¥–∏—Ç–µ –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤:")
        return
    user_states[user_id]["temp_data"]["tribe_name"] = tribe_name
    user_states[user_id]["state"] = "awaiting_tribe_id"
    bot.send_message(m.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç—Ä–∞–π–±–∞ (—Ä–æ–≤–Ω–æ 3 —Å–∏–º–≤–æ–ª–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, BVC):")

@bot.message_handler(func=lambda m: str(m.from_user.id) in user_states and user_states[str(m.from_user.id)].get("state") == "awaiting_tribe_id")
def tribe_id_handler(m):
    user_id = str(m.from_user.id)
    tribe_id = m.text.strip()
    if len(tribe_id) != 3:
        bot.send_message(m.chat.id, "‚ùó –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–æ–≤–Ω–æ 3 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    user_states[user_id]["temp_data"]["tribe_id"] = tribe_id.upper()
    user_states[user_id]["state"] = "awaiting_tribe_desc"
    bot.send_message(m.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–π–±–∞ (–¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤):")

@bot.message_handler(func=lambda m: str(m.from_user.id) in user_states and user_states[str(m.from_user.id)].get("state") == "awaiting_tribe_desc")
def tribe_desc_handler(m):
    user_id = str(m.from_user.id)
    desc = m.text.strip()
    if len(desc) > 50:
        bot.send_message(m.chat.id, "‚ùó –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –í–≤–µ–¥–∏—Ç–µ –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤:")
        return
    user_states[user_id]["temp_data"]["tribe_desc"] = desc
    user_states[user_id]["state"] = "awaiting_tribe_chat"
    bot.send_message(m.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –±–µ—Å–µ–¥—É —Ç—Ä–∞–π–±–∞:")

@bot.message_handler(func=lambda m: str(m.from_user.id) in user_states and user_states[str(m.from_user.id)].get("state") == "awaiting_tribe_chat")
def tribe_chat_handler(m):
    user_id = str(m.from_user.id)
    chat_link = m.text.strip()
    temp = user_states[user_id]["temp_data"]
    temp["tribe_chat"] = chat_link
    confirmation = (
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–π–±–∞:\n"
        f"üõ° –ù–∞–∑–≤–∞–Ω–∏–µ: {temp['tribe_name']}\n"
        f"üî¢ ID: {temp['tribe_id']}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {temp['tribe_desc']}\n"
        f"üí¨ –°—Å—ã–ª–∫–∞: {temp['tribe_chat']}\n\n"
        "–ù–∞–∂–º–∏—Ç–µ ‚úÖ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ ‚ùå –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("‚úÖ –°–æ–∑–¥–∞—Ç—å", callback_data="confirm_create_tribe"))
    kb.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_create_tribe"))
    bot.send_message(m.chat.id, confirmation, reply_markup=kb, parse_mode="HTML")

@bot.callback_query_handler(func=lambda call: call.data in ["confirm_create_tribe", "cancel_create_tribe"])
def tribe_create_confirm(call):
    user_id = str(call.from_user.id)
    if call.data == "cancel_create_tribe":
        user_states.pop(user_id, None)
        bot.edit_message_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–π–±–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", call.message.chat.id, call.message.message_id)
        return
    data = load_data()
    user = data["users"].get(user_id, {})
    cost = 0  # –°–æ–∑–¥–∞–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ
    if user.get("balance", 0) < cost:
        bot.answer_callback_query(call.id, "‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–π–±–∞.")
        return
    user["balance"] -= cost
    temp = user_states[user_id]["temp_data"]
    tribe = {
        "name": temp["tribe_name"],
        "id": temp["tribe_id"],
        "desc": temp["tribe_desc"],
        "date_created": datetime.now().strftime("%d.%m.%Y"),
        "chat_link": temp["tribe_chat"],
        "leader": user_id,
        "members": [{
            "user_id": user_id,
            "nickname": user.get("nickname", ""),
            "telegram_username": user.get("telegram_username", ""),
            "role": "–ì–ª–∞–≤–∞"
        }],
        "max_members": 10,
        "join_requests": []
    }
    data.setdefault("tribes", {})
    data["tribes"][user_id] = tribe
    user["tribe"] = tribe["name"]
    save_data(data)
    user_states.pop(user_id, None)
    bot.edit_message_text(f"üéâ –¢—Ä–∞–π–± <b>{tribe['name']}</b> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", call.message.chat.id, call.message.message_id, parse_mode="HTML")

# -------------------- –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–π–±–æ–≤ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π --------------------
@bot.callback_query_handler(func=lambda call: call.data == "list_tribes")
def tribe_list(call):
    call.data = "list_tribes_page_0"
    handle_tribes_page_safe(call)

@bot.callback_query_handler(func=lambda call: call.data.startswith("list_tribes_page_"))
def handle_tribes_page(call):
    handle_tribes_page_safe(call)

def handle_tribes_page_safe(call):
    try:
        page = int(call.data.split("_")[-1])
    except Exception:
        page = 0
    data = load_data()
    tribes = list(data.get("tribes", {}).values())
    per_page = 5
    total_pages = (len(tribes) + per_page - 1) // per_page
    if not tribes:
        bot.edit_message_text("üòî –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–π–±–æ–≤.", call.message.chat.id, call.message.message_id)
        return
    if page < 0 or page >= total_pages:
        bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç —Ç–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")
        return
    start = page * per_page
    end = start + per_page
    current_tribes = tribes[start:end]
    text = "üìú <b>–°–ø–∏—Å–æ–∫ —Ç—Ä–∞–π–±–æ–≤:</b>\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    text += "–£–∫–∞–∂–∏—Ç–µ <b>[ID]</b> –Ω—É–∂–Ω–æ–≥–æ —Ç—Ä–∞–π–±–∞ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏.\n\n"
    for i, tribe in enumerate(current_tribes, start=start+1):
        text += (f"{i}. <b>{tribe['name']}</b> [{tribe['id']}]\n"
                 f"   üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(tribe['members'])}/{tribe.get('max_members', 10)}\n"
                 f"   üìÖ –°–æ–∑–¥–∞–Ω: {tribe['date_created']}\n"
                 f"   üìù {tribe['desc'][:100]}...\n\n")
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üìë –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="submit_tribe_request"))
    nav = []
    if page > 0:
        nav.append(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"list_tribes_page_{page-1}"))
    if page < total_pages - 1:
        nav.append(types.InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"list_tribes_page_{page+1}"))
    if nav:
        kb.row(*nav)
    kb.add(types.InlineKeyboardButton("üîô –í –º–µ–Ω—é —Ç—Ä–∞–π–±–æ–≤", callback_data="community_tribes"))
    try:
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=kb, parse_mode="HTML")
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# -------------------- –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ --------------------
@bot.callback_query_handler(func=lambda call: call.data == "submit_tribe_request")
def tribe_join_request(call):
    msg = bot.send_message(call.message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ <b>[ID]</b> —Ç—Ä–∞–π–±–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –≤—Å—Ç—É–ø–∏—Ç—å (—É–∫–∞–∑–∞–Ω —Ä—è–¥–æ–º —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º):",
        parse_mode="HTML")
    bot.register_next_step_handler(msg, process_join_request)

def process_join_request(message):
    user_id = str(message.from_user.id)
    req_id = message.text.strip().upper()
    data = load_data()
    target_tribe = None
    target_leader = None
    for leader_id, tribe in data.get("tribes", {}).items():
        if tribe["id"] == req_id:
            target_tribe = tribe
            target_leader = leader_id
            break
    if not target_tribe:
        bot.send_message(message.chat.id, "‚ùå –¢—Ä–∞–π–± —Å —Ç–∞–∫–∏–º [ID] –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    if data["users"].get(user_id, {}).get("tribe"):
        bot.send_message(message.chat.id, "‚ùå –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Ç—Ä–∞–π–±–µ.")
        return
    for tribe in data.get("tribes", {}).values():
        for req in tribe.get("join_requests", []):
            if req["user_id"] == user_id:
                bot.send_message(message.chat.id, "‚ùó –í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É.")
                return
    if len(target_tribe.get("members", [])) >= target_tribe.get("max_members", 10):
        bot.send_message(message.chat.id, "‚ùå –í —ç—Ç–æ–º —Ç—Ä–∞–π–±–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        return
    user_record = data["users"].get(user_id, {})
    join_req = {
        "user_id": user_id,
        "nickname": user_record.get("nickname", ""),
        "telegram_username": user_record.get("telegram_username", ""),
        "registration_date": user_record.get("registration_date", "")
    }
    target_tribe.setdefault("join_requests", []).append(join_req)
    save_data(data)
    req_text = (
        f"<b>üì© –ó–∞—è–≤–∫–∞ –≤ —Ç—Ä–∞–π–±</b>\n"
        f"üë§ –ù–∏–∫: {join_req['nickname']}\n"
        f"üîó Telegram: @{join_req['telegram_username']}\n"
        f"üìÖ –î–∞—Ç–∞: {join_req['registration_date']}"
    )
    kb = types.InlineKeyboardMarkup()
    kb.row(
        types.InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"join_accept_{user_id}_{target_leader}"),
        types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"join_reject_{user_id}_{target_leader}")
    )
    bot.send_message(target_leader, req_text, reply_markup=kb, parse_mode="HTML")
    bot.send_message(message.chat.id, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ì–ª–∞–≤–µ —Ç—Ä–∞–π–±–∞.")

# -------------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ (–¥–ª—è –ì–ª–∞–≤—ã) --------------------
@bot.callback_query_handler(func=lambda call: call.data.startswith("join_accept_") or call.data.startswith("join_reject_"))
def handle_join_response(call):
    parts = call.data.split("_")
    action = "_".join(parts[:2])
    applicant_id = parts[2]
    leader_id = parts[3]
    data = load_data()
    tribe = data["tribes"].get(leader_id)
    if not tribe:
        bot.answer_callback_query(call.id, "‚ùå –¢—Ä–∞–π–± –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    req_index = None
    for idx, req in enumerate(tribe.get("join_requests", [])):
        if req["user_id"] == applicant_id:
            req_index = idx
            break
    if req_index is None:
        bot.answer_callback_query(call.id, "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    if action == "join_accept":
        applicant = tribe["join_requests"].pop(req_index)
        tribe["members"].append({
            "user_id": applicant["user_id"],
            "nickname": applicant["nickname"],
            "telegram_username": applicant["telegram_username"],
            "role": "–£—á–∞—Å—Ç–Ω–∏–∫"
        })
        if applicant["user_id"] in data["users"]:
            user = data["users"][applicant["user_id"]]
            user["tribe"] = tribe["name"]
            # üéÅ –í—ã–¥–∞—ë–º –±–æ–Ω—É—Å –∑–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ (—Ä–∞–∑ –≤ 3 –¥–Ω—è)
            process_tribe_login_rewards(applicant["user_id"])
        save_data(data)
        bot.send_message(leader_id, f"‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç {applicant['nickname']} –ø—Ä–∏–Ω—è—Ç–∞.")
        bot.send_message(applicant["user_id"], f"üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —Ç—Ä–∞–π–± '{tribe['name']}' –ø—Ä–∏–Ω—è—Ç–∞!")
    else:
        tribe["join_requests"].pop(req_index)
        save_data(data)
        bot.send_message(leader_id, "‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        bot.send_message(applicant_id, f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —Ç—Ä–∞–π–± '{tribe['name']}' –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    bot.answer_callback_query(call.id)


@bot.callback_query_handler(func=lambda call: call.data == "community_tribes")
def handle_community_tribes(call):
    tribe_main_menu(call)

# -------------------- –í—ã—Ö–æ–¥ –∏–∑ —Ç—Ä–∞–π–±–∞ (–¥–ª—è –Ω–µ-–õ–∏–¥–µ—Ä–∞) --------------------
@bot.callback_query_handler(func=lambda call: call.data == "leave_tribe")
def leave_tribe(call):
    user_id = str(call.from_user.id)
    data = load_data()
    found = None
    for leader_id, tribe in data.get("tribes", {}).items():
        for member in tribe["members"]:
            if member["user_id"] == user_id:
                found = (leader_id, tribe)
                break
        if found:
            break
    if not found:
        bot.answer_callback_query(call.id, "‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Ç—Ä–∞–π–±–µ.")
        return
    leader_id, tribe = found
    if leader_id == user_id:
        bot.answer_callback_query(call.id, "‚ùå –ö–∞–∫ –ì–ª–∞–≤–∞, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å —Ç—Ä–∞–π–± –±–µ–∑ —Ä–∞—Å–ø—É—Å–∫–∞.")
        return
    tribe["members"] = [m for m in tribe["members"] if m["user_id"] != user_id]
    if user_id in data["users"]:
        data["users"][user_id].pop("tribe", None)
    save_data(data)
    bot.answer_callback_query(call.id, "‚úÖ –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ —Ç—Ä–∞–π–±.")
    bot.send_message(call.message.chat.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ —Ç—Ä–∞–π–± '{tribe['name']}'.")
    tribe_main_menu(call)

# -------------------- –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å–ø—É—Å–∫–∞ —Ç—Ä–∞–π–±–∞ --------------------
def disband_tribe(leader_id, data):
    tribe = data["tribes"].pop(leader_id, None)
    if tribe:
        for member in tribe["members"]:
            uid = member["user_id"]
            if uid in data["users"]:
                data["users"][uid].pop("tribe", None)
        save_data(data)

@bot.callback_query_handler(func=lambda call: call.data == "disband_tribe")
def disband_tribe_handler(call):
    user_id = str(call.from_user.id)
    data = load_data()
    leader_id, tribe = get_user_tribe(user_id, data)
    if not tribe:
        bot.answer_callback_query(call.id, "‚ùó –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Ç—Ä–∞–π–±–µ.")
        return
    if leader_id != user_id:
        bot.answer_callback_query(call.id, "‚ùó –¢–æ–ª—å–∫–æ –ì–ª–∞–≤–∞ –º–æ–∂–µ—Ç —Ä–∞—Å–ø—É—Å—Ç–∏—Ç—å —Ç—Ä–∞–π–±.")
        return
    if len(tribe["members"]) == 1:
        disband_tribe(user_id, data)
        bot.edit_message_text("‚úÖ –í–∞—à —Ç—Ä–∞–π–± —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø—É—â–µ–Ω.", call.message.chat.id, call.message.message_id)
    else:
        bot.answer_callback_query(call.id, "–†–∞—Å–ø—É—Å–∫ –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ, –µ—Å–ª–∏ –≤—ã –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –∏–ª–∏ –ø–æ –∏—Ç–æ–≥–∞–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.")

# -------------------- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–π–±–æ–º: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ --------------------
def clan_edit_markup():
    kb = types.InlineKeyboardMarkup()
    kb.row(
        types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_tribe_desc"),
        types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å ID (50‚ÇΩ)", callback_data="edit_tribe_id"),
        types.InlineKeyboardButton("–ù–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–º–æ—â–Ω–∏–∫–∞", callback_data="assign_tribe_helper")
    )
    kb.row(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="view_tribe"))
    return kb

def clan_management_markup():
    kb = types.InlineKeyboardMarkup()
    kb.row(
        types.InlineKeyboardButton("–ö–∏–∫–Ω—É—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", callback_data="kick_tribe_member"),
        types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data="create_tribe_announcement")
    )
    kb.row(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="view_tribe"))
    return kb

@bot.callback_query_handler(func=lambda call: call.data == "edit_tribe")
def edit_tribe_menu(call):
    kb = clan_edit_markup()
    try:
        bot.edit_message_text("‚öôÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–π–±–∞:", call.message.chat.id, call.message.message_id, reply_markup=kb)
    except Exception as e:
        print(f"[ERROR] –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–π–±–∞: {e}")

@bot.callback_query_handler(func=lambda call: call.data == "manage_tribe")
def manage_tribe_menu(call):
    kb = clan_management_markup()
    try:
        bot.edit_message_text("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–π–±–æ–º:", call.message.chat.id, call.message.message_id, reply_markup=kb)
    except Exception as e:
        print(f"[ERROR] –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–π–±–æ–º: {e}")

@bot.callback_query_handler(func=lambda call: call.data == "edit_tribe_desc")
def edit_tribe_desc_prompt(call):
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–π–±–∞ (–¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤):")
    bot.register_next_step_handler(msg, process_edit_tribe_desc)

def process_edit_tribe_desc(message):
    user_id = str(message.from_user.id)
    new_desc = message.text.strip()
    if len(new_desc) > 50:
        bot.send_message(message.chat.id, "‚ùó –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    data = load_data()
    tribe = data["tribes"].get(user_id)
    if not tribe:
        bot.send_message(message.chat.id, "‚ùå –¢—Ä–∞–π–± –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    tribe["desc"] = new_desc
    save_data(data)
    bot.send_message(message.chat.id, "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–π–±–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=clan_edit_markup())

@bot.callback_query_handler(func=lambda call: call.data == "edit_tribe_id")
def edit_tribe_id_prompt(call):
    user_id = str(call.from_user.id)
    data = load_data()
    user = data["users"].get(user_id, {})
    cost = 0 if user.get("bv_plus") else 50
    msg = bot.send_message(call.message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π ID —Ç—Ä–∞–π–±–∞ (3 —Å–∏–º–≤–æ–ª–∞). –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost}‚ÇΩ:")
    bot.register_next_step_handler(msg, process_edit_tribe_id)

def process_edit_tribe_id(message):
    user_id = str(message.from_user.id)
    new_id = message.text.strip()
    if len(new_id) != 3:
        bot.send_message(message.chat.id, "‚ùó ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–æ–≤–Ω–æ 3 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    data = load_data()
    tribe = data["tribes"].get(user_id)
    if not tribe:
        bot.send_message(message.chat.id, "‚ùå –¢—Ä–∞–π–± –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    user = data["users"].get(user_id, {})
    cost = 0 if user.get("bv_plus") else 50
    if user.get("balance", 0) < cost:
        bot.send_message(message.chat.id, "‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ID.")
        return
    user["balance"] -= cost
    tribe["id"] = new_id.upper()
    save_data(data)
    bot.send_message(message.chat.id, "‚úÖ ID —Ç—Ä–∞–π–±–∞ –∏–∑–º–µ–Ω—ë–Ω.", reply_markup=clan_edit_markup())

@bot.callback_query_handler(func=lambda call: call.data == "assign_tribe_helper")
def assign_helper_prompt(call):
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –∏–ª–∏ @username —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–º–æ—â–Ω–∏–∫–æ–º:")
    bot.register_next_step_handler(msg, process_assign_helper)

def process_assign_helper(message):
    user_id = str(message.from_user.id)
    query = message.text.strip().lower()
    data = load_data()
    tribe = data["tribes"].get(user_id)
    if not tribe:
        bot.send_message(message.chat.id, "‚ùå –¢—Ä–∞–π–± –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    found = None
    for member in tribe["members"]:
        if query == member.get("nickname", "").lower() or query == member.get("telegram_username", "").lower() or query in member.get("nickname", "").lower():
            found = member
            break
    if not found:
        bot.send_message(message.chat.id, "‚ùó –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–º —Ç—Ä–∞–π–±–µ.")
        return
    found["role"] = "–ü–æ–º–æ—â–Ω–∏–∫"
    save_data(data)
    bot.send_message(message.chat.id, f"‚úÖ {found['nickname']} –Ω–∞–∑–Ω–∞—á–µ–Ω(–∞) –ø–æ–º–æ—â–Ω–∏–∫–æ–º.", reply_markup=clan_edit_markup())

# -------------------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ú–æ–π —Ç—Ä–∞–π–±" --------------------
@bot.callback_query_handler(func=lambda call: call.data == "view_tribe")
def view_tribe(call):
    user_id = str(call.from_user.id)
    data = load_data()
    leader_id, tribe = get_user_tribe(user_id, data)
    if not tribe:
        bot.answer_callback_query(call.id, "–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Ç—Ä–∞–π–±–µ.")
        return
    members_info = ""
    for member in tribe["members"]:
        uid = member["user_id"]
        role = member.get("role", "")
        role_emoji = "üëë" if role == "–ì–ª–∞–≤–∞" else ("‚úçÔ∏è" if role == "–ü–æ–º–æ—â–Ω–∏–∫" else "")
        user_data = data["users"].get(uid, {})
        star = "‚≠ê" if user_data.get("bv_plus") else ""
        username = member.get("telegram_username", "")
        if username:
            members_info += f"{member['nickname']} {role_emoji}{star} (@{username})\n"
        else:
            members_info += f"{member['nickname']} {role_emoji}{star}\n"
    text = (
        f"üè∞ <b>–í–∞—à —Ç—Ä–∞–π–±</b>\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"üìõ <b>–ù–∞–∑–≤–∞–Ω–∏–µ –∏ ID:</b> {tribe['name']} [{tribe['id']}]\n"
        f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {tribe['desc']}\n"
        f"üìÖ <b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> {tribe['date_created']}\n"
        f"üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> {len(tribe['members'])}/10\n\n"
        f"üë§ <b>–°–æ—Å—Ç–∞–≤:</b>\n{members_info}\n"
        f"üîó <b>–ë–µ—Å–µ–¥–∞:</b> {tribe['chat_link'] or '‚Äî'}"
    )
    if tribe["leader"] == user_id:
        kb = types.InlineKeyboardMarkup()
        kb.row(
            types.InlineKeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª—è—Ç—å", callback_data="manage_tribe"),
            types.InlineKeyboardButton("üí• –†–∞—Å–ø—É—Å—Ç–∏—Ç—å", callback_data="disband_tribe")
        )
        kb.row(
            types.InlineKeyboardButton("üìú –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–π–±–æ–≤", callback_data="list_tribes"),
            types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="tribe_menu")
        )
    else:
        kb = types.InlineKeyboardMarkup()
        kb.row(
            types.InlineKeyboardButton("üö™ –ü–æ–∫–∏–Ω—É—Ç—å", callback_data="leave_tribe"),
            types.InlineKeyboardButton("üìú –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–π–±–æ–≤", callback_data="list_tribes")
        )
        kb.row(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="tribe_menu"))
    try:
        bot.send_message(call.message.chat.id, text, reply_markup=kb, parse_mode="HTML")
    except Exception as e:
        print(f"[ERROR] –ü—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ç—Ä–∞–π–±–∞: {e}")
        bot.send_message(call.message.chat.id, text, reply_markup=kb, parse_mode="HTML")

#----------------–ü—Ä–æ–º–æ–∫–æ–¥—ã-------------------


def process_promo_code(message):
    user_id = str(message.from_user.id)
    code_input = message.text.strip()
    data = load_data()

    promo_codes = data.get("promo_codes", {})
    promo_key = next((key for key in promo_codes if key.lower() == code_input.lower()), None)

    if not promo_key:
        bot.send_message(message.chat.id, "‚ùå –¢–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", reply_markup=get_main_menu_markup(user_id))
        return

    promo = promo_codes[promo_key]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
    expires_at = promo.get("expires_at")
    if expires_at:
        try:
            expiration = datetime.strptime(expires_at, "%Y-%m-%dT%H:%M:%S")
            if datetime.now() > expiration:
                bot.send_message(message.chat.id, "‚åõ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—Ç—ë–∫.", reply_markup=get_main_menu_markup(user_id))
                return
        except Exception as e:
            print(f"[promo expiration parse error]: {e}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
    used_by = promo.setdefault("used_by", [])
    if len(used_by) >= promo.get("max_uses", 1):
        bot.send_message(message.chat.id, "üö´ –ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —Ä–∞–∑.", reply_markup=get_main_menu_markup(user_id))
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    if promo.get("unique", True) and int(user_id) in used_by:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥.", reply_markup=get_main_menu_markup(user_id))
        return

    # üí∞ –î–µ–Ω—å–≥–∏
    money = promo.get("bonus", 0)
    user = data["users"].setdefault(user_id, {})
    user.setdefault("balance", 0)
    user.setdefault("promo_codes_used", [])
    user.setdefault("purchases", [])

    if isinstance(money, int) and money > 0:
        user["balance"] += money
        user["purchases"].append({
            "item": f"–ü—Ä–æ–º–æ–∫–æ–¥ {promo_key}",
            "price": money,
            "date": datetime.now().strftime("%d.%m.%Y %H:%M:%S")
        })

    if int(user_id) not in used_by:
        used_by.append(int(user_id))
    if promo_key not in user["promo_codes_used"]:
        user["promo_codes_used"].append(promo_key)

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –µ—Å–ª–∏ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π
    if promo.get("delete_after_use") and promo.get("max_uses", 1) <= len(used_by):
        del data["promo_codes"][promo_key]

    save_data(data)

    print(f"[PROMO] {user_id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª {promo_key} ‚Äî {money}‚ÇΩ")
    bot.send_message(message.chat.id, f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω—ë–Ω!\nüí∞ –ù–∞—á–∏—Å–ª–µ–Ω–æ: {money}‚ÇΩ", reply_markup=get_main_menu_markup(user_id))

def process_profile_promo(message):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è.
    –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—â—É—é –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞.
    """
    process_promo_code(message)  # –µ—Å–ª–∏ –ª–æ–≥–∏–∫–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é



@bot.callback_query_handler(func=lambda call: call.data == "activate_promo_welcome")
def handle_activate_promo(call):
    msg = bot.send_message(call.message.chat.id, "üéü –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:")
    bot.register_next_step_handler(msg, process_promo_code)

def create_promo(code, reward, max_uses=1, unique=True, expires_at=None, delete_after_use=False):
    data = load_data()
    data.setdefault("promo_codes", {})
    data["promo_codes"][code] = {
        "reward": reward,
        "max_uses": max_uses,
        "unique": unique,
        "expires_at": expires_at,  # —Ñ–æ—Ä–º–∞—Ç: "2025-04-01T00:00:00"
        "used_by": [],
        "delete_after_use": delete_after_use
    }
    save_data(data)



#--------------------–†–µ—Ñ–µ—Ä–∞–ª---------------------------

@bot.message_handler(func=lambda message: str(message.from_user.id) in user_states and user_states[str(message.from_user.id)].get("state") == "awaiting_referral")
def handle_referral(message):
    user_id = str(message.from_user.id)
    text = message.text.strip()
    temp_data = user_states[user_id]["temp_data"]
    if text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        temp_data["referral"] = None
    else:
        if "," in text:
            parts = text.split(",", 1)
            ref_nick = parts[0].strip()
            ref_username = parts[1].strip()
            if ref_username.startswith("@"):
                ref_username = ref_username[1:]
            temp_data["referral"] = {"nickname": ref_nick, "telegram_username": ref_username}
        else:
            temp_data["referral"] = text
    bot.send_message(message.chat.id, "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞.", reply_markup=types.ReplyKeyboardRemove())
    temp_data["telegram_username"] = message.from_user.username if message.from_user.username else ""
    temp_data["registration_date"] = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    data = load_data()
    temp_data.setdefault("balance", 0)
    temp_data.setdefault("purchases", [])
    temp_data.setdefault("promo_codes_used", [])
    temp_data.setdefault("emojis", {})
    data["users"][user_id] = temp_data
    referral_info = temp_data.get("referral", "–ù–µ—Ç")
    if isinstance(referral_info, dict):
        referral_text = f"{referral_info['nickname']} (@{referral_info['telegram_username']})"
    else:
        referral_text = referral_info
    data["registration_requests"].append({
        "user_id": user_id,
        "nickname": temp_data["nickname"],
        "age": temp_data["age"],
        "registration_date": temp_data["registration_date"],
        "referral": referral_text
    })
    save_data(data)

#------------------- –°—Ç—Ä–∏–∫–∏ ----------------------

@bot.message_handler(commands=["streak"])
def handle_streak(message):
    user_id = str(message.from_user.id)
    data = load_data()
    user = data["users"].get(user_id)

    if not user or not user.get("approved", False):
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞.")
        return

    streak = user.get("login_streak", 0)
    max_streak = user.get("max_login_streak", 0)
    last_login = user.get("last_login", "–Ω–∏–∫–æ–≥–¥–∞")
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–Ω–≥
    if streak < 7:
        rank = "–ù–æ–≤–∏—á–æ–∫ üü¢"
    elif streak < 15:
        rank = "–ù–∞–¥–µ–∂–Ω—ã–π üîµ"
    elif streak < 30:
        rank = "–£–ø–æ—Ä–Ω—ã–π üü°"
    else:
        rank = "–õ–µ–≥–µ–Ω–¥–∞ üî¥"
    fire = "üî•" * min(streak % 10 if streak % 10 != 0 else 10, 10)
    bar = f"[{fire}{'‚ñ´Ô∏è' * (10 - len(fire))}]"
    ender_eyes = user.get("ender_eyes", 0)

    bot.send_message(
        message.chat.id,
        f"<b>üî• –í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫</b>\n"
        f"{bar}\n\n"
        f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: {last_login}\n"
        f"üìà –¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: {streak} –¥–Ω–µ–π\n"
        f"üèÖ –†–∞–Ω–≥: {rank}\n"
        f"üîù –ú–∞–∫—Å. —Å—Ç—Ä–∏–∫: {max_streak} –¥–Ω–µ–π\n"
        f"üßø –û–∫–∞ —ç–Ω–¥–µ—Ä–∞: {ender_eyes}",
        parse_mode="HTML"
    )

def update_streak(user_id):
    """
    –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å—Ç—Ä–∏–∫–æ–≤:
    üîπ –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –ª–æ–≥–∏–Ω–∞ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –û–∫–æ —ç–Ω–¥–µ—Ä–∞: +1, 
       –∞ –∫–∞–∂–¥—ã–µ 10-–π –¥–µ–Ω—å –¥–∞—é—Ç +5 –û–∫–∞ —ç–Ω–¥–µ—Ä–∞.
    üé≤ 5% —à–∞–Ω—Å –Ω–∞ —É–¥–≤–æ–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã (–û–∫–∞ —ç–Ω–¥–µ—Ä–∞).
    ‚ûï –ò–Ω–æ–≥–¥–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –º–æ–Ω–µ—Ç—ã –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.
    üî• –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º –∏ —Ä–∞–Ω–≥–æ–º.
    """
    data = load_data()
    user = data["users"].get(user_id, {})

    today_str = datetime.now().strftime("%Y-%m-%d")
    yesterday_str = (datetime.now() - timedelta(days=1)).strftime("%Y-%m-%d")

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ö–æ–¥–∏–ª —Å–µ–≥–æ–¥–Ω—è, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—á–∏—Å–ª—è–µ–º
    if user.get("last_login") == today_str:
        return None, user.get("login_streak", 0)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫
    if user.get("last_login") == yesterday_str:
        streak = user.get("login_streak", 0) + 1
    else:
        streak = 1

    user["login_streak"] = streak
    user["last_login"] = today_str
    if streak > user.get("max_login_streak", 0):
        user["max_login_streak"] = streak

    # -------------------------------
    # –ù–∞–≥—Ä–∞–¥–∞ ‚Äì –û–∫–æ —ç–Ω–¥–µ—Ä–∞ (üßø):
    # –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞: 1 –∑–∞ –æ–±—ã—á–Ω—ã–π –¥–µ–Ω—å, 5 –µ—Å–ª–∏ —Å—Ç—Ä–∏–∫ –∫—Ä–∞—Ç–µ–Ω 10
    ender_reward = 5 if streak % 10 == 0 else 1

    # 5% —à–∞–Ω—Å —É–¥–≤–æ–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É
    if random.random() < 0.05:
        ender_reward *= 2
        bot.send_message(user_id, "üéâ –í–∞–º –ø–æ–≤–µ–∑–ª–æ! –î–≤–æ–π–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞!")

    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–æ–ª—è "ender_eyes", –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–≥–æ
    current_ender = user.get("ender_eyes", 0)
    user["ender_eyes"] = current_ender + ender_reward

    # -------------------------------
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ ‚Äì –º–æ–Ω–µ—Ç—ã
    additional_coins = 0
    # –ù–∞–ø—Ä–∏–º–µ—Ä, —Å 20% —à–∞–Ω—Å–æ–º –Ω–∞—á–∏—Å–ª—è–µ–º –æ—Ç 1 –¥–æ 5 –º–æ–Ω–µ—Ç
    if random.random() < 0.20:
        additional_coins = random.randint(1, 5)
        user["balance"] = user.get("balance", 0) + additional_coins

    # -------------------------------
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å—Ç—Ä–∏–∫—É
    if streak < 7:
        rank = "–ù–æ–≤–∏—á–æ–∫ üü¢"
    elif streak < 15:
        rank = "–ù–∞–¥–µ–∂–Ω—ã–π üîµ"
    elif streak < 30:
        rank = "–£–ø–æ—Ä–Ω—ã–π üü°"
    else:
        rank = "–õ–µ–≥–µ–Ω–¥–∞ üî¥"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—â–µ –Ω–µ —É–≤–µ–¥–æ–º–ª—è–ª–∏ —Å–µ–≥–æ–¥–Ω—è
    if user.get("streak_notified_date") != today_str:
        fire = "üî•" * min(streak % 10 if streak % 10 != 0 else 10, 10)
        bar = f"[{fire}{'‚ñ´Ô∏è' * (10 - len(fire))}]"
        reward_text = f"üßø –ù–∞–≥—Ä–∞–¥–∞: {ender_reward} –û–∫–∞ —ç–Ω–¥–µ—Ä–∞"
        if additional_coins:
            reward_text += f" –∏ üí∞ {additional_coins} –º–æ–Ω–µ—Ç"
        bot.send_message(
            user_id,
            f"–í–∞—à —Å—Ç—Ä–∏–∫ –ø—Ä–æ–¥–ª–µ–Ω!\n{bar}\n"
            f"–¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: {streak} –¥–Ω–µ–π\n"
            f"–†–∞–Ω–≥: {rank}\n"
            f"{reward_text}"
        )
        user["streak_notified_date"] = today_str

    data["users"][user_id] = user
    save_data(data)
    return ender_reward, streak


#------------------- –û–∫–æ –≠–Ω–¥–µ—Ä–∞ ----------------------

def add_ender_eye(user_id, amount):
    data = load_data()
    user = data["users"].get(user_id)
    if user is None:
        return False  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ 0 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    current = user.get("ender_eyes", 0)
    user["ender_eyes"] = current + amount
    save_data(data)
    return True

def award_beta_tribe_bonus():
    data = load_data()
    for uid, user in data["users"].items():
        if user.get("tribe") and not user.get("beta_tribe_bonus_given", False):
            user["ender_eyes"] = user.get("ender_eyes", 0) + 5
            user["beta_tribe_bonus_given"] = True
            try:
                bot.send_message(uid, "üéÅ –ù–∞–≥—Ä–∞–¥–∞ –±–µ—Ç–∞ –∑–∞–ø—É—Å–∫–∞: –í—ã —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Ç—Ä–∞–π–±–µ, –≤–∞–º –≤—ã–¥–∞–Ω–æ +5 üßø –û–ö —ç–Ω–¥–µ—Ä–∞!")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")
    save_data(data)

@bot.message_handler(commands=["award_beta"])
def cmd_award_beta(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    award_beta_tribe_bonus()
    bot.send_message(message.chat.id, "–ë–æ–Ω—É—Å—ã –¥–ª—è —Ç–µ–∫—É—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—Ä–∞–π–±–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω—ã!")

def process_tribe_login_rewards(user_id):
    data = load_data()
    user = data["users"].get(user_id)
    if not user or "tribe" not in user:
        return  # –∏–≥—Ä–æ–∫ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ —Ç—Ä–∞–π–±–µ

    now = datetime.now()
    today = now.strftime("%Y-%m-%d")
    last_bonus_str = user.get("last_tribe_join_bonus")

    give_bonus = False
    if last_bonus_str:
        try:
            last_bonus_date = datetime.strptime(last_bonus_str, "%Y-%m-%d")
            if (now - last_bonus_date).days >= 3:
                give_bonus = True
        except Exception:
            give_bonus = True  # –µ—Å–ª–∏ –¥–∞—Ç–∞ –±–∏—Ç–∞—è ‚Äî –≤—Å—ë —Ä–∞–≤–Ω–æ –≤—ã–¥–∞—ë–º
    else:
        give_bonus = True

    if give_bonus:
        user["ender_eyes"] = user.get("ender_eyes", 0) + 5
        user["last_tribe_join_bonus"] = today
        try:
            bot.send_message(user_id, "üéÅ –ó–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —Ç—Ä–∞–π–±: +5 üßø –û–∫–æ –≠–Ω–¥–µ—Ä–∞!")
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ–Ω—É—Å –∑–∞ —Ç—Ä–∞–π–± –∏–≥—Ä–æ–∫—É {user_id}: {e}")

    save_data(data)




#------------------- –ü–æ–¥–∞—Ä–æ–∫ ----------------------
@bot.callback_query_handler(func=lambda call: call.data == "daily_gift")
def handle_daily_gift(call):
    user_id = str(call.from_user.id)
    data = load_data()
    if user_id not in data["users"]:
        bot.answer_callback_query(call.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏!")
        return

    user = data["users"][user_id]
    today_str = datetime.now().strftime("%Y-%m-%d")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–ª—É—á–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∞—Ä–æ–∫ —Å–µ–≥–æ–¥–Ω—è
    if user.get("last_daily_gift") == today_str:
        bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–¥–∞—Ä–æ–∫ —Å–µ–≥–æ–¥–Ω—è. –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞!")
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–ª—É—á–∞–ª –ø–æ–¥–∞—Ä–æ–∫ —Å–µ–≥–æ–¥–Ω—è, –≤—ã–ø–æ–ª–Ω—è–µ–º –ª–æ–≥–∏–∫—É –≤—ã–¥–∞—á–∏:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º, –µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç –ø–æ–ª—è
    if "ender_eyes" not in user:
        user["ender_eyes"] = 0

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º:
    # Jackpot: 1% (0.01); –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è: 9% (0.09); –¢–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç—ã: 20% (0.20); –¢–æ–ª—å–∫–æ –û–ö —ç–Ω–¥–µ—Ä–∞: 70%
    rnd = random.random()
    reward_text = ""
    # Jackpot –Ω–∞–≥—Ä–∞–¥–∞
    if rnd < 0.01:
        if random.choice([True, False]):
            coins = 10
            user["balance"] = user.get("balance", 0) + coins
            reward_text = f"Jackpot! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {coins} üí∞ –º–æ–Ω–µ—Ç!"
        else:
            eyes = 10
            user["ender_eyes"] += eyes
            reward_text = f"Jackpot! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {eyes} üßø –û–∫–∞ —ç–Ω–¥–µ—Ä–∞!"
    # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞
    elif rnd < 0.01 + 0.09:
        eyes = random.randint(1, 5)
        coins = random.randint(1, 5)
        user["ender_eyes"] += eyes
        user["balance"] = user.get("balance", 0) + coins
        reward_text = f"–í–∞–º –≤—ã–ø–∞–ª –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫!\nüßø –û–∫–∞ —ç–Ω–¥–µ—Ä–∞: {eyes}\nüí∞ –ú–æ–Ω–µ—Ç: {coins}"
    # –¢–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç—ã
    elif rnd < 0.01 + 0.09 + 0.20:
        coins = random.randint(1, 5)
        user["balance"] = user.get("balance", 0) + coins
        reward_text = f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {coins} üí∞ –º–æ–Ω–µ—Ç!"
    # –¢–æ–ª—å–∫–æ –û–ö —ç–Ω–¥–µ—Ä–∞
    else:
        eyes = random.randint(1, 5)
        user["ender_eyes"] += eyes
        reward_text = f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {eyes} üßø –û–∫–∞ —ç–Ω–¥–µ—Ä–∞!"

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞
    user["last_daily_gift"] = today_str
    data["users"][user_id] = user
    save_data(data)

    bot.answer_callback_query(call.id, reward_text)
    bot.send_message(call.message.chat.id, f"üéÅ {reward_text}", reply_markup=market_main_markup())

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è
def is_user_approved(user_id):
    data = load_data()
    return user_id in data["users"] and data["users"][user_id].get("approved", False)


# –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ—Ö–≤–∞—Ç–∫–µ —Å—Ä–µ–¥—Å—Ç–≤
def insufficient_funds_bv(message):
    bot.send_message(message.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ BV+.", reply_markup=welcome_markup())

def safe_edit_message_text(text, chat_id, message_id, reply_markup=None):
    """
    –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ; –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞—ë—Ç—Å—è ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    try:
        bot.edit_message_text(text, chat_id, message_id, reply_markup=reply_markup, parse_mode="HTML")
    except Exception as e:
        print(f"[ERROR] safe_edit_message_text: {e}")
        bot.send_message(chat_id, text, reply_markup=reply_markup, parse_mode="HTML")

def process_purchase(user_id, price, item):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏,
    —Å–ø–∏—Å—ã–≤–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É, –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–∫—É–ø–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å.
    """
    data = load_data()
    user = data["users"].get(user_id)
    if not user:
        return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
    if user.get("balance", 0) < price:
        return False, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤."
    user["balance"] -= price
    user.setdefault("purchases", []).append({
        "item": item,
        "price": price,
        "date": datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    })
    save_data(data)
    return True, f"–£—Å–ª—É–≥–∞ {item} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∞."


#------------------- –ë–æ—Ç –≤ –≥—Ä—É–ø–ø–µ ----------------------
@bot.message_handler(func=lambda m: m.chat.type in ["group", "supergroup"] and m.reply_to_message)
def handle_reply_logic(m):
    if m.chat.id != -1002353421985 or m.message_thread_id != 28:
        return

    text = m.text.strip().lower()

    # ===== "–ö–¢–û –≠–¢–û"
    if text in ["–∫—Ç–æ —ç—Ç–æ", "–∫—Ç–æ –æ–Ω", "–∫—Ç–æ –æ–Ω–∞", "–∫—Ç–æ —Ç–∞–∫–æ–π", "–∫—Ç–æ —Ç–∞–∫–∞—è"]:
        target_user = m.reply_to_message.from_user
        if not target_user:
            return

        target_id = str(target_user.id)
        data = load_data()

        if target_id not in data["users"]:
            bot.reply_to(m, "‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            return

        user = data["users"][target_id]
        user["status"] = "user"
        user["user_id"] = target_id
        msg = render_search_profile(user)
        bot.reply_to(m, msg, parse_mode="HTML")
        return

    # ===== "–ü–û–î–ê–†–û–ö"
    if text in ["–ø–æ–¥–∞—Ä–æ–∫", "/–ø–æ–¥–∞—Ä–æ–∫", "–¥–∞–π –ø–æ–¥–∞—Ä–æ–∫", "—Ö–æ—á—É –ø–æ–¥–∞—Ä–æ–∫"]:
        user_id = str(m.from_user.id)
        data = load_data()
        user = data["users"].get(user_id)

        if not user:
            bot.send_message(m.chat.id, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", message_thread_id=m.message_thread_id)
            return

        today_str = datetime.now().strftime("%Y-%m-%d")
        if user.get("last_daily_gift") == today_str:
            bot.send_message(m.chat.id, "üéÅ –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–¥–∞—Ä–æ–∫ —Å–µ–≥–æ–¥–Ω—è.", message_thread_id=m.message_thread_id)
            return

        reward_text = ""
        rnd = random.random()
        if rnd < 0.01:
            if random.choice([True, False]):
                coins = 10
                user["balance"] += coins
                reward_text = f"Jackpot! {coins} üí∞ –º–æ–Ω–µ—Ç"
            else:
                eyes = 10
                user["ender_eyes"] += eyes
                reward_text = f"Jackpot! {eyes} üßø –û–∫–∞ —ç–Ω–¥–µ—Ä–∞"
        elif rnd < 0.10:
            eyes = random.randint(1, 5)
            coins = random.randint(1, 5)
            user["ender_eyes"] += eyes
            user["balance"] += coins
            reward_text = f"üéÅ –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: {eyes} üßø –∏ {coins} üí∞"
        elif rnd < 0.30:
            coins = random.randint(1, 5)
            user["balance"] += coins
            reward_text = f"{coins} üí∞ –º–æ–Ω–µ—Ç"
        else:
            eyes = random.randint(1, 5)
            user["ender_eyes"] += eyes
            reward_text = f"{eyes} üßø –û–∫–∞ —ç–Ω–¥–µ—Ä–∞"

        user["last_daily_gift"] = today_str
        save_data(data)

        nickname = user.get("nickname", m.from_user.username or "–ò–≥—Ä–æ–∫")
        bot.send_message(m.chat.id, f"‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏: {reward_text}", message_thread_id=m.message_thread_id)
        bot.send_message(m.chat.id, f"üéâ –ü–æ–¥–∞—Ä–æ–∫: {nickname} –ø–æ–ª—É—á–∏–ª {reward_text}!", message_thread_id=m.message_thread_id)
        return

    # ===== "–¢–†–ê–ô–ë–´"
    if text in ["—Ç—Ä–∞–π–±—ã", "/—Ç—Ä–∞–π–±—ã", "—Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–π–±–æ–≤", "–≤—Å–µ —Ç—Ä–∞–π–±—ã"]:
        data = load_data()
        tribes = list(data.get("tribes", {}).values())

        if not tribes:
            bot.send_message(m.chat.id, "üòî –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–π–±–æ–≤.", message_thread_id=m.message_thread_id)
            return

        text = "üìú <b>–°–ø–∏—Å–æ–∫ —Ç—Ä–∞–π–±–æ–≤:</b>\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        for tribe in tribes:
            name = tribe.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            tid = tribe.get("id", "???")
            members = len(tribe.get("members", []))
            desc = tribe.get("desc", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")
            created = tribe.get("date_created", "‚Äî")
            text += f"<b>{name}</b> [{tid}]\nüë• {members}/10 | üìÖ {created}\nüìù {desc[:80]}...\n\n"

        bot.send_message(m.chat.id, text.strip(), parse_mode="HTML", message_thread_id=m.message_thread_id)

@bot.message_handler(commands=["—Ç–µ—Å—Ç–Ω–æ–≤–æ—Å—Ç—å"])
def test_news_topic(message):
    if message.chat.type != "private" or message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "‚õî –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É –≤ –õ–°.")
        return

    try:
        bot.send_message(
            chat_id=-1002353421985,
            message_thread_id=28,
            text="üß™ <b>–¢–µ—Å—Ç–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å</b>\n–ï—Å–ª–∏ —Ç—ã —ç—Ç–æ –≤–∏–¥–∏—à—å ‚Äî –±–æ—Ç –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å –≤ —Ç–µ–º—É.",
            parse_mode="HTML"
        )
        bot.reply_to(message, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–µ–º—É üì¢ –ù–æ–≤–æ—Å—Ç–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")


bot.infinity_polling(timeout=90, long_polling_timeout=45)





