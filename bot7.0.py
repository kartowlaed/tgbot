import time
import telebot
from telebot import types 
from types import SimpleNamespace
from datetime import date, datetime, timedelta
import json
import os
import re
import random
import uuid  
from telebot.apihelper import ApiTelegramException
import logging
from telebot.types import InputMediaPhoto
from collections import OrderedDict
from random import choice
import math

TOKEN = "8170890381:AAEIX0qWiDnbCj_8794VZpIMEiS_feZQdAs"

ADMIN_ID = 827377121           # –î–ª—è –ø–æ–∫—É–ø–æ–∫, —Ä–∞–∑–±–∞–Ω–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
BOT_VERSION = "7.0"            # –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞

bot = telebot.TeleBot(TOKEN)

GIFT_EMOJIS = ["üéÅ", "üéâ", "üèÜ", "üéä"]

BASE_DIR = os.path.dirname(os.path.abspath(__file__))

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
DATA_FILE = os.path.join(BASE_DIR, "data.json")
# –ï–¥–∏–Ω—ã–π —Ñ–∞–π–ª —Å–æ –≤—Å–µ–º–∏ –±—é—Ä–æ–∫—Ä–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–¥–µ–ª–∞, —à—Ç—Ä–∞—Ñ—ã –∏ —Ç.–¥.)
JOHN_FILE = os.path.join(BASE_DIR, "john.json")

# Global dictionary for user states
user_states = {}  # { user_id: { "state": ..., "temp_data": { ... } } }

# –§–∞–π–ª —Å –∞—Ä—Ö–∏–≤–æ–º —Å–µ–∑–æ–Ω–æ–≤
SEASONS_FILE = os.path.join(BASE_DIR, "seasons.json")

# –°–µ–∑–æ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_SEASONS = [
    {"number": 1, "name": "–°–ë1", "dates": "10.05.2020", "description": "", "pages": []},
    {"number": 2, "name": "–°–ë–ö–∞—Ä–∞–Ω—Ç–∏–Ω(–º)", "dates": "26.05.2020", "description": "", "pages": []},
    {"number": 3, "name": "–°–ë2", "dates": "02.02.2022", "description": "", "pages": []},
    {"number": 4, "name": "–°–ëCreative", "dates": "19.08.2023", "description": "", "pages": []},
    {"number": 5, "name": "–°–ëTravel", "dates": "13.06.2024", "description": "", "pages": []},
    {"number": 6, "name": "–°–ëFIRE", "dates": "01.08.2024", "description": "", "pages": []},
    {"number": 7, "name": "BVMods(–º)", "dates": "30.11.2024", "description": "", "pages": []},
    {"number": 8, "name": "BVNova", "dates": "29.12.2024", "description": "", "pages": []},
    {"number": 9, "name": "BVCastel(–º)", "dates": "22.03.2025", "description": "", "pages": []},
    {"number": 10, "name": "BVSolar", "dates": "01.07.2025", "description": "", "pages": []},
]

# –ü–æ–Ω–∏–∂–µ–Ω–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ –∫–µ–π—Å—ã (—Å–∫–∏–¥–∫–∞ 15% —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º –¥–æ —á–∏—Å–ª–∞, –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–µ–≥–æ—Å—è –Ω–∞ 5, 9 –∏–ª–∏ 0)
case_details = [
    {"name": "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π —Å—É–Ω–¥—É–∫", "price": 69, "image": "wood.png", "chance": 35,
     "description": "–ü—Ä–æ—Å—Ç–æ–π –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–π —Å—É–Ω–¥—É–∫ üå≥. –ú–æ–∂–µ—Ç –¥–∞—Ç—å –∫–∞–º–µ–Ω–Ω—ã–µ –∏ –∂–µ–ª–µ–∑–Ω—ã–µ —ç–º–æ–¥–∑–∏."},
    {"name": "–®–∞–ª–∫–µ—Ä", "price": 135, "image": "shulker.png", "chance": 20,
     "description": "–ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —à–∞–ª–∫–µ—Ä üì¶. –ú–æ–∂–µ—Ç –¥–∞—Ç—å –∂–µ–ª–µ–∑–Ω—ã–µ –∏ –∑–æ–ª–æ—Ç—ã–µ —ç–º–æ–¥–∑–∏."},
    {"name": "–ö–æ–º–∞–Ω–¥–Ω—ã–π –±–ª–æ–∫", "price": 169, "image": "command.png", "chance": 10,
     "description": "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –∫–æ–º–∞–Ω–¥–Ω—ã–π –±–ª–æ–∫ üöÄ. –ú–æ–∂–µ—Ç –¥–∞—Ç—å –∞–ª–º–∞–∑–Ω—ã–µ –∏ –Ω–µ–∑–µ—Ä–∏—Ç–æ–≤—ã–µ —ç–º–æ–¥–∑–∏."}
]

def minor_get_main_menu_markup(user_id):
    """
    –ú–∏–Ω–∏-–º–µ–Ω—é –¥–ª—è –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏—Ö –±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.
    –ü–æ–∫–∞ —Ç–∞–º —Ç–æ–ª—å–∫–æ ¬´–ü—Ä–æ—Ñ–∏–ª—å¬ª, –Ω–æ –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å.
    """
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="menu_profile"))
    return markup


def find_user_by_nick_or_username(nick, data):
    nick = nick.lstrip("@").lower()
    for uid, u in data.get("users", {}).items():
        if u.get("nickname", "").lower() == nick or u.get("telegram_username", "").lower() == nick:
            return uid
    return None


# ------------------- –§—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ -------------------
def load_data():
    ordered_keys = [
        "users",
        "promo_codes",
        "tribes",
        "invalid_registrations",
        "banned_users",
        "registration_requests",
        "pending_requests"
    ]

    default_data = {
        "users": {},
        "promo_codes": {},
        "tribes": {},
        "invalid_registrations": [],
        "banned_users": {},
        "registration_requests": [],
        "pending_requests": {}
    }

    # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º —Å –Ω—É–∂–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º
    if not os.path.exists(DATA_FILE):
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(default_data, f, indent=4)
        return default_data

    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–ª—é—á–∏
        for key in default_data:
            if key not in data:
                data[key] = default_data[key]

        # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å "–∏–≥—Ä–æ–∫" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        for uid, user in data["users"].items():
            if "role" not in user:
                user["role"] = "–∏–≥—Ä–æ–∫"

        for lid, tribe in data.get("tribes", {}).items():
            tribe.setdefault("level", 1)
            tribe.setdefault("xp", 0)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        ordered_data = OrderedDict()
        for key in ordered_keys:
            if key in data:
                ordered_data[key] = data[key]

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ –≤ –∫–æ–Ω–µ—Ü
        for key in data:
            if key not in ordered_data:
                ordered_data[key] = data[key]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ, —á—Ç–æ–±—ã –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä—è–¥–æ–∫
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(ordered_data, f, indent=4)

        return ordered_data

    except json.decoder.JSONDecodeError as e:
        # –µ—Å–ª–∏ —Ñ–∞–π–ª –±–∏—Ç—ã–π, –¥–µ–ª–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        try:
            backup_path = DATA_FILE + ".bak"
            if os.path.exists(DATA_FILE):
                os.replace(DATA_FILE, backup_path)
        except Exception as backup_err:
            print(f"[–û—à–∏–±–∫–∞ –±—ç–∫–∞–ø–∞ data.json]: {backup_err}")

        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(default_data, f, indent=4)
        try:
            msg = (
                f"‚ùó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ data.json: {e}. –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª, —Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ {os.path.basename(backup_path)}."
            )
            bot.send_message(ADMIN_ID, msg)
        except Exception as send_err:
            print(f"[–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞]: {send_err}")



def save_data(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞—Ç–æ–º–∞—Ä–Ω–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è —Ñ–∞–π–ª–∞."""
    tmp = DATA_FILE + ".tmp"
    with open(tmp, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4)
    os.replace(tmp, DATA_FILE)


def add_user_notification_record(data, uid, text):
    user = data["users"].setdefault(uid, {})
    notes = user.setdefault("notifications", [])
    notes.append({
        "time": datetime.now().strftime("%d.%m.%Y %H:%M"),
        "text": text
    })
    if len(notes) > 100:
        user["notifications"] = notes[-100:]

# ---------- –†–∞–±–æ—Ç–∞ —Å –∞—Ä—Ö–∏–≤–æ–º —Å–µ–∑–æ–Ω–æ–≤ ----------
def load_seasons():
    if not os.path.exists(SEASONS_FILE):
        with open(SEASONS_FILE, "w", encoding="utf-8") as f:
            json.dump(DEFAULT_SEASONS, f, indent=4)
        return DEFAULT_SEASONS
    try:
        with open(SEASONS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except json.decoder.JSONDecodeError:
        return DEFAULT_SEASONS

def save_seasons(seasons):
    """–ê—Ç–æ–º–∞—Ä–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞—Ä—Ö–∏–≤ —Å–µ–∑–æ–Ω–æ–≤."""
    tmp = SEASONS_FILE + ".tmp"
    with open(tmp, "w", encoding="utf-8") as f:
        json.dump(seasons, f, indent=4)
    os.replace(tmp, SEASONS_FILE)

# ---------- –°—É–¥–µ–±–Ω—ã–µ –¥–µ–ª–∞ ----------
# ---------- –†–∞–±–æ—Ç–∞ —Å john.json (–¥–µ–ª–∞ –∏ —à—Ç—Ä–∞—Ñ—ã) ----------
def load_john():
    default = {
        "cases": {"last_id": 0, "active": [], "archive": []},
        "fines": {"last_id": 0, "active": [], "closed": []}
    }
    if not os.path.exists(JOHN_FILE):
        with open(JOHN_FILE, "w", encoding="utf-8") as f:
            json.dump(default, f, indent=4)
        return default
    try:
        with open(JOHN_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    except json.decoder.JSONDecodeError:
        data = default
    for key in default:
        if key not in data:
            data[key] = default[key]
    return data


def save_john(data):
    tmp = JOHN_FILE + ".tmp"
    with open(tmp, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4)
    os.replace(tmp, JOHN_FILE)


def load_cases():
    return load_john().get("cases", {"last_id": 0, "active": [], "archive": []})


def save_cases(cases):
    data = load_john()
    data["cases"] = cases
    save_john(data)


# ---------- –®—Ç—Ä–∞—Ñ—ã ----------
def load_fines():
    return load_john().get("fines", {"last_id": 0, "active": [], "closed": []})


def save_fines(fines):
    data = load_john()
    data["fines"] = fines
    save_john(data)


def add_fine(fine):
    fines = load_fines()
    fines["last_id"] += 1
    fine_id = f"{fines['last_id']:03d}"
    fine["id"] = fine_id
    fine["created_at"] = datetime.now().strftime("%d.%m.%Y %H:%M")
    fine["status"] = "open"
    fines["active"].append(fine)
    save_fines(fines)
    return fine_id


def close_fine(fine_id):
    fines = load_fines()
    fine = next((f for f in fines.get("active", []) if f["id"] == fine_id), None)
    if not fine:
        return False
    fine["status"] = "closed"
    fine["closed_at"] = datetime.now().strftime("%d.%m.%Y %H:%M")
    fines["active"] = [f for f in fines["active"] if f["id"] != fine_id]
    fines.setdefault("closed", []).append(fine)
    save_fines(fines)
    return True


def add_case(case):
    cases = load_cases()
    cases["last_id"] += 1
    case_id = f"{cases['last_id']:03d}"
    case["id"] = case_id
    case["created_at"] = datetime.now().strftime("%d.%m.%Y %H:%M")
    case["status"] = "open"
    cases["active"].append(case)
    save_cases(cases)
    return case_id


def user_has_court_access(user):
    return user.get("role") in ["–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç", "–ú—ç—Ä", "–ü—Ä–æ–∫—É—Ä–æ—Ä"]

def user_has_fine_access(user):
    return user.get("role") in ["–ú–∏–Ω–∏—Å—Ç—Ä –§–∏–Ω–∞–Ω—Å–æ–≤", "–ü—Ä–æ–∫—É—Ä–æ—Ä", "–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç", "–ú—ç—Ä"]

def valid_nickname(nickname):
    return bool(re.fullmatch(r"[A-Za-z0-9 _]{3,16}", nickname))

def valid_birthdate(birthdate):
    try:
        datetime.strptime(birthdate, "%d.%m.%Y")
        return True
    except ValueError:
        return False
   


def calculate_age(birthdate):
    birth_date = datetime.strptime(birthdate, "%d.%m.%Y")
    today = datetime.today()
    return today.year - birth_date.year - ((today.month, today.day) < (birth_date.month, birth_date.day))

def migrate_minors_out(data):
    """
    –ü–µ—Ä–µ–Ω–µ—Å—ë–º –≤—Å–µ—Ö, —É –∫–æ–≥–æ is_minor=True, –∏–∑ data['users'] –≤ data['minors'].
    """
    data.setdefault("minors", {})
    for uid, user in list(data.get("users", {}).items()):
        if user.get("is_minor"):
            data["minors"][uid] = data["users"].pop(uid)
    return data

# –≥–¥–µ-—Ç–æ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞:
data = load_data()
data = migrate_minors_out(data)
save_data(data)


# ------------------- Markup definitions -------------------
def get_main_menu_markup(user_id):
    data   = load_data()
    user   = data["users"].get(user_id, {})
    status = user.get("status", "user")

    markup = types.InlineKeyboardMarkup()

    # üìõ –ó–∞–±–∞–Ω–µ–Ω
    if status == "banned":
        markup.add(types.InlineKeyboardButton("üîì –†–∞–∑–±–∞–Ω –∑–∞ 500‚ÇΩ", callback_data="request_unban"))
        markup.add(types.InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å",      callback_data="menu_profile"))
        return markup

    # ‚õî –ù–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–π –±–µ–∑ –ø—Ä–æ—Ö–æ–¥–∞
    if status == "minor" and not user.get("full_access"):
        markup.add(types.InlineKeyboardButton("üß∏ –ü—Ä–æ–ø—É—Å–∫ (250‚ÇΩ)", callback_data="buy_minor_pass"))
        markup.add(types.InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å",        callback_data="menu_profile"))
        return markup

    # ‚úÖ –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    # ‚îÄ‚îÄ –†—è–¥ 1: –ü—Ä–æ—Ñ–∏–ª—å
    markup.row(
        types.InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="menu_profile")
    )

    # ‚îÄ‚îÄ –†—è–¥ 2: –ú–∞—Ä–∫–µ—Ç + –°–æ–æ–±—â–µ—Å—Ç–≤–æ
    btn_market    = types.InlineKeyboardButton("üõí –ú–∞—Ä–∫–µ—Ç",     callback_data="market_main")
    btn_community = types.InlineKeyboardButton("üÜï –°–æ–æ–±—â–µ—Å—Ç–≤–æ", callback_data="community_menu")
    markup.row(btn_market, btn_community)

    # ‚îÄ‚îÄ –†—è–¥ 2¬Ω: üìñ –ì–∏–¥  (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º, –ø–æ–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω –∏ –µ—â—ë –Ω–µ –æ—Ç–∫—Ä—ã—Ç)
    if not user.get("guide_completed") and user.get("guide_step", 0) == 0:
        markup.row(
            types.InlineKeyboardButton("üìñ –ì–∏–¥", callback_data="open_guide")
        )

    # ‚îÄ‚îÄ –†—è–¥ 3: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    btn_notify = types.InlineKeyboardButton(
        "‚öôÔ∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
        callback_data="open_notifications"
    )
    markup.row(btn_notify)

    # ‚Üê –≤–æ—Ç —ç—Ç–æ!
    return markup


@bot.callback_query_handler(func=lambda call: call.data == "request_unban")
def handle_unban_request(call):
    user_id = str(call.from_user.id)
    data = load_data()
    user = data["users"].get(user_id)

    if user_id not in data.get("banned_users", {}):
        bot.answer_callback_query(call.id, "–í—ã –Ω–µ –∑–∞–±–∞–Ω–µ–Ω—ã.")
        return

    if user.get("balance", 0) < 500:
        bot.send_message(call.message.chat.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –†–∞–∑–±–∞–Ω —Å—Ç–æ–∏—Ç 500‚ÇΩ.")
        return

    user["balance"] -= 500
    user["status"] = "user"
    user["full_access"] = True
    user.setdefault("purchases", []).append({
        "item": "–†–∞–∑–±–∞–Ω",
        "price": 500,
        "date": datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    })

    del data["banned_users"][user_id]

    save_data(data)
    bot.send_message(call.message.chat.id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=get_main_menu_markup(user_id))


@bot.callback_query_handler(func=lambda call: call.data == "buy_minor_pass")
def handle_minor_pass_purchase(call):
    user_id = str(call.from_user.id)
    data = load_data()
    user = data["users"].get(user_id)

    if user_id not in data.get("invalid_registrations", {}):
        bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É.")
        return

    if user.get("balance", 0) < 250:
        bot.send_message(call.message.chat.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü—Ä–æ–ø—É—Å–∫ —Å—Ç–æ–∏—Ç 250‚ÇΩ.")
        return

    user["balance"] -= 250
    user["full_access"] = True
    user["status"] = "user"
    user.setdefault("purchases", []).append({
        "item": "–ü—Ä–æ–ø—É—Å–∫ –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–µ–≥–æ",
        "price": 250,
        "date": datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    })

    del data["invalid_registrations"][user_id]

    save_data(data)
    bot.send_message(call.message.chat.id, "‚úÖ –ü—Ä–æ–ø—É—Å–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å.", reply_markup=get_main_menu_markup(user_id))

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
#                üîî NOTIFICATIONS BLOCK
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

# –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞, –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤:
FLAG_MAP = {
    "bot_updates":   1 << 0,  # 1
    "technical":     1 << 1,  # 2
    "tribe":         1 << 2,  # 4
    "server_news":   1 << 3,  # 8
    "gov_news":      1 << 4,  # 16
}

NOTIFICATION_LABELS = {
    "bot_updates":   "–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–æ—Ç–µ",
    "technical":     "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ",
    "tribe":         "–û—Ç —Ç—Ä–∞–π–±–∞",
    "server_news":   "–°–æ–±—ã—Ç–∏—è —Å–µ—Ä–≤–µ—Ä–∞",
    "gov_news":      "–ì–æ—Å –Ω–æ–≤–æ—Å—Ç–∏",
}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
@bot.callback_query_handler(lambda c: c.data == "open_notifications")
def open_notifications(call):
    user_id = str(call.from_user.id)
    data    = load_data()
    user    = data["users"].setdefault(user_id, {})

    # –í—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º—É –≤—Å–µ—Ö —Ñ–ª–∞–≥–æ–≤
    all_mask = sum(FLAG_MAP.values())
    # –î–µ—Ñ–æ–ª—Ç: –µ—Å–ª–∏ —Å—Ç–∞—Ä—ã–π subscribed=True ‚Äî –≤—Å–µ —Ñ–ª–∞–≥–∏,
    # –∏–Ω–∞—á–µ ‚Äî –≤—Å—ë –∫—Ä–æ–º–µ ‚Äú–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–æ—Ç–µ‚Äù
    if user.get("subscribed", False):
        default_mask = all_mask
    else:
        default_mask = all_mask & ~FLAG_MAP["bot_updates"]

    # –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞—Ö–æ–¥–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º default_mask
    if "notif_flags" not in user:
        user["notif_flags"] = default_mask

    # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫–ª—é—á
    user.pop("subscribed", None)
    save_data(data)

    mask = user["notif_flags"]
    markup = types.InlineKeyboardMarkup(row_width=1)
    for key, label in NOTIFICATION_LABELS.items():
        is_on = bool(mask & FLAG_MAP[key])
        emoji = "üîä" if is_on else "üîá"
        markup.add(types.InlineKeyboardButton(
            f"{emoji} {label}",
            callback_data=f"toggle_notification:{key}"
        ))

    markup.add(types.InlineKeyboardButton("üóÇÔ∏è –ê—Ä—Ö–∏–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="notif_archive"))

    # –ö–Ω–æ–ø–∫–∞ ‚Äú–ù–∞–∑–∞–¥‚Äù
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="get_main_menu_markup"))

    bot.edit_message_text(
        "üîä <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π</b>\n\n"
        "–ù–∞–∂–º–∏ –Ω–∞ –Ω—É–∂–Ω—É—é, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å:",
        call.message.chat.id,
        call.message.message_id,
        parse_mode="HTML",
        reply_markup=markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@bot.callback_query_handler(lambda c: c.data.startswith("toggle_notification:"))
def toggle_notification(call):
    user_id  = str(call.from_user.id)
    category = call.data.split(":", 1)[1]

    data = load_data()
    user = data["users"].setdefault(user_id, {})

    mask = user.get("notif_flags", 0)
    flag = FLAG_MAP[category]

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –±–∏—Ç
    mask ^= flag
    user["notif_flags"] = mask
    save_data(data)

    status = "–≤–∫–ª—é—á–µ–Ω—ã" if (mask & flag) else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
    bot.answer_callback_query(call.id, f"{NOTIFICATION_LABELS[category]} ‚Äî —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}.")

    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
    open_notifications(call)


@bot.callback_query_handler(lambda c: c.data == "notif_archive")
def notif_archive(call):
    user_id = str(call.from_user.id)
    data = load_data()
    user = data["users"].setdefault(user_id, {})
    notes = user.get("notifications", [])
    if not notes:
        text = "–ê—Ä—Ö–∏–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—É—Å—Ç."
    else:
        lines = [f"{n['time']}: {n['text']}" for n in notes[-10:][::-1]]
        text = "\n\n".join(lines)
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="open_notifications"))
    bot.edit_message_text(text or "–ê—Ä—Ö–∏–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—É—Å—Ç.", call.message.chat.id, call.message.message_id, reply_markup=markup)



def profile_menu_markup():
    markup = types.InlineKeyboardMarkup()
    btn_topup = types.InlineKeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å üí≥", callback_data="profile_topup")
    btn_history = types.InlineKeyboardButton("–ò—Å—Ç–æ—Ä–∏—è üìú", callback_data="profile_history")
    btn_promo = types.InlineKeyboardButton("–ü—Ä–æ–º–æ–∫–æ–¥ üé´", callback_data="activate_promo_welcome")
    btn_back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="get_main_menu_markup")
    markup.row(btn_topup, btn_history)
    markup.row(btn_promo)
    markup.row(btn_back)
    return markup

def welcome_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    return markup

@bot.callback_query_handler(func=lambda call: call.data == "get_main_menu_markup")
def return_welcome(call):
    user_id = str(call.from_user.id)
    send_main_menu(user_id, call.message.chat.id)



# –ü—Ä–µ—Ñ–∏–∫—Å—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —ç–º–æ–¥–∑–∏
EMOJI_PREFIXES = {
    "0":       "ü™®",   # –ö–∞–º–µ–Ω–Ω—ã–µ
    "1":       "‚öôÔ∏è",  # –ñ–µ–ª–µ–∑–Ω—ã–µ 
    "2":       "‚ú®",   # –ó–æ–ª–æ—Ç—ã–µ
    "3":       "üíé",   # –ê–ª–º–∞–∑–Ω—ã–µ
    "4":       "üî•",   # –ù–µ–∑–µ—Ä–∏—Ç–æ–≤—ã–µ
    "event":   "üö©",  # –ò–≤–µ–Ω—Ç–æ–≤—ã–µ 
    "special": "üôä",  # –û—Å–æ–±—ã–µ 
}

@bot.callback_query_handler(func=lambda call: call.data.startswith("profile_"))
def handle_profile(call):
    user_id = str(call.from_user.id)
    data = load_data()
    if user_id not in data["users"]:
        bot.answer_callback_query(call.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    # –ø–æ–¥‚Äê–º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è
    if call.data == "tribe_join_menu":
        handle_tribe_join_menu(call)
        return
    if call.data == "profile_history":
        user = data["users"][user_id]
        history_text = "–ò—Å—Ç–æ—Ä–∏—è:\n"
        for p in user.get("purchases", []):
            history_text += f"{p['date']}: {p['item']} - {p['price']}‚ÇΩ\n"
        if user.get("referral_history"):
            history_text += "\n–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è:\n"
            for r in user["referral_history"]:
                history_text += f"{r['date']}: {r['item']} - {r['amount']}‚ÇΩ\n"
        bot.send_message(call.message.chat.id, history_text, reply_markup=profile_menu_markup())
        return
    if call.data == "profile_topup":
        bot.send_message(
            call.message.chat.id,
            "‚è≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –¥–æ–Ω–µ–π—à–µ–Ω.\n–ü–ª–∞—Ç–µ–∂–∏ –º–æ–≥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –¥–æ 48 —á–∞—Å–æ–≤.\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–Ω–µ–π—à–µ–Ω –∏ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –Ω–∏–∫:\nhttps://www.donationalerts.com/r/bedrock_valley",
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="profile_menu")
            )
        )
        return
    if call.data == "activate_promo_welcome":
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:")
        bot.register_next_step_handler(msg, process_profile_promo)
        return

    # –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ñ–∏–ª—å
    user = data["users"][user_id]
    reg_date  = user.get("registration_date", "").split()[0] or "‚Äî"
    bv_status = "–∞–∫—Ç–∏–≤–Ω–∞" if user.get("bv_plus") else "–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞"

    profile_text = (
        
    )

    # –≤—Å—Ç–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —ç–º–æ–¥–∑–∏ —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏
    emojis = ensure_user_emojis(user)
    save_data(data)

    if not any(emojis.values()):
        profile_text += "    ‚Äî –ø–æ–∫–∞ –ø—É—Å—Ç–æ\n"
    else:
        for cat_key, nums in emojis.items():
            if not nums:
                continue
            icon = EMOJI_PREFIXES.get(cat_key, "")
            if cat_key.isdigit():
                idx      = int(cat_key)
                cat_name = emoji_details[idx]["name"]
                count    = len(nums)
                profile_text += f"    {icon}{cat_name}: {count}\n"
            else:
                cat_name = EXTRA_CATEGORIES.get(cat_key, f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {cat_key}")
                values   = ", ".join(nums)
                profile_text += f"    {icon}{cat_name}: {values}\n"

    bot.send_message(
        call.message.chat.id,
        profile_text,
        parse_mode="HTML",
        reply_markup=profile_menu_markup()
    )



MARKET_WELCOME_TEXT = (
    "üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–∞—Ä–∫–µ—Ç BedrockValley! üéÆ\n"
    "–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥—ë—à—å –≤—Å—ë –¥–ª—è –≤—ã–∂–∏–≤–∞–Ω–∏—è, —Å—Ç–∏–ª—è –∏ –∫—Ä—É—Ç—ã—Ö —Ñ–∏—à–µ–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!"
)

def get_daily_gift_label(user):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ ¬´–ø–æ–¥–∞—Ä–æ–∫¬ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ,
    –∑–∞–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∞—Ä–æ–∫ —Å–µ–≥–æ–¥–Ω—è.
    –ï—Å–ª–∏ —É–∂–µ –±—Ä–∞–ª ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ.
    """
    today_str = date.today().isoformat()
    if user.get("last_daily_gift") == today_str:
        # –≤—Ä–µ–º—è –¥–æ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è
        now = datetime.now()
        tomorrow = datetime.combine(now.date() + timedelta(days=1), datetime.min.time())
        hours_left = (tomorrow - now).seconds // 3600
        return f"‚è≥ {hours_left}—á"
    else:
        return "üéÅ –ü–æ–¥–∞—Ä–æ–∫"




def market_main_markup(user_id):
    """
    –ú–µ–Ω—é –ú–∞—Ä–∫–µ—Ç–∞:
    - BV#, –ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è, –î–æ–ø. —É—Å–ª—É–≥–∏
    - –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∫–Ω–æ–ø–∫–∞ –ø–æ–¥–∞—Ä–∫–∞
    - –ù–∞–∑–∞–¥
    """
    data = load_data()
    user = data["users"].get(user_id, {})

    gift_label = get_daily_gift_label(user)

    markup = types.InlineKeyboardMarkup(row_width=3)
    btn_bv     = types.InlineKeyboardButton("BV# ‚≠ê",            callback_data="subscribe_bv_plus_market")
    btn_custom = types.InlineKeyboardButton("–£–∫—Ä–∞—à–µ–Ω–∏–µ ‚ú®", callback_data="customization")
    btn_top    = types.InlineKeyboardButton("–î–æ–ø —É—Å–ª—É–≥–∏ ‚ûï",     callback_data="top_services")
    btn_gift   = types.InlineKeyboardButton(gift_label,         callback_data="daily_gift")
    btn_back   = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥",          callback_data="get_main_menu_markup")

    # –†–∞—Å–∫–ª–∞–¥–∫–∞: 3 –∫–Ω–æ–ø–∫–∏ –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É, –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç–¥–µ–ª—å–Ω–æ, –∑–∞—Ç–µ–º –ù–∞–∑–∞–¥
    markup.add(btn_bv, btn_custom, btn_top)
    markup.add(btn_gift)
    markup.add(btn_back)
    return markup


def customization_markup():
    markup = types.InlineKeyboardMarkup()
    btn_emoji = types.InlineKeyboardButton("–≠–º–æ–¥–∑–∏ üòä", callback_data="custom_emoji")
    btn_case = types.InlineKeyboardButton("–ö–µ–π—Å—ã üì¶", callback_data="custom_case")
    btn_back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="market_main")
    markup.add(btn_emoji, btn_case)
    markup.add(btn_back)
    return markup

def top_services_markup():
    markup = types.InlineKeyboardMarkup()
    btn_unban = types.InlineKeyboardButton("–†–∞–∑–±–∞–Ω - 500‚ÇΩ üîì", callback_data="service_unban")
    btn_back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="market_main")
    markup.add(btn_unban)
    markup.add(btn_back)
    return markup

def emoji_info_markup(index):
    markup = types.InlineKeyboardMarkup()
    btn_buy = types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å üí∞", callback_data=f"buy_emoji_{index}")
    nav_buttons = []
    if index > 0:
        nav_buttons.append(types.InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"emoji_prev_{index}"))
    nav_buttons.append(types.InlineKeyboardButton(f"{index+1}/{len(emoji_details)}", callback_data="noop"))
    if index < len(emoji_details) - 1:
        nav_buttons.append(types.InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"emoji_next_{index}"))
    btn_back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="customization_back")
    markup.add(*nav_buttons)
    markup.add(btn_buy, btn_back)
    return markup

def case_info_markup(index):
    markup = types.InlineKeyboardMarkup()
    btn_buy = types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å üí∞", callback_data=f"buy_case_{index}")
    nav_buttons = []
    if index > 0:
        nav_buttons.append(types.InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"case_prev_{index}"))
    nav_buttons.append(types.InlineKeyboardButton(f"{index+1}/{len(case_details)}", callback_data="noop"))
    if index < len(case_details) - 1:
        nav_buttons.append(types.InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"case_next_{index}"))
    btn_back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="customization_back")
    markup.add(*nav_buttons)
    markup.add(btn_buy, btn_back)
    return markup

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ –≤–≤–æ–¥–∞
def cancel_pending_action(user_id):
    if user_id in user_states:
        user_states.pop(user_id, None)

@bot.callback_query_handler(func=lambda call: call.data == "cancel_input")
def cancel_input_handler(call):
    user_id = str(call.from_user.id)
    cancel_pending_action(user_id)
    bot.edit_message_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=get_main_menu_markup(user_id)
    )

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å —Å–ª—É—á–∞–π–Ω—ã–º —Å–æ–≤–µ—Ç–æ–º
def send_main_menu(user_id, chat_id):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç—Ä–∏–∫ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —Å–ª—É—á–∞–π–Ω—ã–º —Å–æ–≤–µ—Ç–æ–º.
    """
    update_streak(user_id)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∏–∫ (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å)
    
    tips = [
    "üßø –û–∫–æ –≠–Ω–¥–µ—Ä–∞ ‚Äî —Ç–≤–æ—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. –ß–µ–º –∞–∫—Ç–∏–≤–Ω–µ–µ, —Ç–µ–º –±–æ–ª—å—à–µ –Ω–∞–≥—Ä–∞–¥!",
    "üéÅ –ó–∞—Ö–æ–¥–∏ –≤ –ú–∞—Ä–∫–µ—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî —Ç–∞–º –º–æ–≥—É—Ç –ø–æ—è–≤–∏—Ç—å—Å—è –ø–æ–¥–∞—Ä–∫–∏!",
    "üî• –°–æ—Ö—Ä–∞–Ω—è–π —Å—Ç—Ä–∏–∫, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –±–æ–ª—å—à–µ –û–∫–æ–≤ –≠–Ω–¥–µ—Ä–∞ –∏ –±–æ–Ω—É—Å–æ–≤!",
    "üéØ –í—ã–ø–æ–ª–Ω—è–π –ª—é–±—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –±–æ—Ç–µ ‚Äî –∑–∞ –Ω–∏—Ö —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å üßø –û–∫–æ –≠–Ω–¥–µ—Ä–∞!",
    "üõí –ü—Ä–æ–≤–µ—Ä—å –º–∞–≥–∞–∑–∏–Ω —ç–º–æ–¥–∑–∏ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—ã–µ!",
    "üé® –ó–∞–≥–ª—è–Ω–∏ –≤ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—é ‚Äî –ø–æ—Ä–∞ –æ—Å–≤–µ–∂–∏—Ç—å —Å—Ç–∏–ª—å?",
    "üè∞ –í—Å—Ç—É–ø–∏ –≤ —Ç—Ä–∞–π–± –∏–ª–∏ —Å–æ–∑–¥–∞–π —Å–≤–æ–π ‚Äî —Ç—ã –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º!",
    "üì¢ –í–∫–ª—é—á–∏ –ù–æ–≤–æ—Å—Ç–∏ üîä –æ—Ç –±–æ—Ç–∞, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!",
    "‚≠ê BV# –¥–∞—ë—Ç –±–æ–Ω—É—Å—ã, –∫–µ–π—Å—ã –∏ –∫–∞—Å—Ç–æ–º–Ω—ã–µ —ç–º–æ–¥–∑–∏ ‚Äî –Ω–µ —É–ø—É—Å—Ç–∏ —à–∞–Ω—Å!",
    "üë• –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π –±–æ–Ω—É—Å—ã –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ!",
    "üìÖ –°—Ç—Ä–∏–∫ ‚Äî —ç—Ç–æ üî• –∏ üßø. –ù–µ —Ç–µ—Ä—è–π –ø—Ä–æ–≥—Ä–µ—Å—Å!",
    "üéâ –û–∫–æ –≠–Ω–¥–µ—Ä–∞ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–∂–µ —Å–ª—É—á–∞–π–Ω–æ. –ë—É–¥—å –∞–∫—Ç–∏–≤–µ–Ω!",
    "üîì –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∏—á–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∑–∞ üßø –û–∫–æ –≠–Ω–¥–µ—Ä–∞ ‚Äî –∫–æ–ø–∏ —Å —É–º–æ–º!",
    "üïπ –£—á–∞—Å—Ç–≤—É–π –≤ –∏–≤–µ–Ω—Ç–∞—Ö, —á—Ç–æ–±—ã –≤—ã–±–∏—Ç—å —Ä–µ–¥–∫–∏–µ —ç–º–æ–¥–∑–∏ –∏ –∫–µ–π—Å—ã!",
    "üèÜ –¢–≤–æ–π –Ω–∏–∫ –º–æ–∂–µ—Ç –ø–æ–ø–∞—Å—Ç—å –≤ —Ç–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö ‚Äî –Ω–µ —É–ø—É—Å—Ç–∏ —à–∞–Ω—Å!",
    "üåÄ –¢—ã ‚Äî —á–∞—Å—Ç—å Bedrock Valley. –°–¥–µ–ª–∞–π —Å–≤–æ—ë –∏–º—è –≥—Ä–æ–º–∫–∏–º!"
]


    chosen_tip = random.choice(tips)
    
    main_text = (
        "üéâ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üéâ\n\n"
        f"{chosen_tip}\n\n"
        "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å: @bedrockvalley"
    )
    bot.send_message(chat_id, main_text, reply_markup=get_main_menu_markup(user_id))


@bot.message_handler(commands=['tribe'])
def cmd_tribe(message):
    call = SimpleNamespace(
        message=message,
        from_user=message.from_user,
        data="community_tribes"
    )
    try:
        tribe_main_menu(call)
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é —Ç—Ä–∞–π–±–æ–≤: {e}")
        try:
            bot.send_message(message.chat.id, "üèò –ú–µ–Ω—é —Ç—Ä–∞–π–±–æ–≤")
        except Exception as err:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å fallback —Å–æ–æ–±—â–µ–Ω–∏–µ: {err}")


@bot.message_handler(commands=['streak'])
def cmd_streak(message):
    user_id = str(message.from_user.id)
    data = load_data()
    user = data["users"].get(user_id)
    if user:
        streak = user.get("login_streak", 0)
        bot.send_message(message.chat.id, f"üî• –í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: <b>{streak}</b> –¥–Ω–µ–π.", parse_mode="HTML")
    else:
        bot.send_message(message.chat.id, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
# ------------------- –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –±–ª–æ–∫ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –º–µ–Ω—é -------------------
from random import choice
from datetime import datetime

def get_admin_markup_new():
    markup = types.InlineKeyboardMarkup(row_width=1)
    btn_xp            = types.InlineKeyboardButton("üëë –î–æ–±–∞–≤–∏—Ç—å –æ–ø—ã—Ç–∞",    callback_data="admin_add_xp")
    btn_promos        = types.InlineKeyboardButton("üì£ –ü—Ä–æ–º–æ–∫–æ–¥—ã",         callback_data="admin_promos")
    btn_notifications = types.InlineKeyboardButton("üîî –û–ø–æ–≤–µ—â–µ–Ω–∏—è",        callback_data="admin_notifications")
    btn_roles         = types.InlineKeyboardButton("üé≠ –†–æ–ª–∏",              callback_data="admin_roles")
    btn_bans          = types.InlineKeyboardButton("‚õî –ë–∞–Ω—ã",              callback_data="admin_bans")
    btn_emojis        = types.InlineKeyboardButton("üóÇ –≠–º–æ–¥–∑–∏",            callback_data="admin_emoji_manage")
    markup.add(btn_xp, btn_promos, btn_notifications, btn_roles, btn_bans, btn_emojis)
    return markup

@bot.message_handler(commands=["admin"])
def admin_menu(message):
    if message.from_user.id != ADMIN_ID:
        return bot.send_message(message.chat.id, "–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
    bot.send_message(
        message.chat.id,
        "üîß <b>–ê–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é</b>:",
        parse_mode="HTML",
        reply_markup=get_admin_markup_new()
    )

# ‚Äî‚Äî‚Äî –†–∞—Å—à–∏—Ä—è–µ–º –∫–Ω–æ–ø–∫—É ¬´–î–æ–±–∞–≤–∏—Ç—å –æ–ø—ã—Ç–∞¬ª ‚Äî —Ç–µ–ø–µ—Ä—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è –≤—ã–¥–∞—á–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∏–≥—Ä–æ–∫–∞–º ‚Äî‚Äî‚Äî
@bot.callback_query_handler(lambda c: c.data == "admin_add_xp")
def admin_add_xp(call):
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥: —Å–ø–∏—Å–æ–∫ –Ω–∏–∫–æ–≤ –∏ —Å—É–º–º—É XP
    msg = bot.send_message(
        call.message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ XP –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>nick1,nick2,@user3|50</code>\n"
        "–ì–¥–µ —Å–ª–µ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é ‚Äî –Ω–∏–∫–Ω–µ–π–º—ã –∏–ª–∏ @username, —Å–ø—Ä–∞–≤–∞ ‚Äî —á–∏—Å–ª–æ XP.\n"
        "–ü—Ä–∏–º–µ—Ä: <code>player1,player2|100</code>",
        parse_mode="HTML"
    )
    bot.register_next_step_handler(msg, process_admin_add_xp)

def process_admin_add_xp(message):
    # –ó–∞—â–∏—Ç–∞: —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω
    if message.from_user.id != ADMIN_ID:
        return bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
    
    text = message.text.strip()
    if "|" not in text:
        return bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>nick1,nick2|50</code>.", parse_mode="HTML")
    
    users_part, xp_part = text.split("|", 1)
    try:
        xp_amount = int(xp_part.strip())
    except ValueError:
        return bot.send_message(message.chat.id, "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ XP –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    
    nicks = [n.strip() for n in users_part.split(",") if n.strip()]
    data = load_data()
    results = []
    
    for nick in nicks:
        uid = find_user_by_nick_or_username(nick, data)
        if not uid:
            results.append(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ¬´{nick}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            continue
        
        user = data["users"][uid]
        add_user_xp(uid, xp_amount, data)
        update_xp(uid)
        
        # —É–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
        try:
            bot.send_message(
                int(uid),
                f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞—á–∏—Å–ª–∏–ª –≤–∞–º <b>+{xp_amount} XP</b>.\n"
                f"–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –æ–ø—ã—Ç–∞: {user['xp']} XP",
                parse_mode="HTML"
            )
        except:
            pass
        
        results.append(f"‚úÖ {nick}: +{xp_amount} XP")
    
    save_data(data)

    bot.send_message(
        message.chat.id,
        "<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–¥–∞—á–∏ XP:</b>\n" + "\n".join(results),
        parse_mode="HTML"
    )

# ‚Äî‚Äî‚Äî –ü—Ä–æ–º–æ–∫–æ–¥—ã ‚Äî‚Äî‚Äî
@bot.callback_query_handler(lambda c: c.data == "admin_promos")
def admin_promos_menu(call):
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥",   callback_data="admin_add_promo"),
        types.InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="admin_view_promos"),
        types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥",     callback_data="admin_del_promo"),
        types.InlineKeyboardButton("–ù–∞—á–∏—Å–ª–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞",   callback_data="admin_credit_funds")
    )
    bot.edit_message_text(
        "üì£ <b>–ú–µ–Ω—é –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤</b>:",
        call.message.chat.id, call.message.message_id,
        parse_mode="HTML", reply_markup=markup
    )
# ‚Äî‚Äî‚Äî –ë–ª–æ–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π —Å –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ–º +10 XP –∫–∞–∂–¥–æ–º—É –ø–æ–¥–ø–∏—Å—á–∏–∫—É ‚Äî‚Äî‚Äî

@bot.callback_query_handler(lambda c: c.data == "admin_notifications")
def admin_notifications_menu(call):
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("–°–¥–µ–ª–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",    callback_data="admin_announcement"),
        types.InlineKeyboardButton("–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞",        callback_data="admin_notification_bot"),
        types.InlineKeyboardButton("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ",            callback_data="admin_notification_technical"),
        types.InlineKeyboardButton("–ù–æ–≤–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞",        callback_data="admin_notification_server")
    )
    bot.edit_message_text(
        "üîî <b>–ú–µ–Ω—é –æ–ø–æ–≤–µ—â–µ–Ω–∏–π</b>:",
        call.message.chat.id, call.message.message_id,
        parse_mode="HTML", reply_markup=markup
    )

@bot.callback_query_handler(lambda c: c.data == "admin_notification_bot")
def admin_notification_bot(call):
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç ¬´–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞¬ª:")
    bot.register_next_step_handler(msg, process_admin_notification, "bot_updates")

@bot.callback_query_handler(lambda c: c.data == "admin_notification_technical")
def admin_notification_technical(call):
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç ¬´–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π¬ª:")
    bot.register_next_step_handler(msg, process_admin_notification, "technical")

@bot.callback_query_handler(lambda c: c.data == "admin_notification_server")
def admin_notification_server(call):
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç ¬´–ù–æ–≤–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞¬ª:")
    bot.register_next_step_handler(msg, process_admin_notification, "server_news")

def process_admin_notification(message, category_key):
    data = load_data()
    hashtag_map = {
        "bot_updates": "#–±–æ—Ç",
        "technical":   "#—Ç–µ—Ö",
        "server_news": "#–Ω—å—é—Å"
    }
    tag       = hashtag_map.get(category_key, "")
    full_text = f"{message.text}\n\n{tag}"
    sent      = 0

    # –®–ª—ë–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –Ω–∞—á–∏—Å–ª—è–µ–º +10 XP –∫–∞–∂–¥–æ–º—É –ø–æ–¥–ø–∏—Å—á–∏–∫—É –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    for uid, u in data.get("users", {}).items():
        if u.get("notif_flags", 0) & FLAG_MAP.get(category_key, 0):
            try:
                bot.send_message(uid, full_text)
                add_user_xp(uid, 10, data)
                update_xp(uid)
                add_user_notification_record(data, uid, full_text)
                sent += 1
            except Exception:
                pass

    save_data(data)

    bot.send_message(
        message.chat.id,
        f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ¬´{category_key}¬ª –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–æ –ø–æ +10 XP –∫–∞–∂–¥–æ–º—É.",
        parse_mode="HTML"
    )


# ‚Äî‚Äî‚Äî –†–æ–ª–∏ ‚Äî‚Äî‚Äî
@bot.callback_query_handler(lambda c: c.data == "admin_roles")
def admin_roles_menu(call):
    data = load_data()
    roles = {
        "PRES001": "–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç",
        "MAY002":  "–ú—ç—Ä",
        "CON003":  "–ú–∏–Ω–∏—Å—Ç—Ä –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞",
        "FIN004":  "–ú–∏–Ω–∏—Å—Ç—Ä –§–∏–Ω–∞–Ω—Å–æ–≤",
        "PROK005": "–ü—Ä–æ–∫—É—Ä–æ—Ä"
    }
    text = "<b>üé≠ –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏</b>\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    for code, role in roles.items():
        owner = "<i>–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ</i>"
        for uid, u in data["users"].items():
            if u.get("role") == role:
                nick = u.get("nickname", "‚Äî")
                uname = u.get("telegram_username", "")
                owner = nick if role == "–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç" else (
                    f"<a href='https://t.me/{uname}'>{nick}</a>" if uname else nick
                )
                break
        text += f"{code}: <b>{role}</b> ‚Äî {owner}\n"
    markup = types.InlineKeyboardMarkup(row_width=3)
    markup.add(
        types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å",  callback_data="admin_add_role"),
        types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å",  callback_data="admin_modify_role"),
        types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å",   callback_data="admin_del_role")
    )
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id,
                          parse_mode="HTML", reply_markup=markup)

# ‚Äî‚Äî‚Äî –ë–∞–Ω—ã ‚Äî‚Äî‚Äî
@bot.callback_query_handler(lambda c: c.data == "admin_bans")
def admin_bans_menu(call):
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("üîí –ó–∞–±–∞–Ω–∏—Ç—å",  callback_data="admin_ban_user"),
        types.InlineKeyboardButton("üîì –†–∞–∑–±–∞–Ω–∏—Ç—å", callback_data="admin_unban_user")
    )
    bot.edit_message_text(
        "‚õî <b>–ú–µ–Ω—é –±–∞–Ω–æ–≤</b>:",
        call.message.chat.id, call.message.message_id,
        parse_mode="HTML", reply_markup=markup
    )

# ‚Äî‚Äî‚Äî –ü–æ–¥–º–µ–Ω—é ¬´–≠–º–æ–¥–∑–∏¬ª —Å –º–∞—Å—Å–æ–≤–æ–π –≤—ã–¥–∞—á–µ–π/—É–¥–∞–ª–µ–Ω–∏–µ–º –ø–æ –Ω–∏–∫–∞–º ‚Äî‚Äî‚Äî

def find_user_by_nick(nick, data):
    for uid, u in data.get("users", {}).items():
        if u.get("nickname") == nick or u.get("telegram_username") == nick:
            return uid
    return None

@bot.callback_query_handler(lambda c: c.data == "admin_emoji_manage")
def admin_emoji_manage(call):
    labels = {str(i): d["name"] for i, d in enumerate(emoji_details)}
    labels.update(EXTRA_CATEGORIES)
    markup = types.InlineKeyboardMarkup(row_width=1)
    for key, label in labels.items():
        markup.add(types.InlineKeyboardButton(label, callback_data=f"admin_emoji_cat:{key}"))
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="open_admin_menu"))
    bot.edit_message_text(
        "üóÇ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏</b>:\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        call.message.chat.id, call.message.message_id,
        parse_mode="HTML", reply_markup=markup
    )

@bot.callback_query_handler(lambda c: c.data.startswith("admin_emoji_cat:"))
def admin_emoji_cat(call):
    key = call.data.split(":", 1)[1]
    admin_id = str(call.from_user.id)
    data = load_data()
    data.setdefault("admin_ctx", {})[admin_id] = {"emoji_key": key}
    save_data(data)

    if key.isdigit():
        detail = emoji_details[int(key)]
        prompt = (
            f"üóÇ <b>{detail['name']}</b>\n"
            "–§–æ—Ä–º–∞—Ç: <code>nick1,nick2</code>|<code>¬±N</code>\n"
            "–ü—Ä–∏–º–µ—Ä: player1,player2|+3"
        )
    else:
        prompt = (
            f"üóÇ <b>{EXTRA_CATEGORIES[key]}</b>\n"
            "–§–æ—Ä–º–∞—Ç: <code>nick1,nick2</code>|<code>name1,name2,-name3</code>\n"
            "–ü—Ä–∏–º–µ—Ä: player1,player2|Firework,-Pumpkin"
        )

    msg = bot.send_message(call.message.chat.id, prompt, parse_mode="HTML")
    bot.register_next_step_handler(msg, process_admin_emoji)

def process_admin_emoji(message):
    admin_id = str(message.from_user.id)
    data = load_data()
    ctx = data.get("admin_ctx", {}).get(admin_id, {})
    key = ctx.get("emoji_key")
    if not key:
        return bot.send_message(message.chat.id, "–ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Ç–µ—Ä—è–Ω, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")

    try:
        left, right = message.text.strip().split("|", 1)
    except ValueError:
        return bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ¬´nick1,nick2|‚Ä¶¬ª")

    nicks = [n.strip() for n in left.split(",") if n.strip()]
    response = []

    if key.isdigit():
        cnt = int(right.strip())
        detail = emoji_details[int(key)]
        for nick in nicks:
            uid = find_user_by_nick(nick, data)
            if not uid:
                response.append(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ¬´{nick}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                continue
            user = data["users"].setdefault(uid, {})
            packs = ensure_user_emojis(user)[key]
            if cnt > 0:
                owned, cap = len(packs), detail["quantity"]
                to_add = min(cnt, cap - owned)
                for i in range(to_add):
                    packs.append(owned + i + 1)
                response.append(f"‚úÖ {to_add} —ç–º–æ–¥–∑–∏ –≤—ã–¥–∞–Ω–æ {nick}")
            else:
                to_remove = min(-cnt, len(packs))
                for _ in range(to_remove):
                    packs.pop()
                response.append(f"‚úÖ {to_remove} —ç–º–æ–¥–∑–∏ —É–¥–∞–ª–µ–Ω–æ —É {nick}")
    else:
        ops = [o.strip() for o in right.split(",") if o.strip()]
        for nick in nicks:
            uid = find_user_by_nick(nick, data)
            if not uid:
                response.append(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ¬´{nick}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                continue
            user = data["users"].setdefault(uid, {})
            packs = ensure_user_emojis(user)[key]
            added = removed = 0
            for op in ops:
                if op.startswith("-"):
                    name = op[1:]
                    if name in packs:
                        packs.remove(name)
                        removed += 1
                else:
                    name = op
                    if name not in packs:
                        packs.append(name)
                        added += 1
            response.append(f"üóÇ {nick}: +{added}, ‚àí{removed}")

    data["admin_ctx"].pop(admin_id, None)
    save_data(data)

    bot.send_message(message.chat.id, "\n".join(response))

# ------------------- –û–∫–Ω–æ BV# -------------------
@bot.callback_query_handler(func=lambda call: call.data in ["subscribe_bv_plus", "subscribe_bv_plus_market"])
def show_bv_plus_window(call):
    bv_description = (
    "‚ú® <b>–ü–æ–¥–ø–∏—Å–∫–∞ BV#</b> ‚Äî –≤—ã–¥–µ–ª—è–π—Å—è —Å—Ä–µ–¥–∏ –∏–≥—Ä–æ–∫–æ–≤ –∏ –ø–æ–ª—É—á–∞–π –±–æ–Ω—É—Å—ã!\n\n"
    "üí∞ <b>–¢–æ–ª—å–∫–æ —Å–µ–π—á–∞—Å:</b> –ø–µ—Ä–≤—ã–π –º–µ—Å—è—Ü ‚Äî <u>—Å–æ —Å–∫–∏–¥–∫–æ–π</u> <b>169‚ÇΩ</b>, –∑–∞—Ç–µ–º <b>199‚ÇΩ/–º–µ—Å</b>\n"
    "üéÅ <b>–ü–æ–¥–∞—Ä–æ–∫:</b> –∫–µ–π—Å <i>¬´–ö–æ–º–∞–Ω–¥–Ω—ã–π –±–ª–æ–∫¬ª</i> –∑–∞ –∫–∞–∂–¥—É—é –ø–æ–∫—É–ø–∫—É –∏–ª–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ\n"
    "üé® <b>–¶–≤–µ—Ç –Ω–∏–∫–∞:</b> –≤—ã–±–µ—Ä–∏ <u>–ª—é–±–æ–π</u> —Ü–≤–µ—Ç –Ω–∏–∫–∞ –≤ Minecraft\n"
    "üòé <b>–≠–º–æ–¥–∑–∏:</b> –¥–æ—Å—Ç—É–ø –∫–æ <u>–≤—Å–µ–º –ø–ª–∞—Ç–Ω—ã–º</u> —ç–º–æ–¥–∑–∏ (–∫—Ä–æ–º–µ –ù–µ–∑–µ—Ä–∏—Ç–æ–≤—ã—Ö) <i>–Ω–∞ –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏</i>\n"
    "üåü <b>–ü–ª—é—Å:</b> –Ω–∞–≤—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ—à—å <u>—É–Ω–∏–∫–∞–ª—å–Ω—ã–π —ç–º–æ–¥–∑–∏</u>\n"
    "‚ö° <b>–û–ø—ã—Ç:</b> –ø–æ–ª—É—á–∞–π <u>1.5√ó</u> –æ–ø—ã—Ç–∞ –∑–∞ –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è\n\n"
    "üëá –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>¬´–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É ‚≠ê¬ª</b>, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å BV# –∏ –Ω–∞—á–∞—Ç—å –≤—ã–¥–µ–ª—è—Ç—å—Å—è!"
)


    markup = types.InlineKeyboardMarkup()
    btn_subscribe = types.InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É ‚≠ê", callback_data="activate_bv_plus")
    btn_back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="market_main")
    markup.add(btn_subscribe, btn_back)

    image_path = get_path("subscription.png")

    try:
        with open(image_path, "rb") as photo:
            media = types.InputMediaPhoto(media=photo, caption=bv_description, parse_mode="HTML")
            bot.edit_message_media(
                media=media,
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=markup
            )
    except FileNotFoundError:
        bot.send_message(
            call.message.chat.id,
            bv_description + "\n\n‚ö†Ô∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            reply_markup=markup,
            parse_mode="HTML"
        )
    except Exception as e:
        print(f"[ERROR] show_bv_plus_window: {e}")
        bot.send_message(
            call.message.chat.id,
            bv_description + "\n\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–¥–ø–∏—Å–∫–∏.",
            reply_markup=markup,
            parse_mode="HTML"
        )


@bot.callback_query_handler(func=lambda call: call.data == "activate_bv_plus")
def activate_bv_plus(call):
    user_id = str(call.from_user.id)
    data = load_data()
    if user_id not in data["users"]:
        bot.answer_callback_query(call.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    user = data["users"][user_id]
    if user.get("bv_plus"):
        bot.send_message(call.message.chat.id, "BV# —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞!", reply_markup=get_main_menu_markup(str(call.from_user.id)))
        return
    price = 169
    if user.get("balance", 0) < price:
        bot.send_message(call.message.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ BV#.", reply_markup=get_main_menu_markup(str(call.from_user.id)))
        return
    user["balance"] -= price
    user["bv_plus"] = True
    user["bv_plus_expiry"] = (datetime.now() + timedelta(days=30)).strftime("%d.%m.%Y %H:%M:%S")
    if "purchases" not in user:
        user["purchases"] = []
    user["purchases"].append({
        "item": "BV# –ø–æ–¥–ø–∏—Å–∫–∞ (–ø–µ—Ä–≤—ã–π –º–µ—Å—è—Ü —Å–æ —Å–∫–∏–¥–∫–æ–π)",
        "price": price,
        "date": datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    })
    save_data(data)
    bot.send_message(
        call.message.chat.id,
        f"BV# —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {user['bv_plus_expiry']}.",
        reply_markup=get_main_menu_markup(str(call.from_user.id))
    )


# ------------------- –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç–º–æ–¥–∑–∏ -------------------
def get_path(filename):
    return os.path.join(os.path.dirname(__file__), filename)

def show_emoji_info(chat_id, message_id, index):
    emoji_item = emoji_details[index]

    text = (
        f"üåü <b>{emoji_item['name']}</b>\n"
        f"üí∞ –¶–µ–Ω–∞: <b>{emoji_item['price']}</b> –º–æ–Ω–µ—Ç\n"
        f"üì¶ –ö–æ–ª-–≤–æ —ç–º–æ–¥–∑–∏: <b>{emoji_item['quantity']}</b>\n"
        f"‚ÑπÔ∏è {emoji_item['description']}"
    )

    image_path = get_path(emoji_item["image"])

    try:
        with open(image_path, "rb") as photo:
            bot.send_photo(chat_id, photo, caption=text, parse_mode="HTML", reply_markup=emoji_info_markup(index))
    except FileNotFoundError:
        bot.send_message(chat_id, text + "\n\n‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", parse_mode="HTML", reply_markup=emoji_info_markup(index))


# ------------------- –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–µ–π—Å–µ -------------------

def show_case_info(chat_id, message_id, index):
    case_item = case_details[index]

    text = (
        f"üì¶ <b>{case_item['name']}</b>\n"
        f"üí∞ –¶–µ–Ω–∞: <b>{case_item['price']}‚ÇΩ</b>\n"
        f"üéÅ –®–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å 2 —ç–º–æ–¥–∑–∏: <b>{case_item['chance']}%</b>\n"
        f"‚ÑπÔ∏è {case_item['description']}\n\n"
        "–ù–∞–∂–º–∏—Ç–µ <b>–ö—É–ø–∏—Ç—å</b>, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å."
    )

    image_path = get_path(case_item["image"])

    try:
        with open(image_path, 'rb') as photo:
            media = types.InputMediaPhoto(photo, caption=text, parse_mode="HTML")
            bot.edit_message_media(
                chat_id=chat_id,
                message_id=message_id,
                media=media,
                reply_markup=case_info_markup(index)
            )
    except FileNotFoundError:
        safe_edit_message_text(text + "\n\n‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", chat_id, message_id, reply_markup=case_info_markup(index))

# ------------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ -------------------
@bot.message_handler(commands=["start"])
def handle_start(message):
    user_id = str(message.from_user.id)
    data = load_data()
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:
    if user_id in data["users"]:
        user = data["users"][user_id]
        if user.get("approved", False):
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç—Ä–∏–∫–∞ –∏ —Å–ª—É—á–∞–π–Ω—ã–º —Å–æ–≤–µ—Ç–æ–º)
            send_main_menu(user_id, message.chat.id)
            return
        else:
            bot.send_message(
                message.chat.id,
                "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            )
            return
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ‚Äì —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:
    if message.from_user.username:
        for rec in data["invalid_registrations"]:
            if rec.get("telegram_username", "").lower() == message.from_user.username.lower():
                bot.send_message(
                    message.chat.id,
                    "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–π –∏ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞."
                )
                return
    bot.send_message(
        message.chat.id,
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –≤–µ—Ä—Å–∏—é {BOT_VERSION}. \n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
    )
    user_states[user_id] = {"state": "awaiting_nickname", "temp_data": {}}

def register_new_user(user_id, info):
    data = load_data()
    # –¥–æ–ø—É—Å—Ç–∏–º, info["age"] —É–∂–µ –µ—Å—Ç—å
    if info.get("age", 0) < 18:
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
        data.setdefault("minors", {})[user_id] = info
    else:
        # —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–µ ‚Äî –≤ data["users"]
        data.setdefault("users", {})[user_id] = info
    save_data(data)


@bot.message_handler(func=lambda message: str(message.from_user.id) in user_states and user_states[str(message.from_user.id)].get("state") == "awaiting_nickname")
def handle_nickname(message):
    user_id = str(message.from_user.id)
    nickname = message.text.strip()
    if not valid_nickname(nickname):
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    user_states[user_id]["temp_data"]["nickname"] = nickname
    user_states[user_id]["state"] = "awaiting_age"
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ–º):")

@bot.message_handler(func=lambda message: str(message.from_user.id) in user_states and 
                     user_states[str(message.from_user.id)].get("state") == "awaiting_age")
def handle_age(message):
    user_id = str(message.from_user.id)
    try:
        age = int(message.text.strip())
        if age > 99:
            bot.send_message(message.chat.id, "–í–æ–∑—Ä–∞—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 99. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç:")
            return
        if age < 14:
            # –î–ª—è –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏—Ö: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –∏ —Ñ–ª–∞–≥, –∑–∞—Ç–µ–º –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä:
            user_states[user_id]["temp_data"]["age"] = age
            user_states[user_id]["temp_data"]["is_minor"] = True
            user_states[user_id]["state"] = "awaiting_minor_choice"
            markup = types.InlineKeyboardMarkup()
            btn_purchase = types.InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–æ—Ö–æ–¥ –∑–∞ 250‚ÇΩ", callback_data="activate_minor_access")
            btn_skip = types.InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_minor")
            markup.add(btn_purchase, btn_skip)
            bot.send_message(
                message.chat.id,
                ("–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–π.\n"
                 "–í —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Ç–∞–∫–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.\n\n"
                 "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø (–∏–≥—Ä–∞, –º–∞—Ä–∫–µ—Ç, –ø–æ–∫—É–ø–∫–∏ –∏ —Ç.–¥.), –æ—Ñ–æ—Ä–º–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ö–æ–¥ –∑–∞ 250‚ÇΩ.\n\n"
                 "–ù–∞–∂–º–∏—Ç–µ ¬´–û—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–æ—Ö–æ–¥ –∑–∞ 250‚ÇΩ¬ª –¥–ª—è –æ–ø–ª–∞—Ç—ã –∏–ª–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º."),
                reply_markup=markup
            )
            return
    except ValueError:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞.")
        return
    # –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç 14 –ª–µ—Ç:
    user_states[user_id]["temp_data"]["age"] = age
    user_states[user_id]["state"] = "awaiting_referral"
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    btn_skip = types.KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
    markup.add(btn_skip)
    bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ù–∏–∫ Minecraft –∏–ª–∏ @–Æ–∑–µ—Ä–Ω–µ–π–º) —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å  –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "activate_minor_access")
def activate_minor_access(call):
    user_id = str(call.from_user.id)
    data = load_data()
    if user_id not in data["users"]:
        data["users"][user_id] = user_states[user_id]["temp_data"]
        data["users"][user_id].setdefault("balance", 0)
        data["users"][user_id].setdefault("purchases", [])
    user = data["users"][user_id]
    price = 250
    if user.get("balance", 0) < price:
        bot.answer_callback_query(call.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø—Ä–æ—Ö–æ–¥–∞.")
        return
    user["balance"] -= price
    user["full_access"] = True  # –¢–µ–ø–µ—Ä—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø
    user.setdefault("purchases", []).append({
         "item": "–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø—Ä–æ—Ö–æ–¥–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ (–Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–π)",
         "price": price,
         "date": datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    })
    save_data(data)
    bot.answer_callback_query(call.id, "–ü—Ä–æ—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø.")
    # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ‚Äì –∑–∞–ø—Ä–æ—Å—É —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    user_states[user_id]["temp_data"]["full_access"] = True
    user_states[user_id]["state"] = "awaiting_referral"
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    btn_skip = types.KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
    markup.add(btn_skip)
    bot.send_message(
        call.message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ù–∏–∫, @–Æ–∑–µ—Ä–Ω–µ–π–º) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "skip_minor")
def skip_minor(call):
    user_id = str(call.from_user.id)
    bot.answer_callback_query(call.id, "–í—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º.")
    user_states[user_id]["state"] = "awaiting_referral"
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    btn_skip = types.KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
    markup.add(btn_skip)
    bot.send_message(
        call.message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ù–∏–∫, @–Æ–∑–µ—Ä–Ω–µ–π–º) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
        reply_markup=markup
    )

@bot.message_handler(
    func=lambda message: str(message.from_user.id) in user_states
    and user_states[str(message.from_user.id)].get("state") == "awaiting_referral"
)
def handle_referral(message):
    user_id = str(message.from_user.id)
    text    = message.text.strip()
    temp    = user_states[user_id]["temp_data"]

    # —É–∂–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    user_nick  = temp.get("nickname", "").lower()
    user_uname = message.from_user.username.lower() if message.from_user.username else ""

    # 1) –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∞–º –≤–≤–æ–¥ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    if text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        temp["referral"] = None
    else:
        if "," in text:
            nick_part, uname_part = [p.strip() for p in text.split(",",1)]
            if uname_part.startswith("@"):
                uname_part = uname_part[1:]
            # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É–∫–∞–∑–∞–ª –ª–∏ —Å–∞–º —Å–µ–±—è
            if nick_part.lower() == user_nick or uname_part.lower() == user_uname:
                return bot.send_message(
                    message.chat.id,
                    "–ù–µ–ª—å–∑—è —É–∫–∞–∑–∞—Ç—å —Å–µ–±—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞! –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–∏–∫ –∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'."
                )
            temp["referral"] = {"nickname": nick_part, "telegram_username": uname_part}
        else:
            inp = text.lower()
            if inp == user_nick or inp == user_uname:
                return bot.send_message(
                    message.chat.id,
                    "–ù–µ–ª—å–∑—è —É–∫–∞–∑–∞—Ç—å —Å–µ–±—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞! –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–∏–∫ –∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'."
                )
            temp["referral"] = text

    bot.send_message(
        message.chat.id,
        "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞.",
        reply_markup=types.ReplyKeyboardRemove()
    )

    # 2) –¥–æ–ø. –ø–æ–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    temp["telegram_username"]  = message.from_user.username or ""
    temp["registration_date"]  = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    temp.setdefault("balance", 0)
    temp.setdefault("purchases", [])
    temp.setdefault("promo_codes_used", [])
    temp.setdefault("emojis", {})
    temp.setdefault("xp", 0)  # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º xp
    temp.setdefault("level", 1)

    data = load_data()

    # 3) –≤—ã–¥–∞—ë–º xp –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    ref = temp.get("referral")
    if ref:
        # –Ω–æ–≤–∏—á–∫—É +100 xp
        temp["xp"] += 100
        # –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π +150 xp
        inviter_id = None
        if isinstance(ref, dict):
            # –∏—â–µ–º –ø–æ telegram_username –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º—É
            for uid, u in data.get("users", {}).items():
                if (u.get("telegram_username","").lower() == ref["telegram_username"].lower()
                    or u.get("nickname","").lower() == ref["nickname"].lower()):
                    inviter_id = uid
                    break
        else:
            # —Ç–æ–ª—å–∫–æ –Ω–∏–∫ —É–∫–∞–∑–∞–Ω
            for uid, u in data.get("users", {}).items():
                if u.get("nickname","").lower() == str(ref).lower():
                    inviter_id = uid
                    break
        if inviter_id:
            inviter = data["users"][inviter_id]
            add_user_xp(inviter_id, 150, data)
            update_xp(inviter_id)
            # –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫—É–ø–æ–∫/–Ω–∞–≥—Ä–∞–¥:
            inviter.setdefault("purchases", []).append({
                "item": f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ {temp['nickname']}",
                "price": 0,
                "date": datetime.now().strftime("%d.%m.%Y %H:%M:%S")
            })

    # 4) —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data.setdefault("users", {})[user_id] = temp

    # 5) –¥–∞–ª–µ–µ ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ / –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ minors –∏–ª–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
    if temp.get("is_minor") and not temp.get("full_access"):
        save_data(data)
        bot.send_message(
            message.chat.id,
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º. –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é.",
            reply_markup=minor_get_main_menu_markup(user_id)
        )
    else:
        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏
        referral_text = (
            f"{ref['nickname']} (@{ref['telegram_username']})"
            if isinstance(ref, dict) else (ref or "–ù–µ—Ç")
        )
        data.setdefault("registration_requests", []).append({
            "user_id":          user_id,
            "nickname":         temp["nickname"],
            "age":              temp["age"],
            "registration_date": temp["registration_date"],
            "referral":         referral_text
        })
        # —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—å –≥–∏–¥
        data["users"][user_id]["requires_guide"] = True
        save_data(data)

        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–Ω–æ–ø–∫—É –≥–∏–¥–∞
        bot.send_message(
            message.chat.id,
            "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ü—Ä–æ–π–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–∏–π –≥–∏–¥ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:",
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton("üìñ –ü—Ä–æ–π—Ç–∏ –≥–∏–¥", callback_data="open_guide")
            )
        )
        # —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        admin_kb = types.InlineKeyboardMarkup()
        admin_kb.row(
            types.InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å ‚úÖ", callback_data=f"approve_{user_id}"),
            types.InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å ‚ùå", callback_data=f"reject_{user_id}")
        )
        bot.send_message(
            ADMIN_ID,
            (
                f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n"
                f"–ù–∏–∫–Ω–µ–π–º: {temp['nickname']}\n"
                f"–í–æ–∑—Ä–∞—Å—Ç: {temp['age']}\n"
                f"–Æ–∑–µ—Ä–Ω–µ–π–º: {temp['telegram_username']}\n"
                f"–†–µ—Ñ–µ—Ä–∞–ª: {referral_text}"
            ),
            reply_markup=admin_kb
        )

    user_states.pop(user_id, None)
    save_data(data)


@bot.callback_query_handler(func=lambda call: call.data.startswith("approve_") or call.data.startswith("reject_"))
def handle_admin_approval(call):
    admin_id = str(call.from_user.id)
    if int(admin_id) != ADMIN_ID:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –ø—Ä–∞–≤.")
        return
    action, user_id = call.data.split("_", 1)
    data = load_data()
    if user_id not in data["users"]:
        bot.answer_callback_query(call.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    if action == "approve":
        user_data = data["users"][user_id]
        user_data["balance"] = user_data.get("balance", 0)
        user_data["purchases"] = user_data.get("purchases", [])
        ref_nick = user_data.get("referral")
        if isinstance(ref_nick, dict):
            ref_nick_str = ref_nick.get("nickname", "")
        else:
            ref_nick_str = ref_nick
        if ref_nick_str:
            for uid, u in data["users"].items():
                if u.get("nickname", "").lower() == ref_nick_str.lower() and u.get("approved", False):
                    # –ù–æ–≤—ã–π –∏–≥—Ä–æ–∫ –ø–æ–ª—É—á–∞–µ—Ç 10‚ÇΩ
                    user_data["balance"] += 10
                    # –†–µ—Ñ–µ—Ä–∞–ª –ø–æ–ª—É—á–∞–µ—Ç 15‚ÇΩ
                    u["balance"] = u.get("balance", 0) + 15
                    user_data["purchases"].append({
                        "item": "–ë–æ–Ω—É—Å –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é (–Ω–æ–≤—ã–π –∏–≥—Ä–æ–∫)",
                        "price": 10,
                        "date": datetime.now().strftime("%d.%m.%Y %H:%M:%S")
                    })
                    u.setdefault("purchases", []).append({
                        "item": f"–ë–æ–Ω—É—Å –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: {user_data['nickname']}",
                        "price": 15,
                        "date": datetime.now().strftime("%d.%m.%Y %H:%M:%S")
                    })
                    bot.send_message(uid, f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø—Ä–∏–≤–µ–ª–∏ –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ {user_data['nickname']}! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 15‚ÇΩ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞.")
                    break
        user_data["approved"] = True
        data["registration_requests"] = [req for req in data["registration_requests"] if req["user_id"] != user_id]
        save_data(data)
        welcome_text = (
            "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Bedrock Valley! üòä\n\n"
            "üìñ –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É Bedrock Valley\n\n"
            "üîπ –ö–∞–∫ –∑–∞–π—Ç–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:\n1Ô∏è‚É£ –ü–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –≤ –Ω–∞—à—É –±–µ—Å–µ–¥—É: https://t.me/+5eOzp1m8MbE5MWEy\n"
            "2Ô∏è‚É£ –ü–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–∏–∫ –≤ –ø–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª #–ù–∞—á–∞–ª–æ\n"
            "3Ô∏è‚É£ –ß–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –≤–∞—Å –¥–æ–±–∞–≤—è—Ç –≤ –≤–∞–π—Ç–ª–∏—Å—Ç, –∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø–æ IP –∏ –ø–æ—Ä—Ç—É –∏–∑ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n"
            "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\nüîó –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å: @bedrockvalley"
        )
        bot.send_message(int(user_id), welcome_text, reply_markup=get_main_menu_markup(str(call.from_user.id)))
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
        bot.answer_callback_query(call.id, "–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞.")
    elif action == "reject":
        data["users"].pop(user_id, None)
        data["registration_requests"] = [req for req in data["registration_requests"] if req["user_id"] != user_id]
        save_data(data)
        bot.send_message(int(user_id), "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
        bot.answer_callback_query(call.id, "–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")

@bot.message_handler(commands=["help"])
def handle_help(message):
    user_id = str(message.from_user.id)
    data = load_data()
    if user_id in data["users"] and data["users"][user_id].get("approved", False):
        help_text = (
            "üìñ –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É Bedrock Valley\n\n"
            "üîπ –ö–∞–∫ –∑–∞–π—Ç–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:\n1Ô∏è‚É£ –ü–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –≤ –Ω–∞—à—É –±–µ—Å–µ–¥—É: https://t.me/+5eOzp1m8MbE5MWEy\n"
            "2Ô∏è‚É£ –ü–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–∏–∫ –≤ –ø–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª #–ù–∞—á–∞–ª–æ\n"
            "3Ô∏è‚É£ –ß–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –≤–∞—Å –¥–æ–±–∞–≤—è—Ç –≤ –≤–∞–π—Ç–ª–∏—Å—Ç, –∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø–æ IP –∏ –ø–æ—Ä—Ç—É –∏–∑ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n"
            "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        bot.send_message(message.chat.id, help_text)
    else:
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start.")

# üì¶ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
def send_or_edit_message(bot, call, text, markup):
    try:
        if call.message.photo:
            bot.edit_message_caption(call.message.chat.id, call.message.message_id,
                                     caption=text, reply_markup=markup)
        else:
            bot.edit_message_text(text, call.message.chat.id, call.message.message_id,
                                  reply_markup=markup)
    except Exception:
        bot.send_message(call.message.chat.id, text, reply_markup=markup)

# üìÇ –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
MARKET_WELCOME_TEXT = (
    "üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–∞—Ä–∫–µ—Ç BedrockValley! üéÆ\n"
    "–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥—ë—à—å –≤—Å—ë –¥–ª—è –≤—ã–∂–∏–≤–∞–Ω–∏—è, —Å—Ç–∏–ª—è –∏ –∫—Ä—É—Ç—ã—Ö —Ñ–∏—à–µ–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!"
)

CUSTOMIZATION_TEXT = "–ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è (–≠–º–æ–¥–∑–∏ –∏ –ö–µ–π—Å—ã):"
MARKET_SERVICES_TEXT = "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏:"

# üß≠ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
# –ü—Ä–µ—Ñ–∏–∫—Å—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —ç–º–æ–¥–∑–∏
EMOJI_PREFIXES = {
    "0":       "ü™®",   # –ö–∞–º–µ–Ω–Ω—ã–µ
    "1":       "‚öôÔ∏è",  # –ñ–µ–ª–µ–∑–Ω—ã–µ 
    "2":       "‚ú®",   # –ó–æ–ª–æ—Ç—ã–µ
    "3":       "üíé",   # –ê–ª–º–∞–∑–Ω—ã–µ
    "4":       "üî•",   # –ù–µ–∑–µ—Ä–∏—Ç–æ–≤—ã–µ
    "event":   "üö©",  # –ò–≤–µ–Ω—Ç–æ–≤—ã–µ 
    "special": "üôä",  # –û—Å–æ–±—ã–µ 
}

@bot.callback_query_handler(func=lambda call: call.data.startswith("menu_"))
def handle_main_menu(call):
    user_id = str(call.from_user.id)
    data    = load_data()
    user    = data["users"].get(user_id)
    if not user or (not user.get("approved") and not user.get("is_minor")):
        return bot.answer_callback_query(call.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")

    if call.data == "menu_profile":
        # ‚îÄ‚îÄ‚îÄ –°–±–æ—Ä–∫–∞ —à–∞–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        reg_date   = user.get("registration_date", "").split()[0] or "‚Äî"
        bv_status  = "–∞–∫—Ç–∏–≤–Ω–∞" if user.get("bv_plus") else "–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞"
        role       = user.get("role", "–∏–≥—Ä–æ–∫")
        tribe      = user.get("tribe", "–ù–µ —Å–æ—Å—Ç–æ–∏—Ç")
        max_streak = user.get("max_login_streak", user.get("login_streak", 0))
        eyes       = user.get("ender_eyes", 0)

        # ‚îÄ‚îÄ‚îÄ –†–∞—Å—á—ë—Ç —É—Ä–æ–≤–Ω—è –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        level      = user.get("level", 1)
        xp_current = user.get("xp", 0)
        # –≤–º–µ—Å—Ç–æ 100 + level*25 –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é-–ø–æ—Ä–æ–≥
        xp_needed  = xp_to_next(level)
        filled     = int(min(xp_current, xp_needed) / xp_needed * 10)
        bar        = "[" + "üü©" * filled + "‚¨ú" * (10 - filled) + "]"

        # ‚îÄ‚îÄ‚îÄ –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        profile_text = (
            "üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"‚≠ê <b>BV#</b>: {bv_status}\n"
            f"üí∞ <b>–ë–∞–ª–∞–Ω—Å</b>: {user.get('balance',0)}‚ÇΩ\n"
            f"üè∑Ô∏è <b>–ù–∏–∫</b>: {user.get('nickname','‚Äî')}\n"
            f"üôç <b>–†–æ–ª—å</b>: {role}\n"
            f"üè∞ <b>–¢—Ä–∞–π–±</b>: {tribe}\n"
            f"üî• <b>–ú–∞–∫—Å. —Å—Ç—Ä–∏–∫</b>: {max_streak} –¥–Ω.\n"
            f"üßø <b>–û–∫–æ –≠–Ω–¥–µ—Ä–∞</b>: {eyes}\n"
            f"üìÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b>: {reg_date}\n\n"
            # ‚îÄ‚îÄ‚îÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø–æ—Ä–æ–≥ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            f"üèÜ <b>LVL</b>: {level} ({xp_current}/{xp_needed})\n"
            f"{bar}\n\n"
            f"üòä <b>–≠–º–æ–¥–∑–∏</b>:\n"
        )

        # ‚îÄ‚îÄ‚îÄ –í—Å—Ç–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —ç–º–æ–¥–∑–∏ —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏ –∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        emojis = ensure_user_emojis(user)
        save_data(data)

        if not any(emojis.values()):
            profile_text += "    ‚Äî –ø–æ–∫–∞ –ø—É—Å—Ç–æ\n"
        else:
            for cat_key, items in emojis.items():
                if not items:
                    continue
                icon = EMOJI_PREFIXES.get(cat_key, "")
                if cat_key.isdigit():
                    name     = emoji_details[int(cat_key)]["name"]
                    nums_str = ", ".join(str(n) for n in sorted(items))
                    profile_text += f"    {icon}{name}: {nums_str}\n"
                else:
                    name     = EXTRA_CATEGORIES.get(cat_key, cat_key)
                    vals     = ", ".join(items)
                    profile_text += f"    {icon}{name}: {vals}\n"

        bot.send_message(
            call.message.chat.id,
            profile_text,
            parse_mode="HTML",
            reply_markup=profile_menu_markup()
        )
        return

    # ‚îÄ‚îÄ‚îÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö menu_*‚Ä¶
    bot.edit_message_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        call.message.chat.id,
        call.message.message_id,
        parse_mode="HTML",
        reply_markup=get_main_menu_markup(user_id)
    )


@bot.callback_query_handler(func=lambda call: call.data == "back_main")
def handle_back(call):
    user_id = str(call.from_user.id)
    send_main_menu(user_id, call.message.chat.id)

# üõçÔ∏è –ú–∞—Ä–∫–µ—Ç –∏ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è
@bot.callback_query_handler(func=lambda call: call.data in [
    "market_main", "customization", "customization_back", "custom_emoji", "custom_case", "market_services"
])
def handle_market_navigation(call):
    if call.data == "market_main":
        user_id = str(call.from_user.id)
        send_or_edit_message(bot, call, MARKET_WELCOME_TEXT, market_main_markup(user_id))

    elif call.data in ["customization", "customization_back"]:
        send_or_edit_message(bot, call, CUSTOMIZATION_TEXT, customization_markup())

    elif call.data == "custom_emoji":
        show_emoji_info(call.message.chat.id, call.message.message_id, 0)

    elif call.data == "custom_case":
        show_case_info(call.message.chat.id, call.message.message_id, 0)

    elif call.data == "market_services":
        send_or_edit_message(bot, call, MARKET_SERVICES_TEXT, top_services_markup())

# ‚Äî‚Äî‚Äî –ö–æ–º–∞–Ω–¥–∞ /convert_eyes_xp ‚Äî –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç 80% Ender Eyes –≤ XP ‚Äî‚Äî‚Äî
@bot.message_handler(commands=["convert_eyes_xp"])
def admin_convert_eyes_xp(message):
    # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É
    if message.from_user.id != ADMIN_ID:
        return bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
    
    data = load_data()
    converted_count = 0

    for uid, u in data.get("users", {}).items():
        eyes = u.get("ender_eyes", 0)
        if eyes <= 0:
            continue

        # –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º 80% Ender Eyes
        to_convert = int(eyes * 0.8)
        xp_gain    = to_convert * 10

        # —É–º–µ–Ω—å—à–∞–µ–º Ender Eyes –∏ –¥–æ–±–∞–≤–ª—è–µ–º XP
        u["ender_eyes"] = eyes - to_convert
        add_user_xp(uid, xp_gain, data)
        update_xp(uid)

        # —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            bot.send_message(
                int(uid),
                "üîÑ –í —Å–≤—è–∑–∏ —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –±–∞–ª–∞–Ω—Å–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞ "
                "–±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è:\n"
                f"‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {to_convert} üßø –≠–Ω–¥–µ—Ä–∞\n"
                f"‚Ä¢ –ù–∞—á–∏—Å–ª–µ–Ω–æ: {xp_gain} XP"
            )
        except:
            pass

        converted_count += 1

    save_data(data)

    # –æ—Ç—á—ë—Ç –∞–¥–º–∏–Ω—É
    bot.send_message(
        message.chat.id,
        f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Ender Eyes –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
        f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {converted_count}."
    )


@bot.callback_query_handler(func=lambda call: call.data == "top_services")
def handle_top_services(call):
    try:
        if call.message.photo:
            bot.edit_message_caption(call.message.chat.id, call.message.message_id,
                                     caption="–î–æ–ø —É—Å–ª—É–≥–∏:", reply_markup=top_services_markup())
        else:
            bot.edit_message_text("–î–æ–ø —É—Å–ª—É–≥–∏:", call.message.chat.id, call.message.message_id,
                                  reply_markup=top_services_markup())
    except Exception:
        bot.send_message(call.message.chat.id, "–î–æ–ø —É—Å–ª—É–≥–∏:", reply_markup=top_services_markup())

@bot.callback_query_handler(func=lambda call: call.data.startswith("emoji_prev_") or call.data.startswith("emoji_next_"))
def handle_emoji_navigation(call):
    parts = call.data.split("_")
    direction = parts[1]
    current_index = int(parts[2])
    if direction == "prev" and current_index > 0:
        new_index = current_index - 1
    elif direction == "next" and current_index < len(emoji_details) - 1:
        new_index = current_index + 1
    else:
        new_index = current_index
    show_emoji_info(call.message.chat.id, call.message.message_id, new_index)

@bot.callback_query_handler(func=lambda call: call.data.startswith("buy_emoji_"))
def handle_buy_emoji(call):
    user_id = str(call.from_user.id)
    index = int(call.data.split("_")[-1])
    user_states.setdefault(user_id, {})["buy_emoji_category"] = index
    detail = emoji_details[index]
    msg = bot.send_message(call.message.chat.id,
                           f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —ç–º–æ–¥–∑–∏ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"{detail['name']}\" (1-{detail['quantity']}):")
    bot.register_next_step_handler(msg, process_emoji_choice)

@bot.callback_query_handler(func=lambda call: call.data.startswith("case_prev_") or call.data.startswith("case_next_"))
def handle_case_navigation(call):
    parts = call.data.split("_")
    direction = parts[1]
    current_index = int(parts[2])
    if direction == "prev" and current_index > 0:
        new_index = current_index - 1
    elif direction == "next" and current_index < len(case_details) - 1:
        new_index = current_index + 1
    else:
        new_index = current_index
    show_case_info(call.message.chat.id, call.message.message_id, new_index)

# ----------------------------
# 1) –ü–æ–∫—É–ø–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏
# ----------------------------
@bot.message_handler(func=lambda m: "buy_emoji_category" in user_states.get(str(m.from_user.id), {}))
def process_emoji_choice(message):
    user_id = str(message.from_user.id)
    state   = user_states[user_id]
    cat_idx = state.pop("buy_emoji_category")
    text    = message.text.strip()

    if not text.isdigit():
        state["buy_emoji_category"] = cat_idx
        return bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

    choice_num = int(text)
    detail     = emoji_details[cat_idx]
    total      = detail["quantity"]
    if not (1 <= choice_num <= total):
        state["buy_emoji_category"] = cat_idx
        return bot.send_message(
            message.chat.id,
            f"–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ {total}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
        )

    data   = load_data()
    user   = data["users"].setdefault(user_id, {})
    emojis = ensure_user_emojis(user)

    cat_key = str(cat_idx)
    if choice_num in emojis.get(cat_key, []):
        return bot.send_message(
            message.chat.id,
            f"–≠–º–æ–¥–∑–∏ ‚Ññ{choice_num} —É–∂–µ –µ—Å—Ç—å –≤ ¬´{detail['name']}¬ª."
        )

    # –≤—ã—á–∏—Å–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å —É—á—ë—Ç–æ–º BV#
    cost = detail["price"]
    if user.get("bv_plus") and cat_idx != 4:
        cost = 0

    if user.get("balance", 0) < cost:
        return bot.send_message(message.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")

    # —Å–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏ –≤—ã–¥–∞—ë–º —ç–º–æ–¥–∑–∏
    user["balance"] -= cost
    emojis.setdefault(cat_key, []).append(choice_num)
    user.setdefault("purchases", []).append({
        "item":  f"–ö—É–ø–ª–µ–Ω–æ {detail['name']} ‚Ññ{choice_num}",
        "price": cost,
        "date":  datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    })

    # –Ω–∞—á–∏—Å–ª—è–µ–º XP —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ ‚Äú–±–µ—Å–ø–ª–∞—Ç–Ω–∞—è‚Äù —ç–º–æ–¥–∑–∏
    if cost > 0:
        add_user_xp(user_id, cost, data)
        update_xp(user_id)
        bot.send_message(
            message.chat.id,
            f"‚úÖ –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ {detail['name']} ‚Ññ{choice_num} –∑–∞ {cost}‚ÇΩ.\nü•á +{cost} XP –∑–∞ –ø–æ–∫—É–ø–∫—É!"
        )
    else:
        bot.send_message(
            message.chat.id,
            f"‚úÖ –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ {detail['name']} ‚Ññ{choice_num} –±–µ—Å–ø–ª–∞—Ç–Ω–æ (BV#).\nXP –Ω–µ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è."
        )

    save_data(data)

    save_data(data)
    update_xp(user_id)

    # —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    nickname = user.get("nickname", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
    bot.send_message(
        ADMIN_ID,
        f"–ü–æ–∫—É–ø–∫–∞ —ç–º–æ–¥–∑–∏: {nickname} –∫—É–ø–∏–ª {detail['name']} ‚Ññ{choice_num} –∑–∞ {cost}‚ÇΩ."
    )


# ----------------------------
# 2) –ü–æ–∫—É–ø–∫–∞ –∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞
# ----------------------------
@bot.callback_query_handler(func=lambda call: call.data.startswith("buy_case_"))
def handle_buy_case(call):
    user_id = str(call.from_user.id)
    data    = load_data()
    if user_id not in data["users"]:
        return bot.answer_callback_query(call.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")

    index = int(call.data.split("_")[-1])
    case  = case_details[index]
    user  = data["users"][user_id]

    if user.get("balance", 0) < case["price"]:
        return bot.answer_callback_query(call.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")

    # —Å–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏
    user["balance"] -= case["price"]
    user.setdefault("purchases", []).append({
        "item":  f"–ö—É–ø–ª–µ–Ω {case['name']}",
        "price": case["price"],
        "date":  datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    })

    # –Ω–∞—á–∏—Å–ª—è–µ–º XP —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–µ–π—Å –Ω–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π (–∑–¥–µ—Å—å –∫–µ–π—Å—ã –≤—Å–µ–≥–¥–∞ –ø–ª–∞—Ç–Ω—ã–µ,
    # –Ω–æ –Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–º–æ –∏–ª–∏ –±—É–¥—É—â–∏—Ö —Ñ–∏—á)
    if case["price"] > 0:
        add_user_xp(user_id, case["price"], data)
        update_xp(user_id)
        xp_text = f"\nü•á +{case['price']} XP –∑–∞ –ø–æ–∫—É–ø–∫—É –∫–µ–π—Å–∞!"
    else:
        xp_text = "\nXP –Ω–µ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è (–ø—Ä–æ–º–æ/–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–µ–π—Å)."

    save_data(data)

    save_data(data)
    update_xp(user_id)

    bot.answer_callback_query(call.id, "–ö–µ–π—Å –∫—É–ø–ª–µ–Ω!")

    # –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    possible = []
    if index == 0: possible = [0,1]
    elif index == 1: possible = [1,2]
    elif index == 2: possible = [3,4]

    if possible:
        cat_guar = choice(possible)
        awarded  = award_emoji(user_id, str(cat_guar))
        main_res = f"{emoji_details[cat_guar]['name']} ‚Ññ{awarded}" if awarded else "–Ω–µ—Ç –Ω–æ–≤—ã—Ö —ç–º–æ–¥–∑–∏"
    else:
        main_res = "‚Äî"

    text = f"üéâ –ü–æ–ª—É—á–µ–Ω–æ: {main_res}.{xp_text}"
    bot.send_message(call.message.chat.id, text)

    # —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    nickname = user.get("nickname", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
    bot.send_message(
        ADMIN_ID,
        f"–ü–æ–∫—É–ø–∫–∞ –∫–µ–π—Å–∞: {nickname} –∫—É–ø–∏–ª {case['name']} –∑–∞ {case['price']}‚ÇΩ. –í—ã–ø–∞–ª–æ: {main_res}."
    )


# ------------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ (—É—Å–ª—É–≥–∏) -------------------
@bot.callback_query_handler(func=lambda call: call.data.startswith("service_"))
def handle_services(call):
    user_id = str(call.from_user.id)
    data = load_data()

    if call.data == "service_unban":
        success, msg = process_purchase(user_id, 500, "–†–∞–∑–±–∞–Ω")
        bot.answer_callback_query(call.id, msg)
        if success:
            bot.send_message(call.message.chat.id, "–í—ã –ø–æ–ª—É—á–∏–ª–∏ —É—Å–ª—É–≥—É —Ä–∞–∑–±–∞–Ω–∞.")
            user = data["users"].get(user_id, {})
            nickname = user.get("nickname", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
            bot.send_message(ADMIN_ID, f"‚úÖ –ò–≥—Ä–æ–∫ {nickname} –∫—É–ø–∏–ª —Ä–∞–∑–±–∞–Ω.")

    elif call.data == "service_bv":
        bot.answer_callback_query(call.id, "–ü–µ—Ä–µ—Ö–æ–¥ –∫ BV# –ø–æ–¥–ø–∏—Å–∫–µ.")
        try:
            bot.edit_message_text(
                "–ü–µ—Ä–µ—Ö–æ–¥ –∫ BV# –ø–æ–¥–ø–∏—Å–∫–µ:",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=get_main_menu_markup(str(call.from_user.id))
            )
        except Exception as e:
            print(f'[ERROR] –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
#-------------–û–±—â–µ–Ω–∏–µ---------------

def process_player_search(message):
    query = message.text.strip().lower()
    data = load_data()
    found = False

    # –ó–¥–µ—Å—å "users" –∏ "banned_users" ‚Äì —Å–ª–æ–≤–∞—Ä–∏, –∞ "invalid_registrations" ‚Äì —Å–ø–∏—Å–æ–∫.
    all_categories = {
        "users": data.get("users", {}),
        "banned_users": data.get("banned_users", {}),
        "invalid_registrations": data.get("invalid_registrations", [])
    }

    for category, group in all_categories.items():
        # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ ‚Äì —Å–ª–æ–≤–∞—Ä—å, –∏—Ç–µ—Ä–∏—Ä—É–µ–º –ø–æ –µ—ë —ç–ª–µ–º–µ–Ω—Ç–∞–º
        if isinstance(group, dict):
            iterator = group.items()
        # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ ‚Äì —Å–ø–∏—Å–æ–∫, –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –µ—ë –≤ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (uid –±—É–¥–µ—Ç None)
        elif isinstance(group, list):
            iterator = [(None, user) for user in group]
        else:
            continue

        for uid, user in iterator:
            nickname = user.get("nickname", "").lower()
            username = user.get("telegram_username", "").lower()
            bvtag = str(user.get("bvtag", "")).lower()

            if (query in nickname or query in username or query in bvtag or (uid is not None and query == str(uid))):
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                if category == "users":
                    user["status"] = "user"
                elif category == "banned_users":
                    user["status"] = "banned"
                else:
                    user["status"] = "minor"
                # –ï—Å–ª–∏ uid –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º placeholder
                user["user_id"] = uid if uid is not None else "N/A"
                text = render_search_profile(user)
                bot.send_message(message.chat.id, text, parse_mode="HTML")
                found = True
                break
        if found:
            break

    if not found:
        bot.send_message(message.chat.id, "‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")


def render_search_profile(user):
    status     = user.get("status", "user")
    role       = user.get("role", "‚Äî")
    nickname   = user.get("nickname", "‚Äî")
    bvtag      = user.get("bvtag", "‚Äî")
    reg_date   = user.get("registration_date", "‚Äî")
    max_streak = user.get("max_login_streak", 0)
    tribe      = user.get("tribe", "‚Äî")
    level      = user.get("level", 1)

    if status == "user":
        return (
            f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å: {nickname}</b>\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"‚≠ê <b>BV#:</b> {bvtag}\n"
            f"üèÜ <b>LVL:</b> {level} —É—Ä–æ–≤–µ–Ω—å\n"
            f"üè∑Ô∏è <b>–ù–∏–∫:</b> {nickname}\n"
            f"üé≠ <b>–†–æ–ª—å:</b> {role}\n"
            f"üè∞ <b>–¢—Ä–∞–π–±:</b> {tribe}\n"
            f"üî• <b>–ú–∞–∫—Å. —Å—Ç—Ä–∏–∫:</b> {max_streak} –¥–Ω–µ–π\n"
            f"üìÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> {reg_date}"
        )
    elif status == "minor":
        return (
            f"üßí <b>–ù–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–π:</b> {nickname}\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"‚≠ê <b>BV#:</b> {bvtag}\n"
            f"üèÜ <b>LVL:</b> {level} —É—Ä–æ–≤–µ–Ω—å\n"
            f"üìõ <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</b> –¥–æ 14 –ª–µ—Ç\n"
            f"üìÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> {reg_date}"
        )
    elif status == "banned":
        reason = user.get("ban_reason", "–Ω–µ —É–∫–∞–∑–∞–Ω–∞")
        return (
            f"üö´ <b>–ó–∞–±–∞–Ω–µ–Ω:</b> {nickname}\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"‚≠ê <b>BV#:</b> {bvtag}\n"
            f"üèÜ <b>LVL:</b> {level} —É—Ä–æ–≤–µ–Ω—å\n"
            f"üìõ <b>–ü—Ä–∏—á–∏–Ω–∞ –±–∞–Ω–∞:</b> {reason}\n"
            f"üìÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> {reg_date}"
        )
    else:
        return f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∏–≥—Ä–æ–∫–∞ <code>{user.get('user_id','‚Äî')}</code>"



@bot.callback_query_handler(func=lambda call: call.data == "search_players")
def search_players_prompt_new(call):
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üé≠ –†–æ–ª–∏", callback_data="show_roles"))
    kb.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="community_menu"))
    msg = bot.send_message(
        call.message.chat.id,
        "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –∏–ª–∏ @username –∏–≥—Ä–æ–∫–∞:",
        reply_markup=kb,
    )
    bot.register_next_step_handler(msg, process_player_search)


@bot.callback_query_handler(func=lambda call: call.data == "community_menu")
def community_menu(call):
    user_id = str(call.from_user.id)
    data    = load_data()
    user    = data["users"].get(user_id, {})

    # –¥–∏–Ω–∞–º–∏—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Ç—Ä–∞–π–±–∞
    if user.get("tribe"):
        btn_tribe = types.InlineKeyboardButton("üè∞ –ú–æ–π —Ç—Ä–∞–π–±", callback_data="tribe_menu")
    else:
        btn_tribe = types.InlineKeyboardButton("üè∞ –¢—Ä–∞–π–±—ã", callback_data="tribe_menu")

    btn_players = types.InlineKeyboardButton("üë§ –ò–≥—Ä–æ–∫–∏", callback_data="search_players")
    btn_stats   = types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats_menu")
    btn_law     = types.InlineKeyboardButton("‚öñÔ∏è –ü—Ä–∞–≤–æ",       callback_data="law_menu")
    btn_guide   = types.InlineKeyboardButton("üìñ –ì–∏–¥",         callback_data="open_guide")

    markup = types.InlineKeyboardMarkup(row_width=3)
    markup.row(btn_tribe)
    markup.row(btn_law, btn_stats, btn_players)
    markup.row(btn_guide)

    # –∫–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª –≤ –∫–æ–Ω–µ—Ü
    btn_back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="get_main_menu_markup")
    markup.add(btn_back)

    # –ø—Ä–æ–±—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        bot.edit_message_text(
            "üÜï <b>–°–æ–æ–±—â–µ—Å—Ç–≤–æ</b>: –≤—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=markup,
            parse_mode="HTML"
        )
    except Exception:
        bot.send_message(
            call.message.chat.id,
            "üÜï <b>–°–æ–æ–±—â–µ—Å—Ç–≤–æ</b>: –≤—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª",
            reply_markup=markup,
            parse_mode="HTML"
        )


@bot.callback_query_handler(func=lambda call: call.data == "stats_menu")
def stats_menu(call):
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(types.InlineKeyboardButton("üèÜ –¢–æ–ø —É—Ä–æ–≤–Ω–µ–π", callback_data="top_levels"))
    markup.add(types.InlineKeyboardButton("üî• –¢–æ–ø —Å—Ç—Ä–∏–∫–æ–≤", callback_data="top_streaks"))
    markup.add(types.InlineKeyboardButton("üõ° –†–µ–π—Ç–∏–Ω–≥ —Ç—Ä–∞–π–±–æ–≤", callback_data="top_tribes"))
    markup.add(types.InlineKeyboardButton("üóìÔ∏è –°–µ–∑–æ–Ω—ã", callback_data="season_archive"))
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="community_menu"))
    bot.edit_message_text(
        "üìä <b>–†–µ–π—Ç–∏–Ω–≥–∏</b>: –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
        call.message.chat.id,
        call.message.message_id,
        parse_mode="HTML",
        reply_markup=markup,
    )


@bot.callback_query_handler(func=lambda call: call.data == "law_menu")
def law_menu(call):
    user_id = str(call.from_user.id)
    data = load_data()
    user = data["users"].get(user_id, {})
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(types.InlineKeyboardButton("üì© –ü–æ–¥–∞—Ç—å –¥–µ–ª–æ", callback_data="create_case"))
    row = []
    if user_has_court_access(user):
        row.append(types.InlineKeyboardButton("‚öñÔ∏è –°—É–¥–µ–±–Ω—ã–µ –¥–µ–ª–∞", callback_data="law_cases"))
    row.append(types.InlineKeyboardButton("üóÑÔ∏è –ê—Ä—Ö–∏–≤ –¥–µ–ª", callback_data="law_archive"))
    markup.row(*row)
    markup.add(types.InlineKeyboardButton("üí∏ –®—Ç—Ä–∞—Ñ—ã", callback_data="fines_menu"))
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="community_menu"))
    bot.edit_message_text(
        "‚öñÔ∏è <b>–ü—Ä–∞–≤–æ</b>: –≤—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª",
        call.message.chat.id,
        call.message.message_id,
        parse_mode="HTML",
        reply_markup=markup,
    )


@bot.callback_query_handler(func=lambda call: call.data == "create_case")
def start_create_case(call):
    user_id = str(call.from_user.id)
    user_states[user_id] = {"state": "court_title", "temp_data": {}}
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–ª–∞:")


@bot.message_handler(func=lambda m: str(m.from_user.id) in user_states and user_states[str(m.from_user.id)].get("state") == "court_title")
def case_set_title(m):
    uid = str(m.from_user.id)
    user_states[uid]["temp_data"]["title"] = m.text.strip()
    user_states[uid]["state"] = "court_brief"
    bot.send_message(m.chat.id, "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")


@bot.message_handler(func=lambda m: str(m.from_user.id) in user_states and user_states[str(m.from_user.id)].get("state") == "court_brief")
def case_set_brief(m):
    uid = str(m.from_user.id)
    user_states[uid]["temp_data"]["brief"] = m.text.strip()
    user_states[uid]["state"] = "court_accused"
    bot.send_message(m.chat.id, "–ù–∞ –∫–æ–≥–æ –ø–æ–¥–∞—ë—Ç–µ –≤ —Å—É–¥? –£–∫–∞–∂–∏—Ç–µ –Ω–∏–∫ –∏–ª–∏ @username:")


@bot.message_handler(func=lambda m: str(m.from_user.id) in user_states and user_states[str(m.from_user.id)].get("state") == "court_accused")
def case_set_accused(m):
    uid = str(m.from_user.id)
    nick = m.text.strip()
    if nick.lower() == "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π":
        user_states[uid]["temp_data"]["accused"] = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        user_states[uid]["state"] = "court_description"
        bot.send_message(m.chat.id, "–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ–ª–∞:")
        return
    data = load_data()
    if not find_user_by_nick_or_username(nick, data):
        bot.send_message(m.chat.id, "–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–∏–∫ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'.")
        return
    user_states[uid]["temp_data"]["accused"] = nick
    user_states[uid]["state"] = "court_description"
    bot.send_message(m.chat.id, "–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ–ª–∞:")


@bot.message_handler(func=lambda m: str(m.from_user.id) in user_states and user_states[str(m.from_user.id)].get("state") == "court_description")
def case_set_description(m):
    uid = str(m.from_user.id)
    user_states[uid]["temp_data"]["description"] = m.text.strip()
    user_states[uid]["state"] = "court_screens"
    bot.send_message(m.chat.id, "–ü—Ä–∏—à–ª–∏—Ç–µ –¥–æ 4 —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:")


@bot.message_handler(content_types=["photo"], func=lambda m: str(m.from_user.id) in user_states and user_states[str(m.from_user.id)].get("state") == "court_screens")
def case_set_screens(m):
    uid = str(m.from_user.id)
    photos = [p.file_id for p in m.photo]
    user_states[uid]["temp_data"]["screens"] = photos
    user_states[uid]["state"] = "court_compensation"
    bot.send_message(m.chat.id, "–ö–∞–∫—É—é –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é —Ç—Ä–µ–±—É–µ—Ç–µ?")


@bot.message_handler(func=lambda m: str(m.from_user.id) in user_states and user_states[str(m.from_user.id)].get("state") == "court_compensation")
def case_set_comp(m):
    uid = str(m.from_user.id)
    user_states[uid]["temp_data"]["compensation"] = m.text.strip()
    data = user_states[uid]["temp_data"]
    summary = (
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['title']}\n"
        f"–ö—Ä–∞—Ç–∫–æ: {data['brief']}\n"
        f"–û–±–≤–∏–Ω—è–µ–º—ã–π: {data['accused']}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n"
        f"–ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è: {data['compensation']}"
    )
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –¥–µ–ª–æ", callback_data="confirm_case"))
    kb.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_case"))
    user_states[uid]["state"] = "court_confirm"
    bot.send_message(m.chat.id, summary, reply_markup=kb)


@bot.callback_query_handler(func=lambda call: call.data in ["confirm_case", "cancel_case"])
def finalize_case(call):
    uid = str(call.from_user.id)
    if call.data == "cancel_case":
        user_states.pop(uid, None)
        bot.edit_message_text("–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", call.message.chat.id, call.message.message_id)
        return
    info = user_states.pop(uid, {}).get("temp_data", {})
    info["creator_id"] = uid
    case_id = add_case(info)
    bot.edit_message_text(f"‚úÖ –î–µ–ª–æ ‚Ññ{case_id} —Å–æ–∑–¥–∞–Ω–æ.", call.message.chat.id, call.message.message_id)


@bot.callback_query_handler(func=lambda call: call.data == "law_cases")
def show_active_cases(call):
    user_id = str(call.from_user.id)
    data = load_data()
    user = data["users"].get(user_id, {})
    if not user_has_court_access(user):
        bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    cases = load_cases().get("active", [])
    markup = types.InlineKeyboardMarkup()
    for c in cases:
        markup.add(types.InlineKeyboardButton(f"‚Ññ{c['id']} {c['title']}", callback_data=f"open_case_{c['id']}"))
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="law_menu"))
    text = "–ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–ª –Ω–µ—Ç." if not cases else "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–ª–æ:" 
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("open_case_"))
def open_case_details(call):
    case_id = call.data.split("_")[2]
    cases = load_cases()
    case = next((c for c in cases.get("active", []) if c["id"] == case_id), None)
    if not case:
        bot.answer_callback_query(call.id, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    user_id = str(call.from_user.id)
    data = load_data()
    user = data["users"].get(user_id, {})
    text = (
        f"<b>–î–µ–ª–æ ‚Ññ{case['id']}</b>\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {case['title']}\n"
        f"–ö—Ä–∞—Ç–∫–æ: {case['brief']}\n"
        f"–û–±–≤–∏–Ω—è–µ–º—ã–π: {case['accused']}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {case['description']}\n"
        f"–ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è: {case['compensation']}"
    )
    markup = types.InlineKeyboardMarkup()
    if user.get("role") in ["–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç", "–ü—Ä–æ–∫—É—Ä–æ—Ä"]:
        markup.add(types.InlineKeyboardButton("–í—ã–Ω–µ—Å—Ç–∏ –≤–µ—Ä–¥–∏–∫—Ç", callback_data=f"verdict_{case_id}"))
        markup.add(types.InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{case_id}"))
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="law_cases"))
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode="HTML", reply_markup=markup)
    if case.get("screens"):
        media = [InputMediaPhoto(p) for p in case["screens"]]
        bot.send_media_group(call.message.chat.id, media)


@bot.callback_query_handler(func=lambda call: call.data.startswith("verdict_"))
def verdict_start(call):
    case_id = call.data.split("_")[1]
    uid = str(call.from_user.id)
    user_states[uid] = {"state": "set_verdict", "case_id": case_id}
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–µ—Ä–¥–∏–∫—Ç–∞:")


@bot.message_handler(func=lambda m: str(m.from_user.id) in user_states and user_states[str(m.from_user.id)].get("state") == "set_verdict")
def verdict_receive(m):
    uid = str(m.from_user.id)
    case_id = user_states[uid]["case_id"]
    verdict = m.text.strip()
    cases = load_cases()
    case = next((c for c in cases.get("active", []) if c["id"] == case_id), None)
    if case:
        case["status"] = "closed"
        case["verdict"] = verdict
        cases["active"] = [c for c in cases["active"] if c["id"] != case_id]
        cases.setdefault("archive", []).append(case)
        save_cases(cases)
    if case and case.get("compensation"):
        user_states[uid] = {"state": "fine_amount", "temp_data": {"case_id": case_id, "target": case["accused"]}}
        bot.send_message(m.chat.id, f"–î–µ–ª–æ ‚Ññ{case_id} –∑–∞–∫—Ä—ã—Ç–æ. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —à—Ç—Ä–∞—Ñ–∞:")
        return
    user_states.pop(uid, None)
    bot.send_message(m.chat.id, f"–î–µ–ª–æ ‚Ññ{case_id} –∑–∞–∫—Ä—ã—Ç–æ –≤–µ—Ä–¥–∏–∫—Ç–æ–º.")


@bot.callback_query_handler(func=lambda call: call.data.startswith("reject_"))
def reject_case(call):
    case_id = call.data.split("_")[1]
    cases = load_cases()
    case = next((c for c in cases.get("active", []) if c["id"] == case_id), None)
    if case:
        case["status"] = "rejected"
        cases["active"] = [c for c in cases["active"] if c["id"] != case_id]
        cases.setdefault("archive", []).append(case)
        save_cases(cases)
    bot.answer_callback_query(call.id, "–î–µ–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)


@bot.callback_query_handler(func=lambda call: call.data == "law_archive")
def law_show_archive(call):
    cases = load_cases().get("archive", [])
    markup = types.InlineKeyboardMarkup()
    for c in cases:
        markup.add(types.InlineKeyboardButton(f"‚Ññ{c['id']} {c['title']}", callback_data=f"arch_{c['id']}"))
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="law_menu"))
    text = "–ê—Ä—Ö–∏–≤ –ø—É—Å—Ç." if not cases else "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–ª–æ:"
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("arch_"))
def law_open_archived(call):
    case_id = call.data.split("_")[1]
    cases = load_cases()
    case = next((c for c in cases.get("archive", []) if c["id"] == case_id), None)
    if not case:
        bot.answer_callback_query(call.id, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    text = (
        f"<b>–î–µ–ª–æ ‚Ññ{case['id']}</b>\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {case['title']}\n"
        f"–ö—Ä–∞—Ç–∫–æ: {case['brief']}\n"
        f"–û–±–≤–∏–Ω—è–µ–º—ã–π: {case['accused']}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {case['description']}\n"
        f"–ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è: {case['compensation']}\n"
        f"–í–µ—Ä–¥–∏–∫—Ç: {case.get('verdict','-')}"
    )
    markup = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="law_archive")
    )
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode="HTML", reply_markup=markup)
    if case.get("screens"):
        media = [InputMediaPhoto(p) for p in case["screens"]]
        bot.send_media_group(call.message.chat.id, media)


@bot.callback_query_handler(func=lambda call: call.data == "fines_menu")
def fines_menu(call):
    user_id = str(call.from_user.id)
    data = load_data()
    user = data["users"].get(user_id, {})
    if not user_has_fine_access(user):
        bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(types.InlineKeyboardButton("üìÑ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —à—Ç—Ä–∞—Ñ—ã", callback_data="fines_list"))
    markup.add(types.InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å —à—Ç—Ä–∞—Ñ", callback_data="fine_create"))
    markup.add(types.InlineKeyboardButton("‚úÖ –ó–∞–∫—Ä—ã—Ç—å —à—Ç—Ä–∞—Ñ", callback_data="fine_close"))
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="law_menu"))
    bot.edit_message_text(
        "üí∏ <b>–®—Ç—Ä–∞—Ñ—ã</b>: –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ",
        call.message.chat.id,
        call.message.message_id,
        parse_mode="HTML",
        reply_markup=markup,
    )


@bot.callback_query_handler(func=lambda call: call.data == "fines_list")
def fines_list(call):
    fines = load_fines().get("active", [])
    if not fines:
        text = "–ê–∫—Ç–∏–≤–Ω—ã—Ö —à—Ç—Ä–∞—Ñ–æ–≤ –Ω–µ—Ç."
    else:
        lines = [
            f"#{f['id']} {f.get('target','?')} - {f.get('amount','?')} –¥–æ {f.get('due','?')} ({f.get('reason','')})"
            for f in fines
        ]
        text = "–ê–∫—Ç–∏–≤–Ω—ã–µ —à—Ç—Ä–∞—Ñ—ã:\n" + "\n".join(lines)
    markup = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="fines_menu")
    )
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "fine_create")
def fine_create_start(call):
    uid = str(call.from_user.id)
    user_states[uid] = {"state": "fine_target", "temp_data": {}}
    bot.send_message(call.message.chat.id, "–ù–∞ –∫–æ–≥–æ –≤—ã–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —à—Ç—Ä–∞—Ñ?")


@bot.message_handler(func=lambda m: str(m.from_user.id) in user_states and user_states[str(m.from_user.id)].get("state") == "fine_target")
def fine_set_target(m):
    uid = str(m.from_user.id)
    nick = m.text.strip()
    data = load_data()
    if not find_user_by_nick_or_username(nick, data):
        bot.send_message(m.chat.id, "–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    user_states[uid]["temp_data"]["target"] = nick
    user_states[uid]["state"] = "fine_amount"
    bot.send_message(m.chat.id, "–°—É–º–º–∞ —à—Ç—Ä–∞—Ñ–∞:")


@bot.message_handler(func=lambda m: str(m.from_user.id) in user_states and user_states[str(m.from_user.id)].get("state") == "fine_amount")
def fine_set_amount(m):
    uid = str(m.from_user.id)
    user_states[uid]["temp_data"]["amount"] = m.text.strip()
    user_states[uid]["state"] = "fine_due"
    bot.send_message(m.chat.id, "–°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã (–¥–¥.–º–º.–≥–≥–≥–≥):")


@bot.message_handler(func=lambda m: str(m.from_user.id) in user_states and user_states[str(m.from_user.id)].get("state") == "fine_due")
def fine_set_due(m):
    uid = str(m.from_user.id)
    due_text = m.text.strip()
    try:
        due_date = datetime.strptime(due_text, "%d.%m.%Y").date()
        if due_date < date.today():
            raise ValueError
    except ValueError:
        bot.send_message(m.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –£–∫–∞–∂–∏—Ç–µ –±—É–¥—É—â—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥:")
        return
    user_states[uid]["temp_data"]["due"] = due_text
    user_states[uid]["state"] = "fine_reason"
    bot.send_message(m.chat.id, "–ü—Ä–∏—á–∏–Ω–∞ —à—Ç—Ä–∞—Ñ–∞:")


@bot.message_handler(func=lambda m: str(m.from_user.id) in user_states and user_states[str(m.from_user.id)].get("state") == "fine_reason")
def fine_set_reason(m):
    uid = str(m.from_user.id)
    info = user_states.pop(uid, {}).get("temp_data", {})
    info["reason"] = m.text.strip()
    info["creator_id"] = uid
    fine_id = add_fine(info)
    bot.send_message(m.chat.id, f"–®—Ç—Ä–∞—Ñ #{fine_id} —Å–æ–∑–¥–∞–Ω.")


@bot.callback_query_handler(func=lambda call: call.data == "fine_close")
def fine_close_start(call):
    uid = str(call.from_user.id)
    user_states[uid] = {"state": "fine_close"}
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —à—Ç—Ä–∞—Ñ–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è:")


@bot.message_handler(func=lambda m: str(m.from_user.id) in user_states and user_states[str(m.from_user.id)].get("state") == "fine_close")
def fine_close_finish(m):
    uid = str(m.from_user.id)
    fine_id = m.text.strip()
    success = close_fine(fine_id)
    user_states.pop(uid, None)
    if success:
        bot.send_message(m.chat.id, "–®—Ç—Ä–∞—Ñ –∑–∞–∫—Ä—ã—Ç.")
    else:
        bot.send_message(m.chat.id, "–®—Ç—Ä–∞—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω.")


## ---------------- Tribe System (Final Version) ----------------

def get_user_tribe(user_id, data):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (leader_id, tribe) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
    –µ—Å–ª–∏ –æ–Ω —Å–æ—Å—Ç–æ–∏—Ç –≤ —Ç—Ä–∞–π–±–µ, –∏–Ω–∞—á–µ (None, None).
    """
    user = data["users"].get(user_id)
    if not user or not user.get("tribe"):
        return None, None
    tribe_name = user["tribe"]
    for leader_id, tribe in data.get("tribes", {}).items():
        if tribe["name"] == tribe_name:
            return leader_id, tribe
    return None, None

def recalc_tribe_level(leader_id, data):
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–µ–π —É—Ä–æ–≤–Ω—è –∏ XP —É —Ç—Ä–∞–π–±–∞."""
    tribe = data.get("tribes", {}).get(leader_id)
    if tribe:
        tribe.setdefault("level", 1)
        tribe.setdefault("xp", 0)

def update_user_tribe_level(user_id, data):
    leader_id, tribe = get_user_tribe(user_id, data)
    if tribe:
        recalc_tribe_level(leader_id, data)

def handle_tribe_join_menu(call):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–µ–Ω—é –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —Ç—Ä–∞–π–±.
    –í –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ –º—ã –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ join_tribe_menu.
    """
    join_tribe_menu(call)  # –≤—ã–∑–æ–≤–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —Ç—Ä–∞–π–±

def tribe_menu_markup(user):
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Ç—Ä–∞–π–±–æ–≤.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ —Ç—Ä–∞–π–±–µ, –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –¥–≤–µ –∫–Ω–æ–ø–∫–∏:
    ¬´–í—Å—Ç—É–ø–∏—Ç—å –≤ —Ç—Ä–∞–π–± üìù¬ª –∏ ¬´–°–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–π–± üè∞¬ª.
    –ï—Å–ª–∏ —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç ‚Äì ‚Äì ¬´–ú–æ–π —Ç—Ä–∞–π–± üè∞¬ª –∏ ¬´–°–ø–∏—Å–æ–∫ —Ç—Ä–∞–π–±–æ–≤ üèØ¬ª.
    """
    markup = types.InlineKeyboardMarkup()
    if not user.get("tribe"):
        btn_join = types.InlineKeyboardButton("–í—Å—Ç—É–ø–∏—Ç—å –≤ —Ç—Ä–∞–π–± üìù", callback_data="tribe_join_menu")
        btn_create = types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–π–± üè∞", callback_data="create_tribe")
        markup.row(btn_join, btn_create)
    else:
        btn_view = types.InlineKeyboardButton("–ú–æ–π —Ç—Ä–∞–π–± üè∞", callback_data="view_tribe")
        btn_list = types.InlineKeyboardButton("–°–ø–∏—Å–æ–∫ —Ç—Ä–∞–π–±–æ–≤ üèØ", callback_data="list_tribes")
        markup.row(btn_view, btn_list)
    btn_back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="get_main_menu_markup")
    markup.row(btn_back)
    return markup

@bot.message_handler(commands=["tribe"])
def handle_tribe_command(message):
    user_id = str(message.from_user.id)
    update_streak(user_id)
    data = load_data()
    user = data["users"].get(user_id, {})
    kb = tribe_menu_markup(user)
    bot.send_message(message.chat.id, "üèò –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb, parse_mode="HTML")

# -------------------- –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω —Ç—Ä–∞–π–±–æ–≤ --------------------
@bot.callback_query_handler(func=lambda call: call.data == "tribe_menu")
def tribe_main_menu(call):
    user_id = str(call.from_user.id)
    data = load_data()
    user = data["users"].get(user_id, {})
    
    if user.get("tribe"):
        tribe_btn = types.InlineKeyboardButton("üõ° –ú–æ–π —Ç—Ä–∞–π–±", callback_data="view_tribe")
    else:
        tribe_btn = types.InlineKeyboardButton("üõ° –í—Å—Ç—É–ø–∏—Ç—å –≤ —Ç—Ä–∞–π–±", callback_data="tribe_join_menu")
    
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row(tribe_btn)
    keyboard.row(
        types.InlineKeyboardButton("üìú –í—Å–µ —Ç—Ä–∞–π–±—ã", callback_data="list_tribes")
    )
    keyboard.row(
        types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="get_main_menu_markup")
    )
    
    text = "üèò <b>–ú–µ–Ω—é —Ç—Ä–∞–π–±–æ–≤</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    try:
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode="HTML")
    except Exception as e:
        print(f"[ERROR] Editing tribe menu: {e}")
        bot.send_message(call.message.chat.id, text, reply_markup=keyboard, parse_mode="HTML")


# -------------------- –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —Ç—Ä–∞–π–± --------------------
@bot.callback_query_handler(func=lambda call: call.data == "tribe_join_menu")
def join_tribe_menu(call):
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üì© –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ", callback_data="submit_tribe_request"))
    kb.add(types.InlineKeyboardButton("üè∞ –°–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–π–±", callback_data="create_tribe"))
    kb.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="tribe_menu"))
    bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", call.message.chat.id, call.message.message_id, reply_markup=kb, parse_mode="HTML")

@bot.callback_query_handler(func=lambda call: call.data == "submit_tribe_request")
def tribe_join_request(call):
    msg = bot.send_message(call.message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ <b>[ID]</b> —Ç—Ä–∞–π–±–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –≤—Å—Ç—É–ø–∏—Ç—å (—É–∫–∞–∑–∞–Ω —Ä—è–¥–æ–º —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º):",
        parse_mode="HTML")
    bot.register_next_step_handler(msg, process_join_request)

def process_join_request(message):
    user_id = str(message.from_user.id)
    req_id = message.text.strip().upper()
    data = load_data()
    target_tribe = None
    target_leader = None
    for leader_id, tribe in data.get("tribes", {}).items():
        if tribe["id"] == req_id:
            target_tribe = tribe
            target_leader = leader_id
            break
    if not target_tribe:
        bot.send_message(message.chat.id, "‚ùå –¢—Ä–∞–π–± —Å —Ç–∞–∫–∏–º [ID] –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    if data["users"].get(user_id, {}).get("tribe"):
        bot.send_message(message.chat.id, "‚ùå –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Ç—Ä–∞–π–±–µ.")
        return
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–∞–ª –ª–∏ –∑–∞—è–≤–∫—É —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–±–µ–∑ KeyError)
    for tribe in data.get("tribes", {}).values():
        for req in tribe.get("join_requests", []):
            if req.get("user_id") == user_id:
                bot.send_message(message.chat.id, "‚ùó –í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É.")
                return
    if len(target_tribe.get("members", [])) >= target_tribe.get("max_members", 10):
        bot.send_message(message.chat.id, "‚ùå –í —ç—Ç–æ–º —Ç—Ä–∞–π–±–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        return
    user_record = data["users"].get(user_id, {})
    join_req = {
        "user_id": user_id,
        "nickname": user_record.get("nickname", ""),
        "telegram_username": user_record.get("telegram_username", ""),
        "registration_date": user_record.get("registration_date", "")
    }
    target_tribe.setdefault("join_requests", []).append(join_req)
    save_data(data)
    req_text = (
        f"<b>üì© –ó–∞—è–≤–∫–∞ –≤ —Ç—Ä–∞–π–±</b>\n"
        f"üë§ –ù–∏–∫: {join_req['nickname']}\n"
        f"üîó Telegram: @{join_req['telegram_username']}\n"
        f"üìÖ –î–∞—Ç–∞: {join_req['registration_date']}"
    )
    kb = types.InlineKeyboardMarkup()
    kb.row(
        types.InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"join_accept_{user_id}_{target_leader}"),
        types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"join_reject_{user_id}_{target_leader}")
    )
    bot.send_message(target_leader, req_text, reply_markup=kb, parse_mode="HTML")
    bot.send_message(message.chat.id, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ì–ª–∞–≤–µ —Ç—Ä–∞–π–±–∞.")

# -------------------- –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–π–±–∞ --------------------
@bot.callback_query_handler(func=lambda call: call.data == "create_tribe")
def create_tribe_start(call):
    user_id = str(call.from_user.id)
    data = load_data()
    if data["users"].get(user_id, {}).get("tribe"):
        bot.answer_callback_query(call.id, "–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Ç—Ä–∞–π–±–µ.")
        return
    user_states[user_id] = {"state": "awaiting_tribe_name", "temp_data": {}}
    bot.send_message(call.message.chat.id, "üõ† <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–π–±–∞</b>\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–∞–π–±–∞ (–¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤):", parse_mode="HTML")

@bot.message_handler(func=lambda m: str(m.from_user.id) in user_states and user_states[str(m.from_user.id)].get("state") == "awaiting_tribe_name")
def tribe_name_handler(m):
    user_id = str(m.from_user.id)
    tribe_name = m.text.strip()
    if len(tribe_name) > 20:
        bot.send_message(m.chat.id, "‚ùó –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –í–≤–µ–¥–∏—Ç–µ –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤:")
        return
    user_states[user_id]["temp_data"]["tribe_name"] = tribe_name
    user_states[user_id]["state"] = "awaiting_tribe_id"
    bot.send_message(m.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç—Ä–∞–π–±–∞ (—Ä–æ–≤–Ω–æ 3 —Å–∏–º–≤–æ–ª–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, BVC):")

@bot.message_handler(func=lambda m: str(m.from_user.id) in user_states and user_states[str(m.from_user.id)].get("state") == "awaiting_tribe_id")
def tribe_id_handler(m):
    user_id = str(m.from_user.id)
    tribe_id = m.text.strip()
    if len(tribe_id) != 3:
        bot.send_message(m.chat.id, "‚ùó –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–æ–≤–Ω–æ 3 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    user_states[user_id]["temp_data"]["tribe_id"] = tribe_id.upper()
    user_states[user_id]["state"] = "awaiting_tribe_desc"
    bot.send_message(m.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–π–±–∞ (–¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤):")

@bot.message_handler(func=lambda m: str(m.from_user.id) in user_states and user_states[str(m.from_user.id)].get("state") == "awaiting_tribe_desc")
def tribe_desc_handler(m):
    user_id = str(m.from_user.id)
    desc = m.text.strip()
    if len(desc) > 50:
        bot.send_message(m.chat.id, "‚ùó –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –í–≤–µ–¥–∏—Ç–µ –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤:")
        return
    user_states[user_id]["temp_data"]["tribe_desc"] = desc
    user_states[user_id]["state"] = "awaiting_tribe_chat"
    bot.send_message(m.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –±–µ—Å–µ–¥—É —Ç—Ä–∞–π–±–∞:")

@bot.message_handler(func=lambda m: str(m.from_user.id) in user_states and user_states[str(m.from_user.id)].get("state") == "awaiting_tribe_chat")
def tribe_chat_handler(m):
    user_id = str(m.from_user.id)
    chat_link = m.text.strip()
    temp = user_states[user_id]["temp_data"]
    temp["tribe_chat"] = chat_link
    confirmation = (
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–π–±–∞:\n"
        f"üõ° –ù–∞–∑–≤–∞–Ω–∏–µ: {temp['tribe_name']}\n"
        f"üî¢ ID: {temp['tribe_id']}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {temp['tribe_desc']}\n"
        f"üí¨ –°—Å—ã–ª–∫–∞: {temp['tribe_chat']}\n\n"
        "–ù–∞–∂–º–∏—Ç–µ ‚úÖ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ ‚ùå –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("‚úÖ –°–æ–∑–¥–∞—Ç—å", callback_data="confirm_create_tribe"))
    kb.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_create_tribe"))
    bot.send_message(m.chat.id, confirmation, reply_markup=kb, parse_mode="HTML")

@bot.callback_query_handler(func=lambda call: call.data in ["confirm_create_tribe", "cancel_create_tribe"])
def tribe_create_confirm(call):
    user_id = str(call.from_user.id)
    if call.data == "cancel_create_tribe":
        user_states.pop(user_id, None)
        bot.edit_message_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–π–±–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", call.message.chat.id, call.message.message_id)
        return
    data = load_data()
    user = data["users"].get(user_id, {})
    cost = 0  # –°–æ–∑–¥–∞–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ
    if user.get("balance", 0) < cost:
        bot.answer_callback_query(call.id, "‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–π–±–∞.")
        return
    user["balance"] -= cost
    temp = user_states[user_id]["temp_data"]
    tribe = {
        "name": temp["tribe_name"],
        "id": temp["tribe_id"],
        "desc": temp["tribe_desc"],
        "last_desc_change": datetime.now().strftime("%Y-%m-%d"),
        "date_created": datetime.now().strftime("%d.%m.%Y"),
        "chat_link": temp["tribe_chat"],
        "leader": user_id,
        "members": [{
            "user_id": user_id,
            "nickname": user.get("nickname", ""),
            "telegram_username": user.get("telegram_username", ""),
            "role": "–ì–ª–∞–≤–∞"
        }],
        "max_members": 10,
        "join_requests": [],
        "level": 1,
        "xp": 0
    }
    data.setdefault("tribes", {})
    data["tribes"][user_id] = tribe
    user["tribe"] = tribe["name"]
    save_data(data)
    user_states.pop(user_id, None)
    bot.edit_message_text(f"üéâ –¢—Ä–∞–π–± <b>{tribe['name']}</b> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", call.message.chat.id, call.message.message_id, parse_mode="HTML")

# -------------------- –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–π–±–æ–≤ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π --------------------
@bot.callback_query_handler(func=lambda call: call.data == "list_tribes")
def tribe_list(call):
    call.data = "list_tribes_page_0"
    handle_tribes_page_safe(call)

@bot.callback_query_handler(func=lambda call: call.data.startswith("list_tribes_page_"))
def handle_tribes_page(call):
    handle_tribes_page_safe(call)

def handle_tribes_page_safe(call):
    try:
        page = int(call.data.split("_")[-1])
    except Exception:
        page = 0

    data   = load_data()
    tribes = list(data.get("tribes", {}).values())
    random.shuffle(tribes)
    per_page    = 5
    total_pages = (len(tribes) + per_page - 1)//per_page

    if not tribes:
        bot.edit_message_text("üòî –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–π–±–æ–≤.", call.message.chat.id, call.message.message_id)
        return

    if page < 0 or page >= total_pages:
        bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç —Ç–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")
        return

    start = page*per_page
    end   = start+per_page
    current = tribes[start:end]

    text = "üìú <b>–°–ø–∏—Å–æ–∫ —Ç—Ä–∞–π–±–æ–≤:</b>\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n" \
           "–£–∫–∞–∂–∏—Ç–µ <b>[ID]</b> –Ω—É–∂–Ω–æ–≥–æ —Ç—Ä–∞–π–±–∞ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏.\n\n"
    for i, tribe in enumerate(current, start=start+1):
        level = tribe.get('level', 1)
        text += (
            f"{i}. <b>{tribe['name']}</b> [{tribe['id']}]\n"
            f"   üë• {len(tribe['members'])}/{tribe.get('max_members', 10)}\n"
            f"   üìÖ {tribe['date_created']}\n"
            f"   üèÖ LVL {level}\n"
            f"   üìù {tribe['desc'][:100]}...\n\n"
        )

    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üìë –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="submit_tribe_request"))
    nav = []
    if page > 0:
        nav.append(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"list_tribes_page_{page-1}"))
    if page < total_pages - 1:
        nav.append(types.InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"list_tribes_page_{page+1}"))
    if nav:
        kb.row(*nav)
    kb.add(types.InlineKeyboardButton("üîô –í –º–µ–Ω—é —Ç—Ä–∞–π–±–æ–≤", callback_data="community_tribes"))

    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode="HTML", reply_markup=kb)


# ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã ¬´—Ç—Ä–∞–π–±—ã¬ª —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
@bot.message_handler(func=lambda m: m.text and m.text.lower() in ["—Ç—Ä–∞–π–±—ã", "/—Ç—Ä–∞–π–±—ã", "—Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–π–±–æ–≤", "–≤—Å–µ —Ç—Ä–∞–π–±—ã"])
def handle_tribes_list(m):
    chat_id = m.chat.id
    thread_id = getattr(m, "message_thread_id", None)

    data = load_data()
    tribes = list(data.get("tribes", {}).values())
    if not tribes:
        # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç—Ä–∞–π–±–∞
        bot.send_message(
            chat_id,
            "üòî –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–π–±–æ–≤.",
            message_thread_id=thread_id
        )
        return

    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ —Ç—Ä–∞–π–±–æ–≤
    random.shuffle(tribes)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    output = ["üìú <b>–°–ø–∏—Å–æ–∫ —Ç—Ä–∞–π–±–æ–≤:</b>\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"]
    for tribe in tribes:
        name    = tribe.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        tid     = tribe.get("id", "???")
        members = len(tribe.get("members", []))
        desc    = tribe.get("desc", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")
        created = tribe.get("date_created", "‚Äî")
        level = tribe.get('level', 1)
        output.append(
            f"<b>{name}</b> [{tid}]\n"
            f"üë• {members}/10 | üìÖ {created} | üèÖ LVL {level}\n"
            f"üìù {desc[:80]}..."
        )
    text = "\n\n".join(output)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(
        chat_id,
        text,
        parse_mode="HTML",
        message_thread_id=thread_id
    )

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
#               üóÇ EMOJI PACKS & DETAILS BLOCK (–ò–¢–û–ì)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


# 1) –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –±–∞–∑–æ–≤–æ–º—É –ø–∞–∫—É
emoji_details = [
    {"name": "–ö–∞–º–µ–Ω–Ω—ã–µ —ç–º–æ–¥–∑–∏",   "price": 30,  "quantity": 14, "image": "stone.png",
     "description": "–ë–∞–∑–æ–≤—ã–µ —ç–º–æ–¥–∑–∏, –ø—Ä–æ—á–Ω—ã–µ –∫–∞–∫ –∫–∞–º–µ–Ω—å ü™®."},
    {"name": "–ñ–µ–ª–µ–∑–Ω—ã–µ —ç–º–æ–¥–∑–∏",    "price": 50,  "quantity": 17, "image": "iron.png",
     "description": "–ù–∞–¥—ë–∂–Ω—ã–µ —ç–º–æ–¥–∑–∏, –∫–∞–∫ –∂–µ–ª–µ–∑–Ω—ã–π –±–ª–æ–∫ ‚öôÔ∏è."},
    {"name": "–ó–æ–ª–æ—Ç—ã–µ —ç–º–æ–¥–∑–∏",     "price": 85,  "quantity": 21, "image": "gold.png",
     "description": "–°–∏—è—é—â–∏–µ —ç–º–æ–¥–∑–∏, –∫–∞–∫ –∑–æ–ª–æ—Ç–æ–π –±–ª–µ—Å–∫ ‚ú®."},
    {"name": "–ê–ª–º–∞–∑–Ω—ã–µ —ç–º–æ–¥–∑–∏",    "price": 115, "quantity": 28, "image": "diamond.png",
     "description": "–†–µ–¥–∫–∏–µ –∏ —Ä–æ—Å–∫–æ—à–Ω—ã–µ —ç–º–æ–¥–∑–∏, –∫–∞–∫ –∞–ª–º–∞–∑—ã üíé."},
    {"name": "–ù–µ–∑–µ—Ä–∏—Ç–æ–≤—ã–µ —ç–º–æ–¥–∑–∏", "price": 159, "quantity": 27, "image": "nether.png",
     "description": "–≠–º–æ–¥–∑–∏ –≤—ã—Å—à–µ–≥–æ –∫–ª–∞—Å—Å–∞, —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ üî•."},
]

# 2) –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ (–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ) –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
EXTRA_CATEGORIES = {
    "event":   "–ò–≤–µ–Ω—Ç–æ–≤—ã–µ —ç–º–æ–¥–∑–∏",
    "special": "–û—Å–æ–±—ã–µ —ç–º–æ–¥–∑–∏",
}

# 3) –ö–ª—é—á–∏ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π ‚Äî —Ü–∏—Ñ—Ä–æ–≤—ã–µ 0‚Äì4 –∏ event/special
EMOJI_CATEGORY_KEYS = [str(i) for i in range(len(emoji_details))] + list(EXTRA_CATEGORIES.keys())

# 4) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è / –º–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
def ensure_user_emojis(user):
    # 1) –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–ª—è
    if "emoji_packs" in user and "emojis" not in user:
        user["emojis"] = user.pop("emoji_packs")

    # 2) –ï—Å–ª–∏ –µ—â—ë –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å —Å–æ –≤—Å–µ–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    if "emojis" not in user:
        user["emojis"] = {key: [] for key in EMOJI_CATEGORY_KEYS}
    else:
        # 3) –î–æ–ø–æ–ª–Ω—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (event, special –∏ —Ç.–¥.)
        for key in EMOJI_CATEGORY_KEYS:
            user["emojis"].setdefault(key, [])

    return user["emojis"]

# 5) –§—É–Ω–∫—Ü–∏—è –≤—ã–¥–∞—á–∏ —Å–ª—É—á–∞–π–Ω–æ–π —ç–º–æ–¥–∑–∏ –∏–∑ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –ø–∞–∫–æ–≤
def award_emoji(user_id: str, cat_key: str):

    data = load_data()
    user = data["users"].setdefault(user_id, {})
    packs = ensure_user_emojis(user)

    # –¶–∏—Ñ—Ä–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã
    if cat_key.isdigit():
        detail = emoji_details[int(cat_key)]
        all_nums = set(range(1, detail["quantity"] + 1))
        owned    = set(packs[cat_key])
        available = list(all_nums - owned)
        if not available:
            return None
        chosen = choice(available)
        packs[cat_key].append(chosen)
        save_data(data)
        return chosen

    # –î–ª—è –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤—ã–¥–∞—á–∏
    return None

# -------------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ (–¥–ª—è –ì–ª–∞–≤—ã) --------------------
@bot.callback_query_handler(func=lambda call: call.data.startswith("join_accept_") or call.data.startswith("join_reject_"))
def handle_join_response(call):
    parts = call.data.split("_")
    action = "_".join(parts[:2])
    applicant_id = parts[2]
    leader_id = parts[3]
    data = load_data()
    tribe = data["tribes"].get(leader_id)
    if not tribe:
        bot.answer_callback_query(call.id, "‚ùå –¢—Ä–∞–π–± –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    req_index = None
    for idx, req in enumerate(tribe.get("join_requests", [])):
        if req["user_id"] == applicant_id:
            req_index = idx
            break
    if req_index is None:
        bot.answer_callback_query(call.id, "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    if action == "join_accept":
        applicant = tribe["join_requests"].pop(req_index)
        tribe["members"].append({
            "user_id": applicant["user_id"],
            "nickname": applicant["nickname"],
            "telegram_username": applicant["telegram_username"],
            "role": "–£—á–∞—Å—Ç–Ω–∏–∫"
        })
        if applicant["user_id"] in data["users"]:
            user = data["users"][applicant["user_id"]]
            user["tribe"] = tribe["name"]
            # üéÅ –í—ã–¥–∞—ë–º –±–æ–Ω—É—Å –∑–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ (—Ä–∞–∑ –≤ 3 –¥–Ω—è)
            process_tribe_login_rewards(applicant["user_id"])
        recalc_tribe_level(leader_id, data)
        save_data(data)
        bot.send_message(leader_id, f"‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç {applicant['nickname']} –ø—Ä–∏–Ω—è—Ç–∞.")
        bot.send_message(applicant["user_id"], f"üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —Ç—Ä–∞–π–± '{tribe['name']}' –ø—Ä–∏–Ω—è—Ç–∞!")
    else:
        tribe["join_requests"].pop(req_index)
        save_data(data)
        bot.send_message(leader_id, "‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        bot.send_message(applicant_id, f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —Ç—Ä–∞–π–± '{tribe['name']}' –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    bot.answer_callback_query(call.id)


@bot.callback_query_handler(func=lambda call: call.data == "community_tribes")
def handle_community_tribes(call):
    tribe_main_menu(call)

# -------------------- –í—ã—Ö–æ–¥ –∏–∑ —Ç—Ä–∞–π–±–∞ (–¥–ª—è –Ω–µ-–õ–∏–¥–µ—Ä–∞) --------------------
@bot.callback_query_handler(func=lambda call: call.data == "leave_tribe")
def leave_tribe(call):
    user_id = str(call.from_user.id)
    data = load_data()
    found = None
    for leader_id, tribe in data.get("tribes", {}).items():
        for member in tribe["members"]:
            if member["user_id"] == user_id:
                found = (leader_id, tribe)
                break
        if found:
            break
    if not found:
        bot.answer_callback_query(call.id, "‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Ç—Ä–∞–π–±–µ.")
        return
    leader_id, tribe = found
    if leader_id == user_id:
        bot.answer_callback_query(call.id, "‚ùå –ö–∞–∫ –ì–ª–∞–≤–∞, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å —Ç—Ä–∞–π–± –±–µ–∑ —Ä–∞—Å–ø—É—Å–∫–∞.")
        return
    tribe["members"] = [m for m in tribe["members"] if m["user_id"] != user_id]
    if user_id in data["users"]:
        data["users"][user_id].pop("tribe", None)
    recalc_tribe_level(leader_id, data)
    save_data(data)
    bot.answer_callback_query(call.id, "‚úÖ –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ —Ç—Ä–∞–π–±.")
    bot.send_message(call.message.chat.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ —Ç—Ä–∞–π–± '{tribe['name']}'.")
    tribe_main_menu(call)

# -------------------- –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å–ø—É—Å–∫–∞ —Ç—Ä–∞–π–±–∞ --------------------
def disband_tribe(leader_id, data):
    tribe = data["tribes"].pop(leader_id, None)
    if tribe:
        for member in tribe["members"]:
            uid = member["user_id"]
            if uid in data["users"]:
                data["users"][uid].pop("tribe", None)
        save_data(data)

@bot.callback_query_handler(func=lambda call: call.data == "disband_tribe")
def disband_tribe_handler(call):
    user_id = str(call.from_user.id)
    data = load_data()
    leader_id, tribe = get_user_tribe(user_id, data)
    if not tribe:
        bot.answer_callback_query(call.id, "‚ùó –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Ç—Ä–∞–π–±–µ.")
        return
    if leader_id != user_id:
        bot.answer_callback_query(call.id, "‚ùó –¢–æ–ª—å–∫–æ –ì–ª–∞–≤–∞ –º–æ–∂–µ—Ç —Ä–∞—Å–ø—É—Å—Ç–∏—Ç—å —Ç—Ä–∞–π–±.")
        return
    if len(tribe["members"]) == 1:
        disband_tribe(user_id, data)
        bot.edit_message_text("‚úÖ –í–∞—à —Ç—Ä–∞–π–± —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø—É—â–µ–Ω.", call.message.chat.id, call.message.message_id)
    else:
        bot.answer_callback_query(call.id, "–†–∞—Å–ø—É—Å–∫ –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ, –µ—Å–ª–∏ –≤—ã –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –∏–ª–∏ –ø–æ –∏—Ç–æ–≥–∞–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.")

# -------------------- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–π–±–æ–º: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ --------------------
def clan_edit_markup():
    kb = types.InlineKeyboardMarkup()
    kb.row(
        types.InlineKeyboardButton("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", callback_data="edit_tribe_name"),
        types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_tribe_desc")
    )
    kb.row(
        types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å ID (50‚ÇΩ)", callback_data="edit_tribe_id"),
        types.InlineKeyboardButton("–ù–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–º–æ—â–Ω–∏–∫–∞", callback_data="assign_tribe_helper")
    )
    kb.row(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="view_tribe"))
    return kb

def clan_management_markup():
    kb = types.InlineKeyboardMarkup()
    kb.row(types.InlineKeyboardButton("‚öôÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_tribe"))
    kb.row(
        types.InlineKeyboardButton("–ö–∏–∫–Ω—É—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", callback_data="kick_tribe_member"),
        types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data="create_tribe_announcement")
    )
    kb.row(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="view_tribe"))
    return kb

@bot.callback_query_handler(func=lambda call: call.data == "edit_tribe")
def edit_tribe_menu(call):
    kb = clan_edit_markup()
    try:
        bot.edit_message_text("‚öôÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–π–±–∞:", call.message.chat.id, call.message.message_id, reply_markup=kb)
    except Exception as e:
        print(f"[ERROR] –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–π–±–∞: {e}")

def create_tribe_announcement(leader_id: str, announcement_text: str):
    """
    –†–∞—Å—Å—ã–ª–∞–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Ç—Ä–∞–π–±–∞, 
    —É –∫–æ—Ç–æ—Ä—ã—Ö –≤–∫–ª—é—á–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è '–û—Ç —Ç—Ä–∞–π–±–∞' (FLAG_MAP['tribe']).
    """
    data = load_data()
    tribe = data["tribes"].get(leader_id)
    if not tribe:
        return  # –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ —Ç—Ä–∞–π–±–∞

    # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ user_id, –∫–æ—Ç–æ—Ä—ã–º —Å–ª–∞—Ç—å
    recipients = []
    for member in tribe.get("members", []):
        uid = member["user_id"]
        user = data["users"].get(uid, {})
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∏—Ç 'tribe'
        if user.get("notif_flags", 0) & FLAG_MAP["tribe"]:
            recipients.append(uid)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    title = tribe.get("name", "–í–∞—à —Ç—Ä–∞–π–±")
    msg = (
        f"üè∞ <b>–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç —Ç—Ä–∞–π–±–∞ ¬´{title}¬ª</b>\n\n"
        f"{announcement_text}"
    )

    # –®–ª—ë–º –∫–∞–∂–¥–æ–º—É –ø–æ–¥–ø–∏—Å—á–∏–∫—É
    delivered = 0
    for uid in recipients:
        try:
            bot.send_message(uid, msg, parse_mode="HTML")
            delivered += 1
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å tribe-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {uid}: {e}")

    return delivered

@bot.callback_query_handler(func=lambda c: c.data == "admin_tribe_announce")
def admin_tribe_announce(call):
    leader_id = str(call.from_user.id)
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –≤–∞—à–µ–≥–æ —Ç—Ä–∞–π–±–∞:")
    bot.register_next_step_handler(msg, lambda m: _send_tribe_announce(leader_id, m.text, call))
    
def _send_tribe_announce(leader_id, text, call):
    delivered = create_tribe_announcement(leader_id, text)
    bot.send_message(
        call.message.chat.id,
        f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {delivered} —É—á–∞—Å—Ç–Ω–∏–∫–∞–º."
    )

@bot.callback_query_handler(func=lambda c: c.data == "create_tribe_announcement")
def cb_create_tribe_announcement(call):
    leader_id = str(call.from_user.id)
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –≤–∞—à–µ–≥–æ —Ç—Ä–∞–π–±–∞:")
    bot.register_next_step_handler(msg, lambda m: _send_tribe_announce(leader_id, m.text, call))

@bot.callback_query_handler(func=lambda call: call.data == "manage_tribe")
def manage_tribe_menu(call):
    kb = clan_management_markup()
    try:
        bot.edit_message_text("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–π–±–æ–º:", call.message.chat.id, call.message.message_id, reply_markup=kb)
    except Exception as e:
        print(f"[ERROR] –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–π–±–æ–º: {e}")

@bot.callback_query_handler(func=lambda call: call.data == "edit_tribe_desc")
def edit_tribe_desc_prompt(call):
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–π–±–∞ (–¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤):")
    bot.register_next_step_handler(msg, process_edit_tribe_desc)

def process_edit_tribe_desc(message):
    user_id = str(message.from_user.id)
    new_desc = message.text.strip()
    if len(new_desc) > 50:
        bot.send_message(message.chat.id, "‚ùó –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    data = load_data()
    tribe = data["tribes"].get(user_id)
    if not tribe:
        bot.send_message(message.chat.id, "‚ùå –¢—Ä–∞–π–± –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    last_change = tribe.get("last_desc_change")
    if last_change:
        try:
            last_date = datetime.strptime(last_change, "%Y-%m-%d")
            if (datetime.now() - last_date).days < 3:
                bot.send_message(message.chat.id, "‚ùó –û–ø–∏—Å–∞–Ω–∏–µ –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å —Ä–∞–∑ –≤ —Ç—Ä–∏ –¥–Ω—è.")
                return
        except Exception:
            pass
    tribe["desc"] = new_desc
    tribe["last_desc_change"] = datetime.now().strftime("%Y-%m-%d")
    save_data(data)
    bot.send_message(message.chat.id, "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–π–±–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=clan_edit_markup())

@bot.callback_query_handler(func=lambda call: call.data == "edit_tribe_name")
def edit_tribe_name_prompt(call):
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–∞–π–±–∞ (–¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤):")
    bot.register_next_step_handler(msg, process_edit_tribe_name)

def process_edit_tribe_name(message):
    user_id = str(message.from_user.id)
    new_name = message.text.strip()
    if len(new_name) > 20:
        bot.send_message(message.chat.id, "‚ùó –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    data = load_data()
    tribe = data["tribes"].get(user_id)
    if not tribe:
        bot.send_message(message.chat.id, "‚ùå –¢—Ä–∞–π–± –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    user = data["users"].get(user_id, {})
    cost = 0 if user.get("bv_plus") else 250
    if user.get("balance", 0) < cost:
        bot.send_message(message.chat.id, "‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è.")
        return
    user["balance"] -= cost
    tribe["name"] = new_name
    for member in tribe.get("members", []):
        uid = member.get("user_id")
        if uid in data.get("users", {}):
            data["users"][uid]["tribe"] = new_name
    save_data(data)
    bot.send_message(
        message.chat.id,
        "‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–∞–π–±–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ." + (f" –°–ø–∏—Å–∞–Ω–æ {cost} –º–æ–Ω–µ—Ç." if cost else ""),
        reply_markup=clan_edit_markup(),
    )

@bot.callback_query_handler(func=lambda call: call.data == "edit_tribe_id")
def edit_tribe_id_prompt(call):
    user_id = str(call.from_user.id)
    data = load_data()
    user = data["users"].get(user_id, {})
    cost = 0 if user.get("bv_plus") else 50
    msg = bot.send_message(call.message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π ID —Ç—Ä–∞–π–±–∞ (3 —Å–∏–º–≤–æ–ª–∞). –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost}‚ÇΩ:")
    bot.register_next_step_handler(msg, process_edit_tribe_id)

def process_edit_tribe_id(message):
    user_id = str(message.from_user.id)
    new_id = message.text.strip()
    if len(new_id) != 3:
        bot.send_message(message.chat.id, "‚ùó ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–æ–≤–Ω–æ 3 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    data = load_data()
    tribe = data["tribes"].get(user_id)
    if not tribe:
        bot.send_message(message.chat.id, "‚ùå –¢—Ä–∞–π–± –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    user = data["users"].get(user_id, {})
    cost = 0 if user.get("bv_plus") else 50
    if user.get("balance", 0) < cost:
        bot.send_message(message.chat.id, "‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ID.")
        return
    user["balance"] -= cost
    tribe["id"] = new_id.upper()
    save_data(data)
    bot.send_message(message.chat.id, "‚úÖ ID —Ç—Ä–∞–π–±–∞ –∏–∑–º–µ–Ω—ë–Ω.", reply_markup=clan_edit_markup())

@bot.callback_query_handler(func=lambda call: call.data == "assign_tribe_helper")
def assign_helper_prompt(call):
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –∏–ª–∏ @username —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–º–æ—â–Ω–∏–∫–æ–º:")
    bot.register_next_step_handler(msg, process_assign_helper)

def process_assign_helper(message):
    user_id = str(message.from_user.id)
    query = message.text.strip().lower()
    data = load_data()
    tribe = data["tribes"].get(user_id)
    if not tribe:
        bot.send_message(message.chat.id, "‚ùå –¢—Ä–∞–π–± –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    found = None
    for member in tribe["members"]:
        if query == member.get("nickname", "").lower() or query == member.get("telegram_username", "").lower() or query in member.get("nickname", "").lower():
            found = member
            break
    if not found:
        bot.send_message(message.chat.id, "‚ùó –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–º —Ç—Ä–∞–π–±–µ.")
        return
    found["role"] = "–ü–æ–º–æ—â–Ω–∏–∫"
    save_data(data)
    bot.send_message(message.chat.id, f"‚úÖ {found['nickname']} –Ω–∞–∑–Ω–∞—á–µ–Ω(–∞) –ø–æ–º–æ—â–Ω–∏–∫–æ–º.", reply_markup=clan_edit_markup())

# -------------------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ú–æ–π —Ç—Ä–∞–π–±" --------------------
@bot.callback_query_handler(func=lambda call: call.data == "view_tribe")
def view_tribe(call):
    user_id = str(call.from_user.id)
    data = load_data()
    leader_id, tribe = get_user_tribe(user_id, data)
    if not tribe:
        bot.answer_callback_query(call.id, "–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Ç—Ä–∞–π–±–µ.")
        return
    members_info = ""
    for member in tribe["members"]:
        uid = member["user_id"]
        role = member.get("role", "")
        role_emoji = "üëë" if role == "–ì–ª–∞–≤–∞" else ("‚úçÔ∏è" if role == "–ü–æ–º–æ—â–Ω–∏–∫" else "")
        user_data = data["users"].get(uid, {})
        star = "‚≠ê" if user_data.get("bv_plus") else ""
        username = member.get("telegram_username", "")
        if username:
            members_info += f"{member['nickname']} {role_emoji}{star} (@{username})\n"
        else:
            members_info += f"{member['nickname']} {role_emoji}{star}\n"
    level = tribe.get("level", 1)
    xp_cur = tribe.get("xp", 0)
    xp_needed = tribe_xp_to_next(level)
    filled = int(min(xp_cur, xp_needed) / xp_needed * 10)
    bar = "[" + "üü¶" * filled + "‚¨ú" * (10 - filled) + "]"
    xp_info = f"({xp_cur}/{xp_needed})"

    text = (
        f"üè∞ <b>–í–∞—à —Ç—Ä–∞–π–±</b>\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"üìõ <b>–ù–∞–∑–≤–∞–Ω–∏–µ –∏ ID:</b> {tribe['name']} [{tribe['id']}]\n"
        f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {tribe['desc']}\n"
        f"üìÖ <b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> {tribe['date_created']}\n"
        f"üèÜ <b>LVL:</b> {level} {xp_info}\n"
        f"{bar}\n"
        f"üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> {len(tribe['members'])}/10\n\n"
        f"üë§ <b>–°–æ—Å—Ç–∞–≤:</b>\n{members_info}\n"
        f"üîó <b>–ë–µ—Å–µ–¥–∞:</b> {tribe['chat_link'] or '‚Äî'}"
    )
    if tribe["leader"] == user_id:
        kb = types.InlineKeyboardMarkup()
        kb.row(
            types.InlineKeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª—è—Ç—å", callback_data="manage_tribe"),
            types.InlineKeyboardButton("üí• –†–∞—Å–ø—É—Å—Ç–∏—Ç—å", callback_data="disband_tribe")
        )
        kb.row(
            types.InlineKeyboardButton("üìú –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–π–±–æ–≤", callback_data="list_tribes"),
            types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="tribe_menu")
        )
    else:
        kb = types.InlineKeyboardMarkup()
        kb.row(
            types.InlineKeyboardButton("üö™ –ü–æ–∫–∏–Ω—É—Ç—å", callback_data="leave_tribe"),
            types.InlineKeyboardButton("üìú –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–π–±–æ–≤", callback_data="list_tribes")
        )
        kb.row(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="tribe_menu"))
    try:
        bot.send_message(call.message.chat.id, text, reply_markup=kb, parse_mode="HTML")
    except Exception as e:
        print(f"[ERROR] –ü—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ç—Ä–∞–π–±–∞: {e}")
        bot.send_message(call.message.chat.id, text, reply_markup=kb, parse_mode="HTML")

#----------------–ü—Ä–æ–º–æ–∫–æ–¥—ã-------------------


def process_promo_code(message):
    user_id = str(message.from_user.id)
    code_input = message.text.strip()
    data = load_data()

    promo_codes = data.get("promo_codes", {})
    promo_key = next((key for key in promo_codes if key.lower() == code_input.lower()), None)

    if not promo_key:
        bot.send_message(message.chat.id, "‚ùå –¢–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", reply_markup=get_main_menu_markup(user_id))
        return

    promo = promo_codes[promo_key]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
    expires_at = promo.get("expires_at")
    if expires_at:
        try:
            expiration = datetime.strptime(expires_at, "%Y-%m-%dT%H:%M:%S")
            if datetime.now() > expiration:
                bot.send_message(message.chat.id, "‚åõ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—Ç—ë–∫.", reply_markup=get_main_menu_markup(user_id))
                return
        except Exception as e:
            print(f"[promo expiration parse error]: {e}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
    used_by = promo.setdefault("used_by", [])
    if len(used_by) >= promo.get("max_uses", 1):
        bot.send_message(message.chat.id, "üö´ –ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —Ä–∞–∑.", reply_markup=get_main_menu_markup(user_id))
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    if promo.get("unique", True) and int(user_id) in used_by:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥.", reply_markup=get_main_menu_markup(user_id))
        return

    # üí∞ –î–µ–Ω—å–≥–∏
    money = promo.get("bonus", 0)
    user = data["users"].setdefault(user_id, {})
    user.setdefault("balance", 0)
    user.setdefault("promo_codes_used", [])
    user.setdefault("purchases", [])

    if isinstance(money, int) and money > 0:
        user["balance"] += money
        user["purchases"].append({
            "item": f"–ü—Ä–æ–º–æ–∫–æ–¥ {promo_key}",
            "price": money,
            "date": datetime.now().strftime("%d.%m.%Y %H:%M:%S")
        })

    if int(user_id) not in used_by:
        used_by.append(int(user_id))
    if promo_key not in user["promo_codes_used"]:
        user["promo_codes_used"].append(promo_key)

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –µ—Å–ª–∏ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π
    if promo.get("delete_after_use") and promo.get("max_uses", 1) <= len(used_by):
        del data["promo_codes"][promo_key]

    save_data(data)

    print(f"[PROMO] {user_id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª {promo_key} ‚Äî {money}‚ÇΩ")
    bot.send_message(message.chat.id, f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω—ë–Ω!\nüí∞ –ù–∞—á–∏—Å–ª–µ–Ω–æ: {money}‚ÇΩ", reply_markup=get_main_menu_markup(user_id))

def process_profile_promo(message):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è.
    –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—â—É—é –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞.
    """
    process_promo_code(message)  # –µ—Å–ª–∏ –ª–æ–≥–∏–∫–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é



@bot.callback_query_handler(func=lambda call: call.data == "activate_promo_welcome")
def handle_activate_promo(call):
    msg = bot.send_message(call.message.chat.id, "üéü –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:")
    bot.register_next_step_handler(msg, process_promo_code)

def create_promo(code, reward, max_uses=1, unique=True, expires_at=None, delete_after_use=False):
    data = load_data()
    data.setdefault("promo_codes", {})
    data["promo_codes"][code] = {
        "reward": reward,
        "max_uses": max_uses,
        "unique": unique,
        "expires_at": expires_at,  # —Ñ–æ—Ä–º–∞—Ç: "2025-04-01T00:00:00"
        "used_by": [],
        "delete_after_use": delete_after_use
    }
    save_data(data)





#------------------- –°—Ç—Ä–∏–∫–∏ ----------------------

@bot.message_handler(commands=["streak"])
def handle_streak(message):
    user_id = str(message.from_user.id)

    # –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∏–∫ (–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ XP/—É—Ä–æ–≤–µ–Ω—å)
    xp_reward, streak = update_streak(user_id)

    # –î–æ—Å—Ç–∞—ë–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
    data   = load_data()
    user   = data["users"].get(user_id)
    if not user or not user.get("approved", False):
        return bot.send_message(
            message.chat.id,
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞."
        )

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤—ã–≤–æ–¥–∞
    streak     = user.get("login_streak", 0)
    max_streak = user.get("max_login_streak", 0)
    last_login = user.get("last_login", "–Ω–∏–∫–æ–≥–¥–∞")
    ender_eyes = user.get("ender_eyes", 0)

    # –†–∞–Ω–≥ –ø–æ —Å—Ç—Ä–∏–∫—É
    if streak < 7:
        rank = "–ù–æ–≤–∏—á–æ–∫ üü¢"
    elif streak < 15:
        rank = "–ù–∞–¥—ë–∂–Ω—ã–π üîµ"
    elif streak < 30:
        rank = "–£–ø–æ—Ä–Ω—ã–π üü°"
    else:
        rank = "–õ–µ–≥–µ–Ω–¥–∞ üî¥"

    # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä: –¥–æ 10 –¥–Ω–µ–π
    fire_count = min(streak, 10)
    fire       = "üî•" * fire_count
    empty      = "‚ñ´Ô∏è" * (10 - fire_count)
    bar        = f"[{fire}{empty}]"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å—Ç—Ä–∏–∫–∞
    bot.send_message(
        message.chat.id,
        (
            f"<b>üî• –í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫</b>\n"
            f"{bar}\n\n"
            f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: {last_login}\n"
            f"üìà –¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: {streak} –¥–Ω.\n"
            f"üèÖ –†–∞–Ω–≥: {rank}\n"
            f"üîù –ú–∞–∫—Å. —Å—Ç—Ä–∏–∫: {max_streak} –¥–Ω.\n"
            f"üßø –û–∫–æ –≠–Ω–¥–µ—Ä–∞: {ender_eyes}"
        ),
        parse_mode="HTML"
    )


def update_streak(user_id: str):
    """
    –ü—Ä–∏ –≤—ã–∑–æ–≤–µ:
     ‚Äì –æ–±–Ω–æ–≤–ª—è–µ—Ç login_streak & max_login_streak,
     ‚Äì –Ω–∞—á–∏—Å–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ XP (25‚Äì125) + 1.5√ó –±–æ–Ω—É—Å BV#,
     ‚Äì –¥–∞—ë—Ç 5% —à–∞–Ω—Å –Ω–∞ +1 üßø,
     ‚Äì –¥–∞—ë—Ç 20% —à–∞–Ω—Å –Ω–∞ +1‚Äì5 üí∞,
     ‚Äì —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∫–∞—á–∏–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —á–µ—Ä–µ–∑ update_xp().
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (xp_reward, streak) –∏–ª–∏ (None, old_streak), –µ—Å–ª–∏ —É–∂–µ –∑–∞—Ö–æ–¥–∏–ª —Å–µ–≥–æ–¥–Ω—è.
    """
    data = load_data()
    user = data["users"].get(user_id)
    if not user:
        return None, 0

    today     = datetime.now().strftime("%Y-%m-%d")
    yesterday = (datetime.now() - timedelta(days=1)).strftime("%Y-%m-%d")

    # –£–∂–µ –∑–∞—Ö–æ–¥–∏–ª?
    if user.get("last_login") == today:
        return None, user.get("login_streak", 0)

    # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç—Ä–∏–∫
    if user.get("last_login") == yesterday:
        streak = user.get("login_streak", 0) + 1
    else:
        streak = 1

    user["login_streak"]     = streak
    user["last_login"]       = today
    user["max_login_streak"] = max(user.get("max_login_streak", 0), streak)

    # ‚Äî‚Äî‚Äî XP –∑–∞ –≤—Ö–æ–¥: 25‚Äì125, –ø–µ—Ä–µ–∫–æ—Å –≤–Ω–∏–∑ ‚Äî‚Äî‚Äî
    base_xp   = int((random.random() ** 2) * 100) + 25
    # –±–æ–Ω—É—Å BV#
    multiplier = 1.5 if user.get("bv_plus") else 1.0
    xp_reward  = int(base_xp * multiplier)
    add_user_xp(user_id, xp_reward, data)
    update_xp(user_id)

    # ‚Äî‚Äî‚Äî –®–∞–Ω—Å –Ω–∞ 1 üßø ‚Äî‚Äî‚Äî
    if random.random() < 0.05:
        user["ender_eyes"] = user.get("ender_eyes", 0) + 1
        eye_reward = 1
    else:
        eye_reward = 0

    # ‚Äî‚Äî‚Äî –®–∞–Ω—Å –Ω–∞ 1‚Äì5 üí∞ ‚Äî‚Äî‚Äî
    if random.random() < 0.20:
        coin_reward = random.randint(1, 5)
        user["balance"] = user.get("balance", 0) + coin_reward
    else:
        coin_reward = 0

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ —Å—Ç—Ä–∏–∫—É –∏ XP
    save_data(data)

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø—Ä–æ–∫–∞—á–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å
    update_xp(user_id)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–≥—Ä–∞–¥–µ –∑–∞ –≤—Ö–æ–¥
    msg = f"üéÅ –ó–∞ –≤—Ö–æ–¥ —Å–µ–≥–æ–¥–Ω—è: +{xp_reward} XP"
    if eye_reward:
        msg += f", +{eye_reward} üßø"
    if coin_reward:
        msg += f", +{coin_reward} üí∞"
    bot.send_message(user_id, msg)

    return xp_reward, streak



@bot.callback_query_handler(func=lambda call: call.data == "top_streaks")
def show_top_streaks(call):
    data = load_data().get("users", {})
    sorted_users = sorted(
        data.items(),
        key=lambda item: item[1].get("login_streak", 0),
        reverse=True
    )
    top5 = sorted_users[:5]

    if not top5:
        text = "üòï –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å—Ç—Ä–∏–∫–∞–º."
    else:
        text = "üî• *–¢–æ–ø‚Äë5 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Å—Ç—Ä–∏–∫—É:*\n"
        for i, (uid, u) in enumerate(top5, 1):
            nick   = u.get("nickname", "‚Äî")
            streak = u.get("login_streak", 0)
            text  += f"{i}. {nick} ‚Äî {streak}¬†–¥–Ω.\n"

    back_btn = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="stats_menu")
    back_markup = types.InlineKeyboardMarkup().add(back_btn)

    bot.edit_message_text(
        text,
        call.message.chat.id,
        call.message.message_id,
        parse_mode="Markdown",
        reply_markup=back_markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "top_levels")
def show_top_levels(call):
    data = load_data().get("users", {})
    sorted_users = sorted(
        data.items(),
        key=lambda item: item[1].get("level", 0),
        reverse=True
    )
    top5 = sorted_users[:5]

    if not top5:
        text = "üòï –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —É—Ä–æ–≤–Ω—è–º."
    else:
        text = "üèÜ <b>–¢–æ–ø-5 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—é:</b>\n"
        for i, (uid, u) in enumerate(top5, 1):
            nick  = u.get("nickname", "‚Äî")
            level = u.get("level", 0)
            text += f"{i}. {nick} ‚Äî {level} —É—Ä.\n"

    markup = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="stats_menu")
    )
    bot.edit_message_text(
        text,
        call.message.chat.id,
        call.message.message_id,
        parse_mode="HTML",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "top_tribes")
def show_top_tribes(call):
    data = load_data().get("tribes", {})
    sorted_tribes = sorted(
        data.values(),
        key=lambda t: t.get("level", 0),
        reverse=True
    )
    top5 = sorted_tribes[:5]

    if not top5:
        text = "üòï –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç—Ä–∞–π–±–∞–º."
    else:
        text = "üõ° <b>–¢–æ–ø-5 —Ç—Ä–∞–π–±–æ–≤:</b>\n"
        for i, tribe in enumerate(top5, 1):
            name = tribe.get("name", "‚Äî")
            level = tribe.get("level", 1)
            text += f"{i}. {name} ‚Äî {level} —É—Ä.\n"

    markup = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="stats_menu")
    )
    bot.edit_message_text(
        text,
        call.message.chat.id,
        call.message.message_id,
        parse_mode="HTML",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "season_archive")
def show_season_archive(call):
    seasons = load_seasons()
    text = "üóÇ <b>–ê—Ä—Ö–∏–≤ —Å–µ–∑–æ–Ω–æ–≤</b>"
    if seasons:
        for s in seasons:
            number = s.get("number", "")
            name = s.get("name", f"–°–µ–∑–æ–Ω {number}")
            dates = s.get("dates", "")
            text += f"\n{number}. {name} ({dates})"
    else:
        text += "\n–ê—Ä—Ö–∏–≤ —Å–µ–∑–æ–Ω–æ–≤ –ø—É—Å—Ç."

    markup = types.InlineKeyboardMarkup()
    if call.from_user.id == ADMIN_ID:
        markup.add(types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–µ–∑–æ–Ω", callback_data="season_add"))
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="stats_menu"))
    bot.edit_message_text(
        text,
        call.message.chat.id,
        call.message.message_id,
        parse_mode="HTML",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("season_view_"))
def show_season_detail(call):
    try:
        number = int(call.data.split("_")[-1])
    except ValueError:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –Ω–æ–º–µ—Ä–∞ —Å–µ–∑–æ–Ω–∞")
        return
    seasons = load_seasons()
    season = next((s for s in seasons if s.get("number") == number), None)
    if not season:
        bot.answer_callback_query(call.id, "–°–µ–∑–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    text = (
        f"<b>{season.get('name', '–°–µ–∑–æ–Ω')} - {season.get('number')}</b>\n"
        f"{season.get('dates', '')}\n\n"
        f"{season.get('description', '')}"
    )
    pages = season.get("pages") or []
    if pages:
        text += "\n\n" + "\n".join(f"- {p}" for p in pages)
    markup = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton("üîô –ö —Å–µ–∑–æ–Ω–∞–º", callback_data="season_archive")
    )
    bot.edit_message_text(
        text,
        call.message.chat.id,
        call.message.message_id,
        parse_mode="HTML",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "season_add")
def add_season_start(call):
    if call.from_user.id != ADMIN_ID:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞:")
    user_states[str(call.from_user.id)] = {"state": "awaiting_season_title", "temp_data": {}}
    bot.register_next_step_handler(msg, process_season_title)

@bot.message_handler(commands=["add_season"])
def cmd_add_season(message):
    if message.from_user.id != ADMIN_ID:
        return
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞:")
    user_states[str(message.from_user.id)] = {"state": "awaiting_season_title", "temp_data": {}}
    bot.register_next_step_handler(msg, process_season_title)

@bot.message_handler(func=lambda m: str(m.from_user.id) in user_states and user_states[str(m.from_user.id)].get("state") == "awaiting_season_title")
def process_season_title(message):
    if message.from_user.id != ADMIN_ID:
        return
    user_states[str(message.from_user.id)]["temp_data"]["title"] = message.text.strip()
    user_states[str(message.from_user.id)]["state"] = "awaiting_season_dates"
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—ã —Å–µ–∑–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä 01.2023 - 06.2023):")
    bot.register_next_step_handler(msg, process_season_dates)

@bot.message_handler(func=lambda m: str(m.from_user.id) in user_states and user_states[str(m.from_user.id)].get("state") == "awaiting_season_dates")
def process_season_dates(message):
    if message.from_user.id != ADMIN_ID:
        return
    user_states[str(message.from_user.id)]["temp_data"]["dates"] = message.text.strip()
    user_states[str(message.from_user.id)]["state"] = "awaiting_season_desc"
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞:")
    bot.register_next_step_handler(msg, process_season_desc)

@bot.message_handler(func=lambda m: str(m.from_user.id) in user_states and user_states[str(m.from_user.id)].get("state") == "awaiting_season_desc")
def process_season_desc(message):
    if message.from_user.id != ADMIN_ID:
        return
    info = user_states.pop(str(message.from_user.id), {}).get("temp_data", {})
    info["description"] = message.text.strip()
    seasons = load_seasons()
    number = len(seasons) + 1
    season = {
        "number": number,
        "name": info.get("title", f"–°–µ–∑–æ–Ω {number}"),
        "dates": info.get("dates", ""),
        "description": info.get("description", ""),
        "pages": []
    }
    seasons.append(season)
    save_seasons(seasons)
    bot.send_message(message.chat.id, f"–°–µ–∑–æ–Ω '{season['name']}' –¥–æ–±–∞–≤–ª–µ–Ω.")

#------------------- –û–∫–æ –≠–Ω–¥–µ—Ä–∞ ----------------------

def add_ender_eye(user_id, amount):
    data = load_data()
    user = data["users"].get(user_id)
    if user is None:
        return False  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ 0 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    current = user.get("ender_eyes", 0)
    user["ender_eyes"] = current + amount
    save_data(data)
    return True

def award_beta_tribe_bonus():
    data = load_data()
    for uid, user in data["users"].items():
        if user.get("tribe") and not user.get("beta_tribe_bonus_given", False):
            user["ender_eyes"] = user.get("ender_eyes", 0) + 5
            user["beta_tribe_bonus_given"] = True
            try:
                bot.send_message(uid, "üéÅ –ù–∞–≥—Ä–∞–¥–∞ –±–µ—Ç–∞ –∑–∞–ø—É—Å–∫–∞: –í—ã —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Ç—Ä–∞–π–±–µ, –≤–∞–º –≤—ã–¥–∞–Ω–æ +5 üßø –û–ö —ç–Ω–¥–µ—Ä–∞!")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")
    save_data(data)

@bot.message_handler(commands=["award_beta"])
def cmd_award_beta(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    award_beta_tribe_bonus()
    bot.send_message(message.chat.id, "–ë–æ–Ω—É—Å—ã –¥–ª—è —Ç–µ–∫—É—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—Ä–∞–π–±–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω—ã!")

def process_tribe_login_rewards(user_id):
    data = load_data()
    user = data["users"].get(user_id)
    if not user or "tribe" not in user:
        return  # –∏–≥—Ä–æ–∫ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ —Ç—Ä–∞–π–±–µ

    now = datetime.now()
    today = now.strftime("%Y-%m-%d")
    last_bonus_str = user.get("last_tribe_join_bonus")

    give_bonus = False
    if last_bonus_str:
        try:
            last_bonus_date = datetime.strptime(last_bonus_str, "%Y-%m-%d")
            if (now - last_bonus_date).days >= 3:
                give_bonus = True
        except Exception:
            give_bonus = True  # –µ—Å–ª–∏ –¥–∞—Ç–∞ –±–∏—Ç–∞—è ‚Äî –≤—Å—ë —Ä–∞–≤–Ω–æ –≤—ã–¥–∞—ë–º
    else:
        give_bonus = True

    if give_bonus:
        user["ender_eyes"] = user.get("ender_eyes", 0) + 5
        user["last_tribe_join_bonus"] = today
        try:
            bot.send_message(user_id, "üéÅ –ó–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —Ç—Ä–∞–π–±: +5 üßø –û–∫–æ –≠–Ω–¥–µ—Ä–∞!")
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ–Ω—É—Å –∑–∞ —Ç—Ä–∞–π–± –∏–≥—Ä–æ–∫—É {user_id}: {e}")

    save_data(data)




# ------------------- –ü–æ–¥–∞—Ä–æ–∫ -------------------
@bot.callback_query_handler(func=lambda call: call.data == "daily_gift")
def handle_daily_gift(call):
    user_id = str(call.from_user.id)
    data    = load_data()
    user    = data["users"].get(user_id)
    if not user:
        return bot.answer_callback_query(call.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!")

    today = datetime.now().date().isoformat()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—Ä–∞–ª –ª–∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è
    if user.get("last_daily_gift") == today:
        now = datetime.now()
        nxt = datetime.combine(now.date() + timedelta(days=1), datetime.min.time())
        delta = nxt - now
        hrs, mins = delta.seconds // 3600, (delta.seconds % 3600) // 60
        return bot.answer_callback_query(call.id,
            f"üéÅ –í—ã —É–∂–µ –±—Ä–∞–ª–∏ –ø–æ–¥–∞—Ä–æ–∫. –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ {hrs}—á{mins}–º."
        )

    # –†–∞–Ω–¥–æ–º–∏–º –ø—Ä–∏–∑
    r = random.random()
    # —Ä–∞—Å—á—ë—Ç XP: –æ—Ç 5 –¥–æ 35, —Å –ø–µ—Ä–µ–∫–æ—Å–æ–º –≤ –º–∞–ª—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    xp_amount = int((random.random()**2) * 30) + 5
    text = ""

    if r < 0.05:
        # –∫–æ–º–±–æ-–ø–æ–¥–∞—Ä–æ–∫: XP + –º–æ–Ω–µ—Ç–∫–∞
        coins = random.randint(1, 3)
        add_user_xp(user_id, xp_amount, data)
        user["balance"] = user.get("balance", 0) + coins
        text = f"–ö–æ–º–±–æ–ø–æ–¥–∞—Ä–æ–∫! +{xp_amount} XP, +{coins}üí∞"
    elif r < 0.10:
        # –æ–¥–∏–Ω –≥–ª–∞–∑ –≠–Ω–¥–µ—Ä–∞
        user["ender_eyes"] = user.get("ender_eyes", 0) + 1
        text = "+1 üßø –û–∫–æ –≠–Ω–¥–µ—Ä–∞"
    elif r < 0.20:
        # —Ç–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç—ã
        coins = random.randint(1, 5)
        user["balance"] = user.get("balance", 0) + coins
        text = f"+{coins}üí∞ –º–æ–Ω–µ—Ç"
    else:
        # —Ç–æ–ª—å–∫–æ XP
        add_user_xp(user_id, xp_amount, data)
        text = f"+{xp_amount} XP"

    # –æ—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –ø–æ–¥–∞—Ä–æ–∫ –≤–∑—è—Ç
    user["last_daily_gift"] = today
    save_data(data)

    save_data(data)
    update_xp(user_id)

    # –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.answer_callback_query(call.id, text)
    bot.send_message(call.message.chat.id, f"üéÅ {text}")

    # –æ–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É (–µ—Å–ª–∏ —É –≤–∞—Å –º–µ–Ω—é –≤ —Ç–æ–º –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–∏)
    try:
        kb = market_main_markup(user_id)
        bot.edit_message_reply_markup(
            call.message.chat.id,
            call.message.message_id,
            reply_markup=kb
        )
    except:
        pass

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è
def is_user_approved(user_id):
    data = load_data()
    return user_id in data["users"] and data["users"][user_id].get("approved", False)


# –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ—Ö–≤–∞—Ç–∫–µ —Å—Ä–µ–¥—Å—Ç–≤
def insufficient_funds_bv(message):
    bot.send_message(message.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ BV+.", reply_markup=welcome_markup())

def safe_edit_message_text(text, chat_id, message_id, reply_markup=None):
    """
    –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ; –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞—ë—Ç—Å—è ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    try:
        bot.edit_message_text(text, chat_id, message_id, reply_markup=reply_markup, parse_mode="HTML")
    except Exception as e:
        print(f"[ERROR] safe_edit_message_text: {e}")
        bot.send_message(chat_id, text, reply_markup=reply_markup, parse_mode="HTML")

def process_purchase(user_id, price, item):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏,
    —Å–ø–∏—Å—ã–≤–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É, –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–∫—É–ø–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å.
    """
    data = load_data()
    user = data["users"].get(user_id)
    if not user:
        return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
    if user.get("balance", 0) < price:
        return False, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤."
    user["balance"] -= price
    user.setdefault("purchases", []).append({
        "item": item,
        "price": price,
        "date": datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    })
    save_data(data)
    return True, f"–£—Å–ª—É–≥–∞ {item} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∞."


# ------------------- –ë–æ—Ç –≤ –≥—Ä—É–ø–ø–µ (—Å ¬´–∫—Ç–æ —ç—Ç–æ¬ª, ¬´—Ç—Ä–∞–π–±—ã¬ª, ¬´–ø–æ–¥–∞—Ä–æ–∫¬ª –∏ ¬´—Ä–æ–ª–∏¬ª) -------------------
@bot.message_handler(func=lambda m: 
    m.chat.type in ["group", "supergroup"] and
    m.chat.id == -1002353421985 and
    m.message_thread_id == 28 and
    (
        # –µ—Å–ª–∏ —Ä–µ–ø–ª–∞—è—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–¥–Ω–∞ –∏–∑ allowed_texts
        (m.reply_to_message and 
         m.text and 
         m.text.strip().lower() in [
             "–∫—Ç–æ —ç—Ç–æ", "–∫—Ç–æ –æ–Ω", "–∫—Ç–æ –æ–Ω–∞", "–∫—Ç–æ —Ç–∞–∫–æ–π", "–∫—Ç–æ —Ç–∞–∫–∞—è",
             "—Ç—Ä–∞–π–±—ã", "/—Ç—Ä–∞–π–±—ã", "—Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–π–±–æ–≤", "–≤—Å–µ —Ç—Ä–∞–π–±—ã",
             "–ø–æ–¥–∞—Ä–æ–∫", "/–ø–æ–¥–∞—Ä–æ–∫", "–¥–∞–π –ø–æ–¥–∞—Ä–æ–∫", "—Ö–æ—á—É –ø–æ–¥–∞—Ä–æ–∫"
         ]
        )
        # –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∫–æ–º–∞–Ω–¥–∞ —Ä–æ–ª–µ–π
        or
        (m.text and m.text.strip().lower() in ["—Ä–æ–ª–∏", "/—Ä–æ–ª–∏", "—Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π", "–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏"])
    )
)
def handle_group_commands(m):
    text = m.text.strip().lower()

    # ===== "–ö–¢–û –≠–¢–û"
    if m.reply_to_message and text in ["–∫—Ç–æ —ç—Ç–æ", "–∫—Ç–æ –æ–Ω", "–∫—Ç–æ –æ–Ω–∞", "–∫—Ç–æ —Ç–∞–∫–æ–π", "–∫—Ç–æ —Ç–∞–∫–∞—è"]:
        target_user = m.reply_to_message.from_user
        if not target_user:
            return
        data = load_data()
        uid = str(target_user.id)
        if uid not in data["users"]:
            bot.reply_to(m, "‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            return
        user = data["users"][uid]
        msg = render_search_profile(user)
        bot.reply_to(m, msg, parse_mode="HTML")
        return

    # ===== "–¢–†–ê–ô–ë–´"
    if m.reply_to_message and text in ["—Ç—Ä–∞–π–±—ã", "/—Ç—Ä–∞–π–±—ã", "—Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–π–±–æ–≤", "–≤—Å–µ —Ç—Ä–∞–π–±—ã"]:
        # –≤—ã–∑—ã–≤–∞–µ–º –≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–π–±–æ–≤
        tribe_list(SimpleNamespace(message=m, from_user=m.from_user, data="list_tribes"))
        return

    # ===== "–ü–û–î–ê–†–û–ö"
    if m.reply_to_message and text in ["–ø–æ–¥–∞—Ä–æ–∫", "/–ø–æ–¥–∞—Ä–æ–∫", "–¥–∞–π –ø–æ–¥–∞—Ä–æ–∫", "—Ö–æ—á—É –ø–æ–¥–∞—Ä–æ–∫"]:
        bot.send_message(
            m.chat.id,
            "üéÅ –¢–µ–ø–µ—Ä—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤–æ –≤–∫–ª–∞–¥–∫–µ *–ú–∞—Ä–∫–µ—Ç* –≤–Ω—É—Ç—Ä–∏ –±–æ—Ç–∞.",
            message_thread_id=m.message_thread_id,
            parse_mode="Markdown"
        )
        return

    # ===== "–†–û–õ–ò"
    if text in ["—Ä–æ–ª–∏", "/—Ä–æ–ª–∏", "—Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π", "–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏"]:
     data = load_data()
     users = data.get("users", {})
     roles_list = {
        "PRES001": "–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç",
        "MAY002":  "–ú—ç—Ä",
        "CON003":  "–ú–∏–Ω–∏—Å—Ç—Ä –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞",
        "FIN004":  "–ú–∏–Ω–∏—Å—Ç—Ä –§–∏–Ω–∞–Ω—Å–æ–≤",
        "PRO005":  "–ü—Ä–æ–∫—É—Ä–æ—Ä",              # ‚Üê –¥–æ–±–∞–≤–∏–ª–∏
    }

    msg_text = "<b>üé≠ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏:</b>\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    for _, role_name in roles_list.items():
        owner = None
        for uid, u in users.items():
            if u.get("role") == role_name:
                nick  = u.get("nickname", "‚Äî")
                uname = u.get("telegram_username", "")
                if role_name == "–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç":
                    owner = nick
                else:
                    owner = f"<a href='https://t.me/{uname}'>{nick}</a>" if uname else nick
                break
        if owner:
            msg_text += f"‚ñ™Ô∏è <b>{role_name}</b> ‚Äî {owner}\n"
        else:
            msg_text += f"‚ñ™Ô∏è <b>{role_name}</b> ‚Äî <i>–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ</i>\n"

    bot.send_message(
        m.chat.id,
        msg_text,
        parse_mode="HTML",
        disable_web_page_preview=True,
        message_thread_id=m.message_thread_id
    )
    return




#----------–†–æ–ª–∏------
@bot.callback_query_handler(func=lambda call: call.data == "show_roles")
def show_roles(call):
    data = load_data()
    users = data.get("users", {})

    # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π: –∫–æ–¥ -> –Ω–∞–∑–≤–∞–Ω–∏–µ
    roles_list = {
        "PRES001": "–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç",
        "MAY002":  "–ú—ç—Ä",
        "CON003":  "–ú–∏–Ω–∏—Å—Ç—Ä –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞",
        "FIN004":  "–ú–∏–Ω–∏—Å—Ç—Ä –§–∏–Ω–∞–Ω—Å–æ–≤",
        "PRO005":  "–ü—Ä–æ–∫—É—Ä–æ—Ä",              # ‚Üê –¥–æ–±–∞–≤–∏–ª–∏
    }

    text = "<b>üé≠ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏:</b>\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"

    for _, role_name in roles_list.items():
        owner = None
        for uid, user in users.items():
            if user.get("role") == role_name:
                nickname = user.get("nickname", "‚Äî")
                username = user.get("telegram_username", "")
                if role_name == "–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç":
                    owner = nickname
                else:
                    owner = f"<a href='https://t.me/{username}'>{nickname}</a>" if username else nickname
                break
        if owner:
            text += f"‚ñ™Ô∏è <b>{role_name}</b> ‚Äî {owner}\n"
        else:
            text += f"‚ñ™Ô∏è <b>{role_name}</b> ‚Äî <i>–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ</i>\n"

    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="search_players"))

    try:
        bot.edit_message_text(
            text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=kb,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
    except Exception as e:
        print(f"[ERROR] show_roles: {e}")
        bot.send_message(call.message.chat.id, text, reply_markup=kb, parse_mode="HTML")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
#                       üìñ  GUIDE  BLOCK
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
GUIDE_STEPS = [
    {
        "title": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Bedrock Valley!",
        "text": (
            "–≠—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π Minecraft Bedrock-—Å–µ—Ä–≤–µ—Ä, –≥–¥–µ –º—ã —Å—Ç—Ä–æ–∏–º –∏ –∫–∞–π—Ñ—É–µ–º –±–µ–∑ –≥—Ä–∏—Ñ–∞ –∏ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏.\n\n"
            "–ù–∞–∂–∏–º–∞–π ‚ñ∂Ô∏è, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –∑–¥–µ—Å—å –≤—Å—ë —É—Å—Ç—Ä–æ–µ–Ω–æ."
        )
    },
    {
        "title": "–ë–∞–∑–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ üõ°",
        "text": (
            "- –ù–µ –≥—Ä–∏—Ñ–µ—Ä–∏—Ç—å –∏ –Ω–µ –∫—Ä–∞—Å—Ç—å.\n"
            "- PvP ‚Äî —Ç–æ–ª—å–∫–æ –ø–æ –≤–∑–∞–∏–º–Ω–æ–º—É —Å–æ–≥–ª–∞—Å–∏—é.\n"
            "- –£–≤–∞–∂–∞—Ç—å —á—É–∂–∏–µ –ø–æ—Å—Ç—Ä–æ–π–∫–∏.\n"
            "- –ë–µ–∑ —á–∏—Ç–æ–≤ –∏ —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤.\n"
            "- –ù–∏–∫–∞–∫–æ–π —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏.\n"
            "- –°—Ç—Ä–æ–π—Ç–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Å–≤–æ–µ–≥–æ —É—á–∞—Å—Ç–∫–∞.\n\n"
            "–ü–æ–ª–Ω—ã–π —Å–≤–æ–¥ –ø—Ä–∞–≤–∏–ª: https://telegra.ph/Rules-BV-12-22"
        )
    },
    {
        "title": "–ú–∞—Ä–∫–µ—Ç üõí",
        "text": (
            "–ó–∞—Ö–æ–¥–∏ –≤ ¬´üõí –ú–∞—Ä–∫–µ—Ç¬ª –∫–∞–∂–¥—ã–π –¥–µ–Ω—å:\n"
            "‚Ä¢ üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫\n"
            "‚Ä¢ üòä –ü–∞–∫–µ—Ç—ã —ç–º–æ–¥–∑–∏ –∏ –∫–µ–π—Å—ã\n"
            "‚Ä¢ ‚ú® –ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è –Ω–∏–∫–∞ –∏ –ø—Ä–æ—á–∏–µ –ø–ª—é—à–∫–∏\n"
            "‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∞ BVSharp"
        )
    },
    {
        "title": "–ü–æ–¥–ø–∏—Å–∫–∞ BV# ‚≠ê",
        "text": (
            "–°–∞–º—ã–π –≤—ã–≥–æ–¥–Ω—ã–π –∞–ø–≥—Ä–µ–π–¥:\n"
            "‚Ä¢ –ü–µ—Ä–≤—ã–π –º–µ—Å—è—Ü ‚Äî 169 ‚ÇΩ (–¥–∞–ª—å—à–µ 199 ‚ÇΩ/–º–µ—Å)\n"
            "‚Ä¢ üéÅ –ö–µ–π—Å ¬´–ö–æ–º–∞–Ω–¥–Ω—ã–π –±–ª–æ–∫¬ª –ø—Ä–∏ –∫–∞–∂–¥–æ–π –æ–ø–ª–∞—Ç–µ\n"
            "‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —ç–º–æ–¥–∑–∏ (–∫—Ä–æ–º–µ –ù–µ–∑–µ—Ä–∏—Ç–æ–≤—ã—Ö)\n"
            "‚Ä¢ –õ—é–±–æ–π —Ü–≤–µ—Ç –Ω–∏–∫–∞ –≤ Minecraft"
        )
    },
    {
        "title": "–û–∫–æ –≠–Ω–¥–µ—Ä–∞ üßø –∏ –°—Ç—Ä–∏–∫ üî•",
        "text": (
            "–ó–∞—Ö–æ–¥–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π —Å—Ç—Ä–∏–∫, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –±–æ–ª—å—à–µ –æ–ø—ã—Ç–∞.\n"
            "–û–∫–æ –≠–Ω–¥–µ—Ä–∞ –≤—ã–¥–∞—ë—Ç—Å—è –∑–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∏ —Ç—Ä–∞—Ç–∏—Ç—Å—è –≤ –ú–∞—Ä–∫–µ—Ç–µ –Ω–∞ —Ü–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã."
        )
    },
    {
        "title": "–°–æ–æ–±—â–µ—Å—Ç–≤–æ –∏ –¢—Ä–∞–π–±—ã üè∞",
        "text": (
            "–ß–µ—Ä–µ–∑ ¬´–°–æ–æ–±—â–µ—Å—Ç–≤–æ¬ª –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –º–µ–Ω—é –≤–∞—à–µ–≥–æ —Ç—Ä–∞–π–±–∞.\n"
            "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—Å—Ç—É–ø–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞–Ω, –∞ —Ç–∞–∫–∂–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É.\n"
            "–î–æ—Å—Ç—É–ø–µ–Ω —Å–ø–∏—Å–æ–∫ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π, –ø–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–æ–≤ –∏ –ø–æ–¥–∞—á–∞ –¥–µ–ª–∞ –≤ —Å—É–¥.\n"
            "–ü—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ LVL —Ç—Ä–∞–π–±–∞ –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–ª—É—á–∞—é—Ç +10 üßø."
        )
    },
    {
        "title": "–ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–æ–≤ –∏ —Ä–æ–ª–∏ üéØ",
        "text": (
            "–ò—â–∏ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –Ω–∏–∫—É –∏–ª–∏ Telegram.\n"
            "–¢—É—Ç –∂–µ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞."
        )
    },
    {
        "title": "–†–µ–π—Ç–∏–Ω–≥–∏ –∏ —Å–µ–∑–æ–Ω—ã üìä",
        "text": (
            "–°–ª–µ–¥–∏ –∑–∞ —Ç–æ–ø–∞–º–∏ –∏–≥—Ä–æ–∫–æ–≤ –∏ —Ç—Ä–∞–π–±–æ–≤ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞¬ª.\n"
            "–ê—Ä—Ö–∏–≤ –ø—Ä–æ—à–µ–¥—à–∏—Ö —Å–µ–∑–æ–Ω–æ–≤ –∏—â–∏ –≤ ¬´–ê—Ä—Ö–∏–≤–µ —Å–µ–∑–æ–Ω–æ–≤¬ª."
        )
    },
    {
        "title": "–ì–æ—Ç–æ–≤–æ! üéâ",
        "text": (
            "–¢—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –≥–∏–¥ –¥–æ –∫–æ–Ω—Ü–∞.\n"
            "–ù–∞ —Ç–≤–æ–π —Å—á—ë—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–æ +10 üßø –û–∫–æ –≠–Ω–¥–µ—Ä–∞.\n"
            "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–∞–π–¥—É –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /guide\n"
            "–ü—Ä–æ–ø–∏—à–∏ /start —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ"
        )
    }
]

GUIDE_REWARD_EYES = 10  # –Ω–∞–≥—Ä–∞–¥–∞ –¥–∞—ë—Ç—Å—è —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ setters/getters ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def get_user_guide_step(user):
    return user.get("guide_step", 0)

def set_user_guide_step(user, step):
    user["guide_step"] = step


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –æ—Å–Ω–æ–≤–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –≥–∏–¥–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def open_guide(chat_id, user_id, reset=False):
    data = load_data()
    user = data["users"].setdefault(user_id, {})
    step = 0 if reset else get_user_guide_step(user)
    if step >= len(GUIDE_STEPS):
        step = len(GUIDE_STEPS) - 1
    show_guide_step(chat_id, user_id, step)
    save_data(data)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ø–æ–∫–∞–∑ –æ–¥–Ω–æ–≥–æ —à–∞–≥–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def show_guide_step(chat_id, user_id, step):
    data = load_data()
    user = data["users"][user_id]

    title = GUIDE_STEPS[step]["title"]
    text  = GUIDE_STEPS[step]["text"]

    # –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    markup = types.InlineKeyboardMarkup()
    nav = []
    if step > 0:
        nav.append(types.InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"guide_prev_{step}"))
    nav.append(types.InlineKeyboardButton(f"{step+1}/{len(GUIDE_STEPS)}", callback_data="noop"))
    if step < len(GUIDE_STEPS) - 1:
        nav.append(types.InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"guide_next_{step}"))
    markup.row(*nav)

    # ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—á–∞–ª–µ
    if step == 0:
        markup.add(types.InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="guide_skip"))

    bot.send_message(chat_id, f"<b>{title}</b>\n\n{text}",
                     parse_mode="HTML", reply_markup=markup)

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    set_user_guide_step(user, step)

    # —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞
    if step == len(GUIDE_STEPS) - 1 and not user.get("guide_completed"):
        user["guide_completed"] = True
        user["ender_eyes"] = user.get("ender_eyes", 0) + GUIDE_REWARD_EYES
        user.setdefault("purchases", []).append({
            "item": "–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –≥–∏–¥–∞",
            "price": f"+{GUIDE_REWARD_EYES}üßø",
            "date": datetime.now().strftime("%d.%m.%Y %H:%M:%S")
        })

    save_data(data)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–æ–º–∞–Ω–¥—ã/–∫–æ–ª–±—ç–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@bot.message_handler(commands=["guide"])
def cmd_guide(message):
    open_guide(message.chat.id, str(message.from_user.id), reset=False)

@bot.callback_query_handler(func=lambda c: c.data.startswith("open_guide"))
def cb_open_guide(call):
    user_id = str(call.from_user.id)
    reset = call.data == "open_guide_reset"
    open_guide(call.message.chat.id, user_id, reset=reset)
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda c: c.data.startswith(("guide_prev_", "guide_next_")))
def guide_nav(call):
    user_id = str(call.from_user.id)
    direction, cur = call.data.split("_")[1], int(call.data.split("_")[2])
    step = cur - 1 if direction == "prev" else cur + 1
    show_guide_step(call.message.chat.id, user_id, step)
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda c: c.data == "guide_skip")
def guide_skip(call):
    bot.answer_callback_query(call.id, "–ì–∏–¥ –ø—Ä–æ–ø—É—â–µ–Ω. –ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è —á–µ—Ä–µ–∑ /guide.")
    bot.delete_message(call.message.chat.id, call.message.message_id)
    data = load_data()
    user = data["users"][str(call.from_user.id)]
    user["guide_step"] = 0
    save_data(data)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ë–ª–æ–∫ —Ä–∞–±–æ—Ç—ã —Å XP –∏ —É—Ä–æ–≤–Ω—è–º–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def xp_to_next(level: int) -> int:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ XP –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏
    —Å —É—Ä–æ–≤–Ω—è `level` –Ω–∞ `level+1`.
    0‚Üí1:100, 1‚Üí2:125, 2‚Üí3:150 –∏ —Ç.–¥.
    """
    return 100 + 25 * level

def tribe_xp_to_next(level: int) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç XP, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ç—Ä–∞–π–±—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å."""
    return 150 + 100 * level

def add_tribe_xp(leader_id: str, amount: int, data: dict):
    tribe = data.get("tribes", {}).get(leader_id)
    if not tribe:
        return
    tribe.setdefault("level", 1)
    tribe.setdefault("xp", 0)
    tribe["xp"] += amount
    leveled = False
    while tribe["xp"] >= tribe_xp_to_next(tribe["level"]):
        tribe["xp"] -= tribe_xp_to_next(tribe["level"])
        tribe["level"] += 1
        leveled = True
    if leveled:
        for member in tribe.get("members", []):
            uid = member.get("user_id")
            if uid in data.get("users", {}):
                usr = data["users"][uid]
                usr["ender_eyes"] = usr.get("ender_eyes", 0) + 10
                try:
                    bot.send_message(uid,
                                     f"üéâ –¢—Ä–∞–π–± {tribe['name']} –ø–æ–¥–Ω—è–ª —É—Ä–æ–≤–µ–Ω—å! +10 üßø –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º.")
                except Exception as e:
                    print(f"[WARN] notify tribe level up {uid}: {e}")

def add_user_xp(user_id: str, amount: int, data: dict):
    user = data["users"].setdefault(user_id, {})
    user.setdefault("xp", 0)
    user["xp"] += amount
    leader_id, tribe = get_user_tribe(user_id, data)
    if tribe:
        add_tribe_xp(leader_id, amount, data)
    return amount

def level_up(user_id: str, data: dict):
    """
    –ü–æ–¥–Ω–∏–º–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤—Å–µ —É—Ä–æ–≤–Ω–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω ¬´–ø—Ä–æ—Å–∫–æ—á–∏–ª¬ª,
    –≤—ã–¥–∞—ë—Ç –ø–æ 5 üßø –∑–∞ –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å (–ø–æ 10 üßø, –µ—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –∫—Ä–∞—Ç–µ–Ω 5),
    —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ —à–ª—ë—Ç –æ–¥–Ω–æ –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    user = data["users"][user_id]
    total_reward = 0

    # –¶–∏–∫–ª: –ø–æ–∫–∞ —Ö–≤–∞—Ç–∞–µ—Ç XP –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
    while user["xp"] >= xp_to_next(user["level"]):
        user["xp"]    -= xp_to_next(user["level"])
        user["level"] += 1

        reward = 10 if (user["level"] % 5 == 0) else 5
        user["ender_eyes"] = user.get("ender_eyes", 0) + reward
        total_reward += reward

    if total_reward > 0:
        save_data(data)
        bot.send_message(
            user_id,
            (
                f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ <b>{user['level']}</b>-–≥–æ —É—Ä–æ–≤–Ω—è.\n"
                f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ –≤—Å–µ–≥–æ +{total_reward} üßø –û–∫–æ –≠–Ω–¥–µ—Ä–∞.\n"
                f"–¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {user['xp']}/{xp_to_next(user['level'])} XP"
            ),
            parse_mode="HTML"
        )

def update_xp(user_id: str):
    """
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ save_data(data) –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ, –≥–¥–µ
    –≤—ã –¥–æ–±–∞–≤–ª—è–µ—Ç–µ XP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –ï—Å–ª–∏ XP –¥–æ—à—ë–ª –¥–æ –ø–æ—Ä–æ–≥–∞‚Äî
    –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç –≤—Å—é —Ä–∞–±–æ—Ç—É –≤ level_up().
    """
    data = load_data()
    user = data["users"].get(user_id)
    if not user:
        return

    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –ø–æ–ª—è
    user.setdefault("level", 0)
    user.setdefault("xp", 0)
    user.setdefault("ender_eyes", 0)

    # –ï—Å–ª–∏ XP –¥–æ—Å—Ç–∏–≥ –ø–æ—Ä–æ–≥–∞ ‚Äî –∞–ø–∞–µ–º
    if user["xp"] >= xp_to_next(user["level"]):
        level_up(user_id, data)

def award_xp(user: dict, base_xp: int) -> int:
    """
    –í–∞—à–∞ —Å—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ XP (—Å —É—á—ë—Ç–æ–º 1.5√ó –±–æ–Ω—É—Å–∞ BV#).
    –ü—Ä–æ—Å—Ç–æ –Ω–∞–∑–æ–≤–∏—Ç–µ –µ—ë —Ç–∞–∫ –∂–µ. –í –∫–æ–Ω—Ü–µ –Ω–µ —Å–æ–∑–¥–∞—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—é.
    """
    multiplier = 1.5 if user.get("bv_plus") else 1.0
    xp_add = int(base_xp * multiplier)
    user.setdefault("xp", 0)
    user["xp"] += xp_add
    return xp_add

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ XP ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


bot.infinity_polling(timeout=90, long_polling_timeout=45)





